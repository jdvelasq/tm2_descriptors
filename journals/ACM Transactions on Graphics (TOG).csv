Title,Year,Source title,Link,Abstract,Author Keywords,Index Keywords
Corrigendum,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976771780&doi=10.1145%2f212332.215264&partnerID=40&md5=caa3b0ba1098dc97c7b1ac11632b8eee,[No abstract available],,
Radiosity and Hybrid Methods,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029332591&doi=10.1145%2f212332.212347&partnerID=40&md5=d7d215bdc6fe35610d327a599097d32a,[No abstract available],,Algorithms; Computer simulation; Convergence of numerical methods; Image processing; Lighting; Numerical analysis; Complete two pass method; Conjugate gradient method; Distributed ray tracing method; Double path method; Global illumination problem; Hybrid method; Photosimulation; Radiosity method; Rendering equation; Residual image; Three dimensional computer graphics
Geometric Programming: A Programming Approach to Geometric Design,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029332522&doi=10.1145%2f212332.212349&partnerID=40&md5=f5e58fb789947772bb8e913a8f431953,[No abstract available],,Algorithms; Computer aided design; Computer graphics; Computer simulation; High level languages; Object recognition; Programming theory; Topology; Functional language; Generative modeling; Geometric programming; PLASM programming language; Polyhedra; Solid modeling; Syntactical level; Variational geometry; Computational geometry
An Empirical Study of Algorithms for Point-Feature Label Placement,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029332494&doi=10.1145%2f212332.212334&partnerID=40&md5=7ff68b66b482f805a75a605722e97536,"A major factor affecting the clarity of graphical displays that include text labels is the degree to which labels obscure display features (including other labels) as a result of spatial overlap. Point-feature label placement (PFLP) is the problem of placing text labels adjacent to point features on a map or diagram so as to maximize legibility. This problem occurs frequently in the production of many types of informational graphics, though it arises most often in automated cartography. In this paper we present a comprehensive treatment of the PFLP problem, viewed as a type of combinatorial optimization problem. Complexity analysis reveals that the basic PFLP problem and most interesting variants of it are NP-hard. These negative results help inform a survey of previously reported algorithms for PFLP; not surprisingly, all such algorithms either have exponential time complexity or are incomplete. To solve the PFLP problem in practice. then, we must rely on good heuristic methods. We propose two new methods, one based on a discrete form of gradient descent, the other on simulated annealing, and report on a series of empirical tests comparing these and the other known algorithms for the problem, Based on this study, the first to be conducted, we identify the best approaches as a function of available computation time. Categories and Subject Descriptors: H.5.2 [Information Interfaces and Presentation]: User interfaces-screen design. 1.2.1 [Artificial Intelligence]: Applications and Expert Systems-cartography. 1.3.5 [Computer Graphics]: Computational Geometry and Object Modeling-geometric algorithms, languages, and systems. General Terms: Algorithms, Experimentation. © 1995, ACM. All rights reserved.",Automated cartography; heuristic search; label placement; simulated annealing; stochastic methods,Algorithms; Computational complexity; Computational geometry; Computer simulation; Expert systems; Graphical user interfaces; Heuristic methods; Mapping; Optimization; Random processes; Empirical tests; Gradient descent; Graphical displays; Informational graphics; Point feature label placement; Computer graphics
Smooth B-Spline Illumination Maps for Bidirectional Ray Tracing,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029389450&doi=10.1145%2f225294.225296&partnerID=40&md5=2572a4969af8bc6088bbad300741ed61,"In this paper we introduce B-spline illumination maps and their generalizations and extensions for use in realistic image generation algorithms. The B-spline lighting functions (i.e., illumination maps) are defined as weighted probability density functions. The lighting functions can be estimated from random data and may be used in bidirectional distributed ray tracing programs as well as radiosity oriented algorithms. The use of these lighting functions in a bidirectional ray tracing system that can handle dispersion as well as the focusing of light through lenses is presented. © 1995, ACM. All rights reserved.",B-splines; bidirectional ray tracing; dispersion; illumination maps; nonparametric density estimation,Algorithms; Computer software; Estimation; Image processing; Lenses; Light; Lighting; Probability density function; Random processes; B-splines; Bidirectional ray tracing; Dispersion; Illumination maps; Image generation; Nonparametric density estimation; Radiosity oriented algorithm; Three dimensional computer graphics
Hierarchical Triangulation for Multiresolution Surface Description,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029388913&doi=10.1145%2f225294.225297&partnerID=40&md5=bba0c487d4fd2cf588d625e6b2ab82d3,"A new hierarchical triangle-based model for representing surfaces over sampled data is proposed, which is based on the subdivision of the surface domain into nested triangulations, called a hierarchical trlangulatron (HT ). The model allows compression of spatial data and representation of a surface at successively finer degrees of resolution, An HT is a collection of triangulations orgnnized in a tree, where each node, except for the root, is a triangulation refining a face belonging to its parent in the hierarchy. We present a topological model for representing an HT, and algorithms for its construction and for the extraction of a triangulation at a given degree of reso] ut ion The surfacc mode], called a hierarchicaz fricrngulated, surfare ( HTS ) is obtai ncd by associating data values with the vertices of triangles, and by defining suitable functions that describe the surface over each triangular patch. We consider an application of a piecewise-linear version of the IITS to interpolate topographical data, and we describe a specialized version of the construction algorithm that builds an HTS for a terrain starting from a high-resolution rectangw Iar grid of sampled data. Finally, we present an algorithm for extracting representations of terrain tit variable resolution aver the domain. (categories and Subject Descriptors: 1,3,5 [Computer Graphics]: Computational Geometry and object Modeling - (l~rt, e,.sure, salid, and abject representations; Object hierarchws General Terms: Algorithms, Design. © 1995, ACM. All rights reserved.",Hierarchical subdivision; multiresolution surface model; terrain model; triangulation,Algorithms; Computational geometry; Computer aided design; Data compression; Interpolation; Mathematical models; Surfaces; Topology; Hierarchical triangulation; Multiresolution surface model; Terrain model; Computer graphics
Further Experience with Controller-Based Automatic Motion Synthesis for Articulated Figures,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029387558&doi=10.1145%2f225294.225295&partnerID=40&md5=a0715b4a7f669c657ad9b6d21f3135a8,"We extend an earlier automatic motion-synthesis algorithm for physically realistic articulated figures in several ways. First, we summarize several incremental improvements to the original algorithm that improve its efficiency significantly and provide the user with some ability to influence what motions are generated. These techniques can be used by an animator to achieve a desired movement style. or they can be used to guarantee variety in tbe motions synthesized over several runs of the algorithm. Second, we report on new mechanisms that support tbe concatenation of existing, automatically generated motion controllers to produce complex, composite movement. Finally, we describe initial work on generalizing the techniques from 2D to 3D articulated figures. Taken together, these results illustrate the promise and challenges afforded by the controller-based approach to automatic motion synthesis for computer animation. Categories and Subject Descriptors: 1.2.6 [Artificial Intelligence]: Learning parameter [earntng. 1.2.8 [Artificial Intelligence]: Problem Solving, Control Methods and Search-heuristic methock. 1.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism animation. 1.6.3 [Simulation and Modeling]: Applications. General Terms: Algorithms, Experimentation. © 1995, ACM. All rights reserved.",Animation; evolutionary computation; heuristic metbods; machine learning; spacetime constraints; stochastic optimization,Algorithms; Automation; Constraint theory; Control equipment; Heuristic methods; Interactive computer graphics; Learning systems; Motion planning; Optimization; Problem solving; Random processes; Three dimensional computer graphics; Articulated figures; Automatic motion synthesis; Evolutionary computation; Spacetime constraints; Animation
Direct Construction of Polynomial Surfaces from Dense Range Images through Region Growing,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029284582&doi=10.1145%2f221659.221672&partnerID=40&md5=a61551ff84a4a7df045b038403bfbfb7,[No abstract available],,Algorithms; Computer aided design; Computer simulation; Computer vision; Image reconstruction; Image segmentation; Least squares approximations; Polynomials; Surfaces; Aesthetic surface design; Dense range images; Direct polynomial surface construction; Least squares surface fitting; Point/surface distance; Range image segmentation; Surface coherence; Surface reconstruction; Three dimensional computer graphics
Surface Fitting with Hierarchical Splines,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029286482&doi=10.1145%2f221659.221665&partnerID=40&md5=6c8ac95d220b80cf6e32f8b18d23a074,[No abstract available],,Computational geometry; Computational methods; Computer simulation; Curve fitting; Data compression; Fits and tolerances; Hierarchical systems; Problem solving; Surfaces; Tensors; Hierarchical splines; Surface fitting; Tensor product parametric spline surface; Computer graphics
Smoothing Polyhedra Made Easy,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029287022&doi=10.1145%2f221659.221670&partnerID=40&md5=1fedc02581674aabce45b840090bc18d,[No abstract available],,Algorithms; Computational geometry; Computer aided design; Mathematical models; Polynomials; Surfaces; Bernstein-Bezier coefficients; Corner cutting; Geometric continuity; Meshes; Polyhedra smoothing; Vertex degree; Computer graphics
Modeling with Cubic A-Patches,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029284558&doi=10.1145%2f221659.221662&partnerID=40&md5=82c111738e261ae18e50fd32ea58f2d6,[No abstract available],,Algorithms; Computational geometry; Computational methods; Computer aided design; Computer simulation; Interpolation; Polynomials; Topology; Triangulation; Algebraic surface patch; Bernstein-Bezier form; Cubic A patches; Freeform surface; Geometric continuity; Surface triangulation; Tetrahedron; Interactive computer graphics
Using Visual Texture for Information Display,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029236523&doi=10.1145%2f200972.200974&partnerID=40&md5=cfe1a4d3275f322b880d735f951c4f24,"Results from vision research are applied to the synthesis of visual texture for the purposes of information display. The literature surveyed suggests that the human visual system processes spatial information by means of parallel arrays of neurons that can be modeled by Gabor functions. Based on the Gabor model, it is argued that the fundamental dimensions of texture for human perception are orientation, size 1995, and contrast. It is shown that there are a number of trade-offs in the density with which information can be displayed using texture. Two of these are (1) a trade-off between the size of the texture elements and the precision with which the location can be specified, and (2) the precision with which texture orientation can be specified and the precision with which texture size can be specified. Two algorithms for generating texture are included. © 1995, ACM. All rights reserved.",Gabor functions; information display; scientific visualization; texture; visualization,Algorithms; Computer graphics; Computer simulation; Display devices; Functions; Human engineering; Parallel processing systems; Visualization; Gabor functions; Information display; Scientific visualization; Visual texture; Computer vision
Device-Directed Rendering,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029214401&doi=10.1145%2f200972.200977&partnerID=40&md5=be455fbbd8f3688e099513aace4d6fba,"Rendering systems can produce images that include the entire range of visible colors. Imaging hardware, however, can reproduce only a subset of these colors: the device gamut. An image can only be correctly displayed if all of its colors lie inside of the gamut of the target device. Current solutions to this problem are either to correct the scene colors by hand, or to apply gamut mapping techniques to the final image. We propose a methodology called device-directed rendering that performs scene color adjustments automatically. Device-directed rendering applies classic minimization techniques to a symbolic representation of the image that describes the relationship of the scene lights and surfaces to the pixel colors. This representation can then be evaluated to produce an image that is guaranteed to be in gamut. Although our primary application has been correcting out-of-gamut colors, this methodology can be generally applied to the problem of adjusting a scene description to accommodate constraints on the output image pixel values. © 1995, ACM. All rights reserved.",constrained color selection; device-independent color; inverse problems,Algorithms; Color; Color image processing; Inverse problems; Surfaces; Three dimensional computer graphics; Color selection; Device directed rendering; Device independence; Image generation; Pixels; Visible colors; Computer graphics
Adjoint Equations and Random Walks for Illumination Computation,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029214399&doi=10.1145%2f200972.200985&partnerID=40&md5=c5046732069fd27891f5e88d7d70c302,"In this paper we introduce the potential equation that along with the rendering equation forms an adjoint system of equations and provides a mathematical frame work for all known approaches to illumination computation based on geometric optics. The potential equation is more natural for illumination computations that simulate light propagation starting from the light sources, such as progressive radiosity and particle tracing. Using the mathematical handles provided by this framework and the random-walk solution model, we present a number of importance sampling schemes for improving the computation of flux estimation. Of particular significance is the use of approximately computed potential for directing a majority of the random walks through regions of importance in the environment, thus reducing the variance in the estimates of luminous flux in these regions. Finally, results from a simple implementation are presented to demonstrate the high-efficiency improvements made possible by the use of these techniques. © 1995, ACM. All rights reserved.",adjoint equations; forward simulation; global illumination; illumination potential equation; importance transformation; Monte Carlo; particle tracing; path tracing; progressive radiosity; random walk,Computational methods; Computer simulation; Estimation; Light propagation; Lighting; Mathematical models; Mathematical transformations; Monte Carlo methods; Random processes; Adjoint equations; Illumination computation; Illumination potential equation; Particle tracing; Path tracing; Random walk; Computer graphics
Intersecting Solids on a Massively Parallel Processor,1995,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0029239057&doi=10.1145%2f200972.200976&partnerID=40&md5=0e13e6d786d017df54bb3d2f44d6c96c,"Solid modeling underlies many technologies that are key to modern manufacturing. These range from CAD systems to robot simulators, from finite-element analysis to integrated circuit process modeling. The accuracy, and hence the utility, of these models is often constrained by the amount of computer time required to perform the desired operations. In this paper we present, in detail, an efficient algorithm for parallel intersections of solids using the Connection Machine, a massively parallel SIMD processor. We describe the data structure for representing the solid models and detail the intersection algorithm, giving special attention to implementation issues. We provide performance results, comparing the parallel algorithm to a serial intersection algorithm. © 1995, ACM. All rights reserved.",CAGD; grid data; hierarchical descriptions; spline surfaces; tensor product,Algorithms; Computer aided design; Computer simulation; Data structures; Finite element method; Hierarchical systems; Parallel algorithms; Performance; Response time (computer systems); Surfaces; Tensors; Computer time; Connection machine; Hierarchical descriptions; Massively parallel processor; Solids intersection; Spline surfaces; Parallel processing systems
Projectively Invariant Intersection Detections for Solid Modeling,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028476363&doi=10.1145%2f195784.197485&partnerID=40&md5=cef0defef1ec2d7cc12a406979e70cd6,"An intersection detection method for solid modeling which is invariant under projective transformations is presented. We redefine the fundamental geometric figures necessary to describe solid models and their dual figures in a homogeneous coordinate representation. Then we derive conditions, which are projectively invariant, for intersections between these primitives. We will show that a geometric processor based on the 4 x 4 determinant method is applicable to a wide range of problems with little modification. This method has applications in intersection detections of rational parametric curves and surfaces and hidden-line/surface removal algorithms. © 1994, ACM. All rights reserved.",4 × 4 determinant method; homogeneous coordinates; insertion detections and computations; perspective transformation; projective invariance,Algorithms; Computational complexity; Computer graphics; Computer simulation; Linear algebra; Mathematical transformations; Numerical analysis; Determinant method; Geometric transformation; Homogeneous coordinate representation; Intersection detection; Rational parametric curves; Solid modeling; Surface removal algorithms; Computational geometry
Smart Telepointers: Maintaining Telepointer Consistency in the Presence of user Interface Customization,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028478551&doi=10.1145%2f195784.197492&partnerID=40&md5=0417dd68ac8736277076cf199e37457c,"Conventional methods for maintaining telepointer consistency in shared windows do not work in the presence of per-user window customizations. This article presents the notion of a “smart telepointer,” which is a telepointer that works correctly in spite of such customizations. Methods for smart-telepointer implementation are discussed. © 1994, ACM. All rights reserved.",groupware; smart telepointers; telepointers,Computer networks; Interactive computer graphics; Multiuser interfaces; Shared windows; Smart telepointers; User interface customization; Graphical user interfaces
Visualizing Quaternion Rotation,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028477908&doi=10.1145%2f195784.197480&partnerID=40&md5=83bd12a21f936bc4edbcc2aa3945a5c4,"Quaternions play a vital role in the representation of rotations in computer graphics, primarily for animation and user interfaces. Unfortunately, quaternion rotation is often left as an advanced topic in computer graphics education due to difficulties in portraying the four-dimensional space of the quaternions. One tool for overcoming these obstacles is the quaternion demonstrator, a physical visual aid consisting primarily of a belt. Every quaternion used to specify a rotation can be represented by fixing one end of the belt and rotating the other. Multiplication of quaternions is demonstrated by the composition of rotations, and the resulting twists in the belt depict visually how quaternions interpolate rotation. This article introduces to computer graphics the exponential notation that mathematicians have used to represent unit quaternions. Exponential notation combines the angle and axis of the rotation into concise quaternion expression. This notation allows the article to present more clearly a mechanical quaternion demonstrator consisting of a ribbon and a tag, and develop a computer simulation suitable for interactive educational packages. Local deformations and the belt trick are used to minimize the ribbon's twisting and simulate a natural-appearing interactive quaternion demonstrator. © 1994, ACM. All rights reserved.",deformation; education; interpolation; orientation; quaternions; rotation; visualization,Algorithms; Animation; Computational geometry; Computer simulation; Computer vision; Data structures; Education; Image processing; Interpolation; User interfaces; Computer graphics education; Exponential notation; Quaternion demonstration; Quaternion rotation; Computer graphics
Height Distributional Distance Transform Methods for Height Field Ray Tracing,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028530277&doi=10.1145%2f195826.197312&partnerID=40&md5=16e15ac6484b9f60a620618fdcfba373,"Height distributional distance transform 1994 methods are introduced as a new class of methods for height field ray tracing. HDDT methods utilize results of height field preprocessing. The preprocessing involves computing a height field transform representing an array of cone-like volumes of empty space above the height field surface that are as wide as possible. There is one cone-like volume balanced on its apex centered above each height field cell. Various height field transforms of this type are developed. Each is based on distance transforms of height field horizontal cross-sections. HDDT methods trace rays through empty cone-like volumes instead of through successive height field cells. The performance of HDDT methods is evaluated experimentally against existing height field ray tracing methods. © 1994, ACM. All rights reserved.",Distance transform; height field; hierarchical methods; incremental methods; parameter plane transform; parametric/nonparametric HDDT methods; ray tracing; terrain,Algorithms; Computational geometry; Computational methods; Hierarchical systems; Mathematical models; Mathematical transformations; Three dimensional computer graphics; Height distributional distance transform methods; Height field ray tracing; Incremental methods; Parameter plane transform; Image processing
On the Lower Degree Intersections of two Natural Quadrics,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028531137&doi=10.1145%2f195826.197316&partnerID=40&md5=9b4db5c0cb3594b6b5bc99ac3e8ef746,"In general, two quadric surface intersect in a space quartic curve. However, the intersection frequently degenerates to a collection of plane curves. Degenerate cases are frequent in geometric/solid modeling because degeneracies are often required by design. Their detection is important because degenerate intersections can be computed more easily and allow simpler treatment of important problems. In this paper, we investigate this problem for natural quadrics. Algorithms are presented to detect and compute conic intersections and linear intersections. These methods reveal the relationship between the planes of the degenerate intersections and the quadrics. Using the theory developed in the paper, we present a new and simplified proof of a necessary and sufficient condition for conic intersection. Finally, we present a simple method for determining the types of conic in a degenerate intersection without actually computing the intersection, and an enumeration of all possible conic types. Since only elementary geometric routines such as line intersection are used, all of the above algorithms are intuitive and easily implementable. © 1994, ACM. All rights reserved.",natural quadrics; planar intersection; solid modeling; surface intersection,Algorithms; Computational methods; Computer aided design; Computer aided engineering; Mathematical models; Lower degree intersections; Natural quadrics; Planar intersections; Solid modeling; Surface intersections; Computational geometry
User Interface Specification Using an Enhanced Spreadsheet Model,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028478466&doi=10.1145%2f195784.195787&partnerID=40&md5=1a0f9292623436fd14a403581e216ff4,"This paper describes a new interactive environment for user interface specification which is based on an enhanced spreadsheet model of computation. This environment allows sophisticated graphical user interfaces with dynamic feedback to be implemented with little or no explicit programming. Its goal is to support user interface specification by nonprogramming experts in human factors, visual design, or the application domain. In addition, the system is designed to allow sophisticated end-users to modify and customize their own interfaces. The system is based on a data flow model of computation. This model is presented to the interface designer in the form of a spreadsheet enhanced with new constructs for easier programming and reuse. These constructs include an improved interactive programming environment, a prototype-instance-based inheritance system, support for composition, abstraction, and customization using indirect references, the addition of support for graphical inputs and outputs, and support for the encapsulation of application data structures and routines within system objects. © 1994, ACM. All rights reserved.",automatic display update; constraint systems; direct manipulation; end-user programming; interface builders; prototype-instance-based inheritance; semantic feedback; user interface management systems,Calculations; Computer aided software engineering; Computer programming; Computer simulation; Data structures; Graphical user interfaces; Human engineering; Input output programs; Management information systems; Mathematical models; Specifications; Spreadsheets; Dynamic feedback; End user programming; Enhanced spreadsheet model; Interactive programming; Prototype instance based inheritance system; User interface management systems; User interface specification; User interfaces
Exact Integer Hybrid Subdivision and Forward Differencing of Cubics,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028478487&doi=10.1145%2f195784.197476&partnerID=40&md5=b7f7829c9b037c4959cd6605b6cf712a,"Forward differencing is widely used to generate rapidly large numbers of points at equally space parameter values along a curve. A failing of forward differencing is the tendency to generate many extraneous points for curves with highly nonuniform parameterizations. A key result is presented and proven, namely, that a few levels of subdivision, prior to initialization for forward differencing, can improve substantially the quality of the step size estimate, resulting in very few extra points. The initial subdivisions can be done without loss of the exact integer precision available in forward differencing. For small numbers of points—a common occurrence in fonts—exact subdivision is even faster than exact forward differencing. When exact subdivision is used in conjunction with a previously presented exact forward-differencing algorithm, arbitrary cubic curves may be rendered with 32-bit arithmetic and guaranteed single-pixel accuracy, in a grid with an address space as large as 0…7281, with no two generated points greater than one pixel apart. This is more steps than previously possible. Previous discussions of rendering using subdivision have concentrated not on distance but on straightness estimates, whereby subdivision can be stopped once a subcurve can be drawn safely using its polygonal approximation. In this article, bounds are also derived on the size of the control polygon after multiple levels of subdivision: these are used to determine bounds on the number of steps required for differencing. It is shown that any curve whose rasterization fits in a space of ω pixels requires no more than 9ω steps. © 1994, ACM. All rights reserved.",Beázier polynomials; parameterization; spline curves,Algorithms; Approximation theory; Curve fitting; Digital arithmetic; Estimation; Image coding; Image compression; Image segmentation; Polynomials; Bezier polynomials; Bounds; Cubics; Exact integer hybrid subdivision; Forward differencing; Parametrizations; Rasterization; Spline curves; Step size estimate; Computer graphics
Corrigenda: Intersection Algorithms for Lines and Circles,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976671202&doi=10.1145%2f195784.197874&partnerID=40&md5=cf06fab5892a6258fb2a1b500f07bcc4,[No abstract available],computation errors; computational geometry; computer-aided drawing; line/circle intersections,
Inverse Kinematics Positioning Using Nonlinear Programming for Highly Articulated Figures,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028530352&doi=10.1145%2f195826.195827&partnerID=40&md5=6d97162ee0f6151c3d78872ed79f8d6f,"An articulated figure is often modeled as a set of rigid segments connected with joints. Its configuration can be altered by varying the joint angles. Although it is straight forward to compute figure configurations given joint angles 1994, it is more difficult to find the joint angles for a desired configuration (inverse kinematics). Since the inverse kinematics problem is of special importance to an animator wishing to set a figure to a posture satisfying a set of positioning constraints, researchers have proposed several different approaches. However, when we try to follow these approaches in an interactive animation system where the object on which to operate is as highly articulated as a realistic human figure, they fail in either generality or performance. So, we approach this problem through nonlinear programming techniques. It has been successfully used since 1988 in the spatial constraint system within Jack, a human figure simulation system developed at the University of Pennsylvania, and proves to be satisfactorily efficient, controllable, and robust. A spatial constraint in our system involves two parts: one constraint on the figure, the end-effector, and one on the spatial environment, the goal. These two parts are dealt with separately, so that we can achieve a neat modular implementation. Constraints can be added one at a time with appropriate weights designating the importance of this constraint relative to the others and are always solved as a group. If physical limits prevent satisfaction of all the constraints, the system stops with the (possibly local) optimal solution for the given weights. Also, the rigidity of each joint angle can be controlled, which is useful for redundant degrees of freedom. © 1994, ACM. All rights reserved.",articulated figures; inverse kinematics; nonlinear programming,Algorithms; Animation; Constraint theory; Image processing; Inverse kinematics; Three dimensional computer graphics; Articulated figures; End effector constraints; Nonlinear programming
Topological Considerations in Isosurface Generation,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028530360&doi=10.1145%2f195826.195828&partnerID=40&md5=b5fa73dfaad08d0b829d077123d95b69,"A popular technique for rendition of isosurfaces in sampled data is to consider cells with sample points as corners and approximate the isosurface in each cell by one or more polygons whose vertices are obtained by interpolation of the sample data. That is, each polygon vertex is a point on a cell edge, between two adjacent sample points, where the function is estimated to equal the desired threshold value. The two sample points have values on opposite sides of the threshold, and the interpolated point is called an intersection point. When one cell face has an intersection point in each of its four edges, then the correct connection among intersection points becomes ambiguous. An incorrect connection can lead to erroneous topology in the rendered surface, and possible discontinuities. We show that disambiguation methods, to be at all accurate, need to consider sample values in the neighborhood outside the cell. This paper studies the problems of disambiguation, reports on some solutions, and presents some statistics on the occurrence of such ambiguities. A natural way to incorporate neighborhood information is through the use of calculated gradients at cell corners. They provide insight into the behavior of a function in well-understood ways. We introduce two gradient consistency heuristics that use calculated gradients at the corners of ambiguous faces, as well as the function values at those corners, to disambiguate at a reasonable computational cost. These methods give the correct topology on several examples that caused problems for other methods we examined. © 1994, ACM. All rights reserved.",ambiguity; isosurface extraction; scientific visualization; surface fitting; surface topology,Algorithms; Computational geometry; Data structures; Edge detection; Feature extraction; Surfaces; Topology; Visualization; Ambiguity; Isosurface generation; Scientific visualization; Surface fitting; Surface topology; Topological considerations; Computer graphics
Interactive Design of Smooth Objects with Probabilistic Point Constraints,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028408303&doi=10.1145%2f176579.176582&partnerID=40&md5=74595fd63a6928bd4a670be271360a5f,"Point displacement constraints constitute an attractive technique for interactive design of smooth curves, surfaces, and volumes. The user defines an arbitrary number of “control points” on the object and specifies their desired spatial location, while the system computes the object's degrees of freedom so that the constraints are satisfied. A constraint-based interface gives a feeling of direct manipulation of the object. In this article we introduce soft constraints, constraints which do not have to be met exactly. The softness of each constraint serves as a nonisotropic, local shape parameter enabling the user to explore the space of objects conforming to the constraints. Additionally, there is a global shape parameter which determines the amount of similarity of the designed object to a rest shape, or equivalently, the rigidity of the rest shape. We present an algorithm termed probabilistic point constraints 1994 for implementing soft constraints. The PPC algorithm views constraints as stochastic measurements of the state of a static system. The softness of a constraint is derived from the covariance of the “measurement.” The resulting system of probabilistic equations is solved using the Kalman filter, a powerful estimation tool in the theory of stochastic systems. We also describe a user interface using direct-manipulation devices for specifying and visualizing covariances in 2D and 3D. The algorithm is suitable for any object represented as a parametric blend of control points, including most spline representations. The covariance of a constraint provides a continuous transition from exact interpolation to controlled approximation of the constraint. The algorithm involves only linear operations and allows real-time interactive direct manipulation of curves and surfaces on current workstations. © 1994, ACM. All rights reserved.",interpolation; Kalman filter; probabilistic point constraints; relaxed design; shape parameter; smooth objects; soft constraints; splines,Algorithms; Computer aided design; Computer aided engineering; Constraint theory; Interpolation; Kalman filtering; Least squares approximations; Piecewise linear techniques; Probability; Real time systems; Three dimensional; User interfaces; Covariance; Probabilistic point constraints; Shape parameter; Smooth objects; Interactive computer graphics
Dynamic NURBS with Geometric Constraints for Interactive Sculpting,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028410401&doi=10.1145%2f176579.176580&partnerID=40&md5=b6a58902e59ec8d4b7cca01a9192df99,"This article develops a dynamic generalization of the nonuniform rational B-spline 1994 model. NURBS have become a defacto standard in commercial modeling systems because of their power to represent free-form shapes as well as common analytic shapes. To date, however, they have been viewed as purely geometric primitives that require the user to manually adjust multiple control points and associated weights in order to design shapes. Dynamic NURBS, or D-NURBS, are physics-based models that incorporate mass distributions, internal deformation energies, and other physical quantities into the popular NURBS geometric substrate. Using D-NURBS, a modeler can interactively sculpt curves and surfaces and design complex shapes to required specifications not only in the traditional indirect fashion, by adjusting control points and weights, but also through direct physical manipulation, by applying simulated forces and local and global shape constraints. D-NURBS move and deform in a physically intuitive manner in response to the user's direct manipulations. Their dynamic behavior results from the numerical integration of a set of nonlinear differential equations that automatically evolve the control points and weights in response to the applied forces and constraints. To derive these equations, we employ Lagrangian mechanics and a finite-element-like discretization. Our approach supports the trimming of D-NURBS surfaces using D-NURBS curves. We demonstrate D-NURBS models and constraints in applications including the rounding of solids, optimal surface fitting to unstructured data, surface design from cross sections, and free-form deformation. We also introduce a new technique for 2D shape metamorphosis using constrained D-NURBS surfaces. © 1994, ACM. All rights reserved.",CAGD; constraints; cross-sectional shape design; deformable models; dynamics; finite elements; free-form deformation; NURBS; optimal curve and surface fitting; shape metamorphosis; solid rounding; trimming,Algorithms; Constraint theory; Curve fitting; Deformation; Differential equations; Finite element method; Geometry; Integration; Mathematical models; Nonlinear equations; Surfaces; Cross sectional shape design; Geometric constraints; Interactive sculpting; Lagrangian mechanics; Nonuniform rational B spline; Shape metamorphosis; Solid rounding; Interactive computer graphics
Simple Constrained Deformations for Geometric Modeling and Interactive Design,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028408076&doi=10.1145%2f176579.176581&partnerID=40&md5=8b429df2e56a81acc2da9e56c50464dc,"Deformations are a powerful tool for shape modeling and design. We present a new model for producing controlled spatial deformations, which we term Simple Constrained Deformations 1994. The user defines a set of constraint points, giving a desired displacement and radius of influence for each. Each constraint point determines a local B-spline basis function centered at the constraint point, falling to zero for points beyond the radius. The deformed image of any point in space is a blend of these basis functions, using a projection matrix computed to satisfy the constraints. The deformation operates on the whole space regardless of the representation of the objects embedded inside the space. The constraints directly influence the final shape of the deformed objects, and this shape can be fine-tuned by adjusting the radius of influence of each constraint point. The computations required by the technique can be done very efficiently, and real-time interactive deformation editing on current workstations is possible. © 1994, ACM. All rights reserved.",B-splines; constraints; deformation; geometric design; geometric modeling; interpolation; spatial deformation,Computational methods; Computer aided design; Computer workstations; Constraint theory; Deformation; Geometry; Image processing; Interpolation; Mathematical models; Matrix algebra; Real time systems; Geometric modeling; Simple constrained deformation; Space deformation; Interactive computer graphics
Multiresolution Stochastic Hybrid Shape Models with Fractal Priors,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028409227&doi=10.1145%2f176579.176583&partnerID=40&md5=604e86da8d49a28f2a5fb4bd256b1f06,"3D shape modeling has received enormous attention in computer graphics and computer vision over the past decade. Several shape modeling techniques have been proposed in literature, some are local 1994 while others are global (lumped parameter) in terms of the parameters required to describe the shape. Hybrid models that combine both ends of this parameter spectrum have been in vogue only recently. However, they do not allow a smooth transition between the two extremes of this parameter spectrum. We introduce a new shape-modeling scheme that can transform smoothly from local to global models or vice versa. The modeling scheme utilizes a hybrid primitive called the deformable superquadric constructed in an orthonormal wavelet basis. The multiresolution wavelet basis provides the power to continuously transform from local to global shape deformations and thereby allow for a continuum of shape models—from those with local to those with global shape descriptive power—to be created. The multiresolution wavelet basis allows us to generate fractal surfaces of arbitrary order that can be useful in describing natural detail. We embed these multiresolution shape models in a probabilistic framework and use them for recovery of anatomical structures in the human brain from MRI data. A salient feature of our modeling scheme is that it can naturally allow for the incorporation of prior statistics of a rich variety of shapes. This stems from the fact that, unlike other modeling schemes, in our modeling, we require relatively few parameters to describe a large class of shapes. © 1994, ACM. All rights reserved.",Bayesian estimation; deformable surfaces; fractal surfaces; multiresolution representation; orthonormal wavelet basis; stiffness matrix; superquadrics; surface fitting,Algorithms; Computer vision; Differential equations; Estimation; Finite element method; Fractals; Mathematical models; Matrix algebra; Probability; Statistical methods; Surfaces; Orthonormal wavelet basis; Shape modeling; Stiffness matrix; Superquadrics; Surface fitting; Three dimensional computer graphics
User-Interface Devices for Rapid and Exact Number Specification,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976735572&doi=10.1145%2f159730.214380&partnerID=40&md5=2db4becc6e9df5c7c84c62a2d479d07e,[No abstract available],,
Inferring Constraints from Multiple Snapshots,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027677810&doi=10.1145%2f159730.159731&partnerID=40&md5=f2096d2a16c6a4e3affed590530808f1,"Many graphic tasks, such as the manipulation of graphical objects and the construction of user-interface widgets, can be facilitated by geometric constraints. However, the difficulty of specifying constraints by traditional methods forms a barrier to their widespread use. In order to make constraints easier to declare, we have developed a method of specifying constraints implicitly, through multiple examples. Snapshots are taken of an initial scene configuration, and one or more additional snapshots are taken after the scene has been edited into other valid configurations. The constraints that are satisfied in all of the snapshots are then applied to the scene objects. We discuss an efficient algorithm for inferring constraints from multiple snapshots. The algorithm has been incorporated into the Chimera editor, and several examples of its use are discussed. © 1993, ACM. All rights reserved.",constraints; empirical learning; graphical editing,Algorithms; Three dimensional computer graphics; Graphical editing; Grids; Snap-dragging; Snapshots; Computer graphics
Three-Dimensional Alpha Shapes,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028259338&doi=10.1145%2f174462.156635&partnerID=40&md5=e0a9c2e075695381e37535c621c31165,"Frequently, data in scientific computing is in its abstract form a finite point set in space, and it is sometimes useful or required to compute what one might call the “shape” of the set. For that purpose, this article introduces the formal notion of the family of α-shapes of a finite point set in R3. Each shape is a well-defined polytope, derived from the Delaunay triangulation of the point set, with a parameter α ε R controlling the desired level of detail. An algorithm is presented that constructs the entire family of shapes for a given set of size n in time 01994, worst case. A robust implementation of the algorithm is discussed, and several applications in the area of scientific computing are mentioned. © 1994, ACM. All rights reserved.",computational graphics; Delaunay triangulations; geometric algorithms; point sets; polytopes; robust implementation; scientific computing; scientific visualization; simplicial complexes; simulated perturbation; three-dimensional space,Bodies of revolution; Computational complexity; Computational methods; Computer graphics; Data structures; Mathematical instruments; Natural sciences computing; Perturbation techniques; Reliability; Set theory; Triangulation; Visualization; Delaunay triangulation; Geometric algorithms; Object representations; Point sets; Polytopes; Scientific visualization; Simplicial complexes; Simulated perturbation; Three dimensional alpha shapes; Three dimensional space; Algorithms
Fourier Volume Rendering,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027627038&doi=10.1145%2f169711.169705&partnerID=40&md5=c8a4ff9affa8b5f949bde85ed1242961,[No abstract available],Fourier transform; Hartley transform; projection; sampling; scientific visualization; volume rendering,Algorithms; Analog to digital conversion; Computational complexity; Data structures; Fourier transforms; Frequency domain analysis; Image analysis; Mathematical transformations; Sampling; Three dimensional computer graphics; Visualization; Fourier volume rendering; Hartley transform; Scientific visualization; Image processing
Dimension-Independent Modeling with Simplicial Complexes,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027347554&doi=10.1145%2f169728.169719&partnerID=40&md5=10cf8a9e91a631e4382cd6f99bbb0cf9,"Dealing with simplicial decompositions which are dimension independent allows for the convergence of disparate viewpoints from computer graphics, solid and geometric modeling. In this framework it is possible to treat in a unified manner several geometric problems, such as solid modeling of articulated objects, simplicial approximation of curved manifolds, motion encoding and interference detection, free configuration space computation, and graphical representation of multidimensional data. In the paper the authora describe the winged scheme, a simple representation based on simplicial decompositions, which can be used for linear polyhedra of any dimension and which allows for �solid� approximation of curved manifolds when combined with curved maps (e.g., NURBS). Various operators and algorithms are discussed, including boundary evaluation, linear and screw extrusion, grid generation, simplicial maps, and set operations. A simple manipulation language is also introduced, and some nontrivial examples are discussed. © 1993, ACM. All rights reserved.",Boolean operations; design languages; extrusion; n-dimensional triangulation; polyhedra; representation; simplicial complexes; simplicial maps,Algorithms; Boolean algebra; Computational methods; Computer aided design; Computer aided engineering; Computer programming languages; Geometry; Mathematical models; Mathematical operators; Query languages; Triangulation; Dimension independent modeling; n Dimensional triangulation; Polyhedra; Simplicial complexes; Simplicial maps; Computer graphics
Robust Rendering of General Ellipses and Elliptical Arcs,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027627940&doi=10.1145%2f169711.169704&partnerID=40&md5=8e4af3281040138faf29ca562a5c3396,"Based on the method of Maxwell and Baker [7], an all-integer algorithm is developed for the rendering of elliptical curves. It is immune to problems of degeneracy and best suited for hardware implementation. At each point the algorithm provides the tangent vector and an estimate of the quantization error, all the data needed for rendering high precision elliptical arcs and generating antialiased curves. © 1993, ACM. All rights reserved.",antialiasing; CGI; computer graphics; ellipse; elliptical arc,Algorithms; Anti-aliasing; Error analysis; Image analysis; Vectors; All integer algorithm; Conjugate diameter pairs (CDP); Display algorithms; Elliptical arcs; Elliptical curves; Maxwell and Baker method; Computer graphics
A family of tangent continuous cubic algebraic splines,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027627941&doi=10.1145%2f169711.169707&partnerID=40&md5=0858995496895321379fd82f2b338f00,"We present an algorithm for creating tangent continuous splines from segments of algebraic cubic curves. The curves used are cubic ovals, and thus are guaranteed convex. Each segment is given by an equation which has five coefficients, thus four degrees of freedom available for shape control. We describe shape handles that work via the coet%cients ta control the curve. Each segment can be chosen to interpolate one more point and slope and has two additional fullness parameters to control the shape. This family of curves naturally contains conic splines as a subfamily. © 1993, ACM. All rights reserved.",cubic ovals; cubic splines; implicit curves; interpolation; piecewise algebraic curves,Algebra; Algorithms; Computational methods; Computer aided design; Computer aided engineering; Computer graphics; Degrees of freedom (mechanics); Interpolation; Mathematical models; Piecewise linear techniques; Cubic ovals; Implicit curves; Object representations; Parametric splines; Piecewise algebraic curves; Tangent continuous cubic algebraic splines; Geometry
Distance Approximations for Rasterizing Implicit Curves,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028277127&doi=10.1145%2f174462.174531&partnerID=40&md5=3100a560f98c8157247e8b7aaf55c5e5,"In this article we present new algorithms for rasterizing implicit curves, i.e., curves represented as level sets of functions of two variables. Considering the pixels as square regions of the plane, a “correct” algorithm should paint those pixels whose centers lie at less than half the desired line width from the curve. A straightforward implementation, scanning the display array evaluating the Euclidean distance from the center of each pixel to the curve, is impractical, and a standard quad-tree-like recursive subdivision scheme is used instead. Then we attack the problem of testing whether or not the Euclidean distance from a point to an implicit curve is less than a given threshold. For the most general case, when the implicit function is only required to have continuous first-order derivatives, we show how to reformulate the test as an unconstrained global root-finding problem in a circular domain. For implicit functions with continuous derivatives up to order k we introduce an approximate distance of order k. The approximate distance of order k from a point to an implicit curve is asymptotically equivalent to the Euclidean distance and provides a sufficient test for a polynomial of degree k not to have roots inside a circle. This is the main contribution of the article. By replacing the Euclidean distance test with one of these approximate distance tests, we obtain a practical rendering algorithm, proven to be correct for algebraic curves. To speed up the computation we also introduce heuristics, which used in conjunction with low-order approximate distances almost always produce equivalent results. The behavior of the algorithms is analyzed, both near regular and singular points, and several possible extensions and applications are discussed. © 1994, ACM. All rights reserved.",algebraic curve; approximate distance; implicit curve; rendering,Algebra; Approximation theory; Bodies of revolution; Computational methods; Computer aided design; Computer graphics; Distance measurement; Geometry; Heuristic methods; Image processing; Set theory; Surfaces; Algebraic curves; Computational geometry; Display algorithms; Distance approximations; Implicit curves; Object representations; Rasterizing; Rendering; Algorithms
Polar Forms for Geometrically Continuous Spline Curves of Arbitrary Degree,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027353194&doi=10.1145%2f169728.169726&partnerID=40&md5=b48b604fa5bf670c7772b77b292c720e,"This paper studies geometrically continuous spline curves of arbitrary degree. Based on the concept of universal splines, we obtain geometric constructions for both the spline control Wints and for the Bezier points and give algorithms for computing locally supported basis functions and for knot insertion. The geometric constructions are based on the intersection of osculating flats. The concept of universal splines is defined in such a way that these intersections are guaranteed to exist, As a result of this development, we obtain a generalization of polar forms to geometrically continuous spline curves by intersecting osculating flats. The presented algorithms have been coded in, Maple, and concrete examples illustrate the approach. © 1993, ACM. All rights reserved.",B-spline; Be´zier point; Blossom; connection matrix; control point; de Boor algorithm; geometric continuity; knot insertion; knot vector; osculating flat; polar form; spline control point; universal spline; β-spline,Algorithms; Computational methods; Computer aided design; Geometry; Graphic methods; Matrix algebra; Poles and zeros; Vectors; B spline; Bezier point; Connection matrix; de Boor algorithm; Geometrically continuous spline curves; Knot insertion; Maple; Osculating flat; Polar forms; Spline control point; Computer graphics
Algorithms for Intersecting Parametric and Algebraic Curves I: Simple Intersections,1994,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0028338033&doi=10.1145%2f174462.174617&partnerID=40&md5=1a005f61c50d5cc894e31f9ba427e1e2,"The problem of computing the intersection of parametric and algebraic curves arises in many applications of computer graphics and geometric and solid modeling. Previous algorithms are based on techniques from elimination theory or subdivision and iteration. The former is, however, restricted to low-degree curves. This is mainly due to issues of efficiency and numerical stability. In this article we use elimination theory and express the resultant of the equations of intersection as matrix determinant. The matrix itself rather than its symbolic determinant, a polynomial, is used as the representation. The problem of intersection is reduced to that of computing the eigenvalues and eigenvectors of a numeric matrix. The main advantage of this approach lies in its efficency and robustness. Moreover, the numerical accuracy of these operations is well understood. For almost all cases we are able to compute accurate answers in 64-bit IEEE floating-point arithmetic. © 1994, ACM. All rights reserved.",Algebraic; curves; eigenvalues; intersection; parametric; resultants; robustness,Algebra; Bodies of revolution; Computational methods; Computer graphics; Curve fitting; Digital arithmetic; Eigenvalues and eigenfunctions; Geometry; Intersections; Mathematical models; Matrix algebra; Topology; B splines; Bezier curves; Elimination theory; Parametric and algebraic curves; Resultants; Algorithms
Adjustable Tools: An Object-Oriented Interaction Metaphor,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976841434&doi=10.1145%2f169728.214378&partnerID=40&md5=5aae75261426d7d7dacd5d5ac4326d58,[No abstract available],,
Experimental Comparison of Splines Using the Shape-Matching Paradigm,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027628215&doi=10.1145%2f169711.169709&partnerID=40&md5=2a317cb1c5500514940f7dd58096de73,[No abstract available],curve design; experimental study; interaction; shape matching; spline,Geometry; Interfaces (computer); Interpolation; Mathematical models; Cubic splines; Curve design; Experimental study; Shape matching paradigm; Computer graphics
"Separating and Intersecting Spherical Polygons: Computing Machinability on Three-, Four-, and Five-Axis Numerically Controlled Machines",1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027681971&doi=10.1145%2f159730.159732&partnerID=40&md5=f6f6bb2e4c35002305d1270502c4dd4f,"We consider the computation of an optimal workpiece orientation allowing the maximal number of surfaces to be machined in a single setup on a three-, four-, or five-axis numerically controlled machine. Assuming the use of a ball-end cutter, we establish the conditions under which a surface is machinable by the cutter aligned in a certain direction, without the cutter's being obstructed by portions of the same surface. The set of such directions is represented on the sphere as a convex region, called the visibility map of the surface. By using the Gaussian maps and the visibility maps of the surfaces on a component, we can formulate the optimal workpiece orientation problems as geometric problems on the sphere. These and related geometric problems include finding a densest hemisphere that contains the largest subset of a given set of spherical polygons, determining a great circle that separates a given set of spherical polygons, computing a great circle that bisects a given set of spherical polygons, and finding a great circle that intersects the largest or the smallest subset of a set of spherical polygons. We show how all possible ways of intersecting a set of n spherical polygons with v total number of vertices by a great circle can be computed in O1993 time and represented as a spherical partition. By making use of this representation, we present efficient algorithms for solving the five geometric problems on the sphere. © 1993, ACM. All rights reserved.",Bisection; densest hemisphere; minimal/maximal intersection; numerically controlled machining; separation; spherical algorithm; visibility algorithm,Algorithms; Computer graphics; Machining; Bisection; Computing machinery; Spherical algorithm; Spherical polygons; Computer aided manufacturing
Separation for Boundary to CSG Conversion,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027341864&doi=10.1145%2f169728.169723&partnerID=40&md5=90783b35c0ab6a584b24a4763fb4cd15,"Important applications of b-rep - CSG conversion arise in solid modeling, image processing, and c,lsewhere. In addition, the problem is of considerable theoretical interest. One of the most difficult steps in performing b-rep → CSG conversion for a curved solid object consists of determining o set of half-spaces that is sufficient for a CSG representation of the solid. This usually requires the construction of additional half-spaces whose boundaries do not contribute to the boundary of the solid. Such half-spaces are called separating half-spaces because their purpose is to separate certain subsets inside the solid from those outside of the solid, Construction of separating half-spaces is specific to a particular geometric domain, but several generic approaches are possible. We use the information present in the boundary of the solid being converted to study the constraints on the degree of separating half-spaces, and show that a sufficicnt set of linear separating half-spaces exists for any solid whose boundary contains only planar edges. A complete construction is given for solids whose faces lie in convex surfaces. Separation for more L,cneral solids, whose b-rep includes othm surfaces and nonplanar edges, is alsa discussed, but this general problem remains poorly understood. We apply the boundary-based separation to solids hounded by genera] quadric surfaces, Specifically, we prove that a sufficient set of linear separating half-spaces exists for any such solid and consider the required constructions in several common situations. The presented results allowed a successful implementation of an experimental b-rep + CSW conversion system that converts natural quadric b-reps in parasolidTM to efficient CSG representations in PADL-2. © 1993, ACM. All rights reserved.",algebraic geometry; boundary representation (b-rep); computational geometry and object modeling; computer graphics; computer-aided design; constructive solid geometry (CSG); conversion; quadrics; semialgebraic sets; separation; solid modeling; space decomposition,Algebra; Algorithms; Computational methods; Computer aided design; Computer graphics; Image processing; Mathematical models; Mathematical transformations; Separation; State space methods; Algebraic geometry; Boundary representation; Computational geometry and object modeling; Constructive solid geometry; Conversion; Quadrics; Semialgebraic sets; Solid modeling; Space decomposition; Geometry
Higher-Order Interpolation and Least-Squares Approximation Using Implicit Algebraic Surfaces,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027680656&doi=10.1145%2f159730.159734&partnerID=40&md5=ddf56e300c8496c88279fe86180f8982,"In this article, we characterize the solution space of low-degree, implicitly defined, algebraic surfaces which interpolate and/or least-squares approximate a collection of scattered point and curve data in three-dimensional space. The problem of higher-order interpolation and least-squares approximation with algebraic surfaces under a proper normalization reduces to a quadratic minimization problem with elegant and easily expressible solutions. We have implemented our algebraic surface-fitting algorithms, and included them in the distributed and collaborative geometric environment SHASTRA. Several examples are given to illustrate how our algorithms are applied to algebraic surface design. © 1993, ACM. All rights reserved.",algebraic surface; computer-aided geometric design; constrained quadratic optimization; distributed geometric-design environment; geometric continuity,Algorithms; Numerical analysis; Three dimensional computer graphics; Algebraic surface; Geometric design; Quadratic optimization; Computer aided design
A Markovian Framework for Digital Halftoning,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027573838&doi=10.1145%2f151280.151281&partnerID=40&md5=fde3d9067daef383216260f0ca0d3a56,"A mathematical framework for digital halfloning is proposed. Two models for digital halftoning are provided, one based on maximum-entropy Gibbs measures and one based on reversible Markov chains. The models are seen to be equivalent. This equivalence induces an equivalence between two associated halftoning algorithms, one based on neural networks and one based on simulated annealing. These algorithms are seen to provide halftone images that are preferable to those obtained by standard techniques. © 1993, ACM. All rights reserved.",digital halftone; dithering; entropy; error diffusion; Gibbs measure; Hopfield neural network; Markov chain; simulated annealing,Analog to digital conversion; Computer graphics; Entropy; Equivalence classes; Error analysis; Image analysis; Image enhancement; Image processing; Image quality; Mathematical models; Neural networks; Statistical methods; Associated halftoning algorithms; Digital halftoning; Dithering; Error diffusion; Gibbs measure; Hopfield neural network; Markov chain; Simulated annealing; Algorithms
Functional Composition Algorithms via Blossoming,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027577589&doi=10.1145%2f151280.151290&partnerID=40&md5=7759578eb3aac7903afdc3bee6df6e31,"In view of the fundamental role that functional composition plays in mathematics, it is not surprising that a variety of problems in geometric modeling can be viewed as instances of the following composition problem: given representations for two functions F and G, compute a representation of the function H = F o G. We examine this problem in detail for the case when F and G are given in either Be´zier or B-spline form. Blossoming techniques are used to gain theoretical insight into the structure of the solution which is then used to develop efficient, tightly codable algorithms. From a practical point of view, if the composition algorithms are implemented as library routines, a number of geometric-modeling problems can be solved with a small amount of additional software. © 1993, ACM. All rights reserved.",B-splines; Be´zier curves; computer-aided geometric design; free-form deformations; tensor-product surface patches; triangular Be´zier surface patches,Computational methods; Computer aided design; Computer aided engineering; Function evaluation; Geometry; Mathematical models; Subroutines; Tensors; B splines; Bezier curves; Blossoming techniques; Computer aided geometric design; Free form deformations; Tensor product surface patches; Triangular Bezier surface patches; Algorithms
Second-Order Surface Analysis Using Hybrid Symbolic and Numeric Operators,1993,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0027579078&doi=10.1145%2f151280.151283&partnerID=40&md5=d8acab21fb7f7152832a7c37ce07d5bf,"Results from analyzing the curvature of a surface can be used to improve the implementation, efficiency, and effectiveness of manufacturing and visualization of sculptured surfaces. We develop a robust method using hybrid symbolic and numeric operators to create trimmed surfaces, each of which is solely convex, concave, or saddle and partitions the original surface. The same method is also used to identify regions whose curvature lies within prespecified bounds. © 1993, ACM. All rights reserved.",,Algorithms; Codes (symbols); Computation theory; Computational methods; Computer aided analysis; Computer aided design; Curve fitting; Geometry; Mathematical operators; Numerical control systems; Splines; Surfaces; Visualization; Geometric algorithms; Second order surface analysis; Surface trichotomy; Computer graphics
Tree Visualization with Tree-Maps: 2-d Space-Filling Approach,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976715951&doi=10.1145%2f102377.115768&partnerID=40&md5=6f1db6aa197d2f5dfa6000e02f40bae5,[No abstract available],,
Refinement Methods for Geometric Bounds in Constructive Solid Geometry,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026442072&doi=10.1145%2f102377.123764&partnerID=40&md5=961d4f52ed2d04460382f374372dacb0,"In constructive solid geometry, geometric solids are represented as trees whose leaves are labeled by primitive solids and whose internal nodes are labeled by set-theoretic operations. A bounding function in this context is an upper or lower estimate on the extent of the constituent sets; such bounds are commonly used to speed up algorithms based on such trees. We introduce the class of totally consistent bounding functions, which have the desirable properties of allowing surprisingly good bounds to be built quickly. Both outer and inner bounds can be refined using a set of rewrite rules, for which we give some complexity and convergence results. We have implemented the refinement rules for outer bounds within a solid modeling system, where they have proved especially useful for intersection testing in three and four dimensions. Our implementations have used boxes as bounds, but different classes 1992 of bounds are also explored. The rewrite rules are also applicable to relatively slow, exact operations, which we explore for their theoretical insight, and to general Boolean algebras. Results concerning the relationship between these bounds and active zones are also noted. © 1992, ACM. All rights reserved.",Boolean algebra; collision detection; constructive solid geometry; interference detection; representation simplification; robotics; solid modeling,Algorithms; Boolean algebra; Computational complexity; Computer aided design; Convergence of numerical methods; Geometry; Mathematical operators; Optimization; Robotics; Trees (mathematics); Collision detection; Constructive solid geometry; Geometric bounds; Interference detection; Refinement methods; Representation simplification; Solid modeling; Three dimensional computer graphics
Algebraic surface design with Hermite interpolation,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026472754&doi=10.1145%2f102377.120081&partnerID=40&md5=c5cd3987a88f5047067f59d95a4be0b2,"This paper presents an efficient algorithm called Hermite interpolation, for constructing low-degree algebraic surfaces, which contain, with C1 or tangent plane continuity, any given collection of points and algebraic space curves having derivative information. Positional as well as derivative constraints on an implicitly defined algebraic surface are translated into a homogeneous linear system, where the unknowns are the coefficients of the polynomial defining the algebraic surface. Computaional details of the Hermite interpolation algorithm are presented along with several illustrative applications of the interpolation technique to construction of joining or blending surfaces for solid models as well as fleshing surfaces for curved wire frame models. A heuristic approach to interactive shape control of implicit algebraic surfaces is also given, and open problems in algebraic surface design are discussed. © 1992, ACM. All rights reserved.",Algebraic surface; computer-aided geometric design; geometric continuity; Hermite interpolation; linear systems,Algebra; Algorithms; Computer aided design; Constraint theory; Curve fitting; Geometry; Heuristic methods; Interpolation; Polynomials; Surfaces; Algebraic surfaces; Computer aided geometric design; Geometric continuity; Hermite interpolation; Linear systems; Computer graphics
An extension of manifold boundary representations to the r-sets,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026470337&doi=10.1145%2f102377.111777&partnerID=40&md5=48f624de78a727c1c29542e2d993b4f9,"In this paper we study the relationship between manifold solids 1992 and r-sets. We begin by showing that an r-set may be viewed as the limit of a certain sequence of manifold solids, where distance is measured using the Hausdorff metric. This permits us to introduce a minimal set of generalized Euler operators, sufficient for the construction and manipulation of r-sets. The completeness result for ordinary Euler operators carries over immediately to the generalized Euler operators on the r-sets and the modification of the usual boundary data structures, corresponding to our extension to nonmanifold r-sets, is straightforward. We in fact describe a modification of a well-known boundary data structure in order to illustrate how the extension can be used in typical solid modeling algorithms, and describe an implementation. The results described above largely eliminate what has been called an inherent mismatch between the modeling spaces defined by manifold solids and by r-sets. We view the r-sets as a more appropriate choice for a modeling space: in particular, the r-sets provide closure with respect to regularized set operations and a complete set of generalized Euler operators for the manipulation of boundary representations, for graphics and other purposes. It remains to formulate and prove a theorem on the soundness of the generalized Euler operators. © 1992, ACM. All rights reserved.",data structures; Euler operators; manifold object; nonmanifold objects; r-set,Data structures; Mathematical operators; Modification; Object oriented programming; Set theory; Boundary representations; Hausdorff metric; Manifold objects; Nonmanifold objects; r-Sets; Solid modeling; Computer graphics
A simple output-sensitive algorithm for hidden surface removal,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026483977&doi=10.1145%2f102377.112141&partnerID=40&md5=d1b0726d2c2b295bfd5555f45de5e359,"We derive a simple output-sensitive algorithm for hidden surfaceremoval in a collection of ntriangles in space for which a 1992 depth order is known. Ifk is the combinatorial complexity ofthe output visibility map, the methodruns in time [Formula Omitted]. The method is extended to work for other classes ofobjects as well, sometimes with even improved time bounds. For example,we obtain an algorithm that performs hidden surface removal forn (nonintersecting) balls in time[formula omitted]. © 1992, ACM. All rights reserved.",hidden line elimination; hidden surface removal; object-space algorithm,Algorithms; Computational complexity; Geometry; Object oriented programming; Combinatorial complexity; Hidden line removal; Hidden surface removal; Object space algorithms; Visibility map; Three dimensional computer graphics
Estimating Subdivision Depths for Rational Curves and Surfaces,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026845988&doi=10.1145%2f130826.130829&partnerID=40&md5=ad322b697addf0369fb1f66da278e1f4,"An algorithm to estimate subdivision depths for rational curves and surfaces is presented. The subdivision depth is not estimated for the given curve/surface directly. The algorithm computes a subdivision depth for the polynomial curve/surface of which the given rational curve/surface is the image under the standard perspective projection. This subdivision depth, however, guarantees the required flatness of the given curve/surface after the subdivision. This work has applications in surface rendering, surface/surface intersection, and mesh generation. © 1992, ACM. All rights reserved.",Be´zier curves/surfaces; flatness testing; perspective projection; subdivision depths,Algorithms; Approximation theory; Computational complexity; Computational methods; Curve fitting; Geometry; Image analysis; Surfaces; Bezier curves; Flatness testing; Geometric algorithms; Perspective projection; Subdivision depths; Computer graphics
Adding Shadows to a 3D Cursor,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976689119&doi=10.1145%2f130881.370599&partnerID=40&md5=9564273c0b1c7cfef627633dfca71022,[No abstract available],,
Double-step Incremental Linear Interpolation,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026843301&doi=10.1145%2f130826.130833&partnerID=40&md5=60b7e8db33bc25904c2238954bd7de45,"A two-step incremental linear interpolation algorithm is derived and analyzed. It is shown that the algorithm is correct, that it is reversible, and that it is faster than previous single-step algorithms. An example is given of the execution of the algorithm. © 1992, ACM. All rights reserved.",double-step algorithms; scan conversion,Analysis; Applications; Computer graphics; Error analysis; Interpolation; Performance; Double step algorithms; Scan conversion; Two step incremental linear interpolation; Algorithms
The interaction technique notebook: Bookmarks: An Enhanced Scroll Bar,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976845171&doi=10.1145%2f130881.370595&partnerID=40&md5=50c8d593805371356f85240216a85cea,[No abstract available],,
Modeling pigmented materials for realistic image synthesis,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026932861&doi=10.1145%2f146443.146452&partnerID=40&md5=02ee7cf98df4fd826fd5b3e8697f32bb,"This article discusses and applies the Kubelka-Munk theory of pigment mixing to computer graphics in order to facilitate improved image synthesis. The theories of additive and subtractive color mixing are discussed and are shown to be insufficient for pigmented materials. The Kubelka–Munk theory of pigment mixing is developed and the relevant equations are derived. Pigment mixing experiments are performed and the results are displayed on color television monitors. A paint program that uses Kubelka–Munk theory to mix real pigments is presented. Theories of color matching with pigments are extended to determine reflectances for use in realistic image synthesis. © 1992, ACM. All rights reserved.",color matching; color science; color selection; illumination modeling; pigment mixing,Algorithms; Color; Color computer graphics; Color matching; Computer software; Image quality; Lighting; Mathematical models; Pigments; Color selection algorithms; Illumination modeling; Kubelka Munk theory; Paint program; Pigment mixing; Realistic image synthesis; Reflectance; Color image processing
Getting Raster Ellipses Right,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026891257&doi=10.1145%2f130881.130892&partnerID=40&md5=a5416a0a3715f968d158ec390938adc6,"A concise, incremental algorithm for raster approximations to ellipses in standard position produces approximations that are good to the last pixel even near octant boundaries or the thin ends of highly eccentric ellipses. The resulting approximations commute with reflection about the diagonal and are mathematically specifiable without reference to details of the algorithm. © 1992, ACM. All rights reserved.",Bresenham algorithm; Diophantine approximation; Freeman approximation,Algorithms; Approximation theory; Curve fitting; Drawing (graphics); Geometry; Bitmaps; Bresenham algorithm; Curve generation; Diophantine approximation; Raster ellipses; Computer graphics
An Algorithm for Generating NC Tool Paths for Arbitrarily Shaped Pockets with Islands,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026843895&doi=10.1145%2f130826.130832&partnerID=40&md5=9fcbfe0880cec6384dda139c8a68c261,"In this paper we describe algorithms for generating NC tool paths for machining of arbitrarily shaped 2 l/2 dimensional pockets with arbitrary islands. These pocketing algorithms are based on a new offsetting algorithm presented in this paper. Our offsetting algorithm avoids costly two-dimensional Boolean set operations, relatively expensive distance calculations, and the overhead of extraneous geometry, such as the Voronoi diagrams, used in other pocketing algorithms. © 1992, ACM. All rights reserved.",,Algorithms; Computational complexity; Computational methods; Computer aided manufacturing; Geometry; Machining; NC tool path generation; Offsetting; Pocketing; Computer aided design
A Practical Approach to Calculating Luminance Contrast on a CRT,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026929626&doi=10.1145%2f146443.146467&partnerID=40&md5=092852ac3c3f95fbf41ba15378316845,"Luminance contrast is the basis of text legibility, and maintaining luminance contrast is essential for any color selection algorithm. In principle, it can be calculated precisely on a sufficiently well-calibrated display surface, but calibration is very expensive. Consequently, most current systems deal with contrast using heuristics. However, the usual CRT setup puts the display surface into a state that is relatively predictable. Luminance values can be estimated based on this state, and these luminance values have been used to calculate contrast using the Michelson definition. This paper proposes a method for determining the contrast of colored areas displayed on a CRT. It uses a contrast metric that is in wide use in visual psychophysics and shows that the metric can be approximated reasonably without display measurement, as long as it is possible to assume that the CRT has been adjusted according to usual CRT setup standards. © 1992, ACM. All rights reserved.",,Algorithms; Calculations; Calibration; Cathode ray tubes; Estimation; Fluorescent screens; Human engineering; Image quality; Standards; Vision; Color selection algorithms; Contrast metric; Luminance contrast; Michelson definition; Visual psychophysics; Computer monitors
Color Quantization by Dynamic Programming and Principal Analysis,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026931953&doi=10.1145%2f146443.146475&partnerID=40&md5=81dae5ba3a4ed153111687995717bbe1,"Color quantization is a process of choosing a set of K representative colors to approximate the N colors of an image, K < N, such that the resulting K-color image looks as much like the original N-color image as possible. This is an optimization problem known to be NP-complete in K. However, this paper shows that by ordering the N colors along their principal axis and partitioning the color space with respect to this ordering, the resulting constrained optimization problem can be solved in O1992 time by dynamic programming (where M is the intensity resolution of the device). Traditional color quantization algorithms recursively bipartition the color space. By using the above dynamic-programming algorithm, we can construct a globally optimal K-partition, K>2, of a color space in the principal direction of the input data. This new partitioning strategy leads to smaller quantization error and hence better image quality. Other algorithmic issues in color quantization such as efficient statistical computations and nearest-neighbor searching are also studied. The interplay between luminance and chromaticity in color quantization with and without color dithering is investigated. Our color quantization method allows the user to choose a balance between the image smoothness and hue accuracy for a given K. © 1992, ACM. All rights reserved.",algorithm analysis; clustering; color quantization; dynamic programming; principal analysis,Algorithms; Analysis; Color; Color computer graphics; Computational complexity; Computational methods; Constraint theory; Dynamic programming; Encoding (symbols); Image quality; Optimization; Chromaticity; Clustering; Color dithering; Color quantization; Color space partitioning; Constrained optimization problem; Luminance; Principal analysis; Color image processing
Octrees for Faster Isosurface Generation,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026887295&doi=10.1145%2f130881.130882&partnerID=40&md5=3e61fd3d5f81d3e793a99cb123c9fe9e,"The large size of many volume data sets often prevents visualization algorithms from providing interactive rendering. The use of hierarchical data structures can ameliorate this problem by storing summary information to prevent useless exploration of regions of little or no current interest within the volume. This paper discusses research into the use of the octree hierarchical data structure when the regions of current interest can vary during the application, and are not known a priori. Octrees are well suited to the six-sided cell structure of many volumes. A new space-efficient design is introduced for octree representations of volumes whose resolutions are not conveniently a power of two; octrees following this design are called branch-on-need octrees 1992. Also, a caching method is described that essentially passes information between octree neighbors whose visitation times may be quite different, then discards it when its useful life is over. Using the application of octrees to isosurface generation as a focus, space and time comparisons for octree-based versus more traditional “marching” methods are presented. © 1992, ACM. All rights reserved.",hierarchical spatial enumeration; isosurface extraction; octree; scientific visualization,Algorithms; Data processing; Graph theory; Hierarchical systems; Surfaces; Three dimensional computer graphics; Trees (mathematics); Visualization; Branch on need octrees (BONOs); Caching method; Display algorithms; Hierarchical spatial enumeration; Isosurface generation; Octrees; Scientific visualization; Data structures
Precision Requirements for Digital Color Reproduction,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026930505&doi=10.1145%2f146443.146482&partnerID=40&md5=1a8d46bede8b8cbee4b1f99673fc1be1,"An environment was established to perform device-independent color reproduction of full-color pictorial images. In order to determine the required precision for this environment, an experiment was performed to psychophysically measure colorimetric tolerances for six images using paired comparison techniques. These images were manipulated using 10 linear and nonlinear functions in the CIELAB dimensions of lightness, chroma, and hue angle. Perceptibility tolerances were determined using probit analysis. From these results, the necessary precision in number of bits per color channel was determined for both the CIELAB and the CRT rgb device color spaces. For both the CIELAB color space and the CRT rgb device space, approximately eight color bits per channel were required for imperceptible color differences for pictorial images, and 10 bits per channel were required for computational precision. © 1992, ACM. All rights reserved.",color; color correction; color reproduction; color science; image science,Color; Colorimetry; Digital storage; Image quality; Standards; Subjective testing; CIELAB color space; Color correction; Device independent color; Digital color reproduction; Perceptibility tolerances; Probit analysis; Visual psychophysics; Color image processing
"A New, Fast Method for 2D Polygon Clipping: Analysis and Software Implementation",1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026887334&doi=10.1145%2f130881.130894&partnerID=40&md5=4a4ac8fb83f326bd3d448a3d711f3bcd,"This paper presents a new 2D polygon clipping method, based on an extension to the Sutherland-Cohen 2D line clipping method. After discussing three basic polygon clipping algorithms, a different approach is proposed, explaining the principles of a new algorithm and presenting it step by step. An example implementation of the algorithm is given along with some results. A comparison between the proposed method, the Liang and Barsky algorithm, and the Sutherland-Hodgman algorithm is also given, showing performances up to eight times the speed of the Sutherland-Hodgman algorithm, and up to three times the Liang and Barsky algorithm. The algorithm proposed here can use floating point or integer operations; this can be useful for fast or simple implementations. © 1992, ACM. All rights reserved.",clipping; polygon clipping,Algorithms; Drawing (graphics); Geometry; Performance; Clipping; Display algorithms; Polygons; Sutherland Cohen 2D line clipping method; Computer graphics
Surfaces from Contours,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026890184&doi=10.1145%2f130881.131213&partnerID=40&md5=1702c9ae0c5752be5c258d8e2f7415cd,"This paper is concerned with the problem of reconstructing the surfaces of three-dimensional objects, given a collection of planar contours representing cross-sections through the objects. This problem has important aplications in biomedical research and instruction, solid modeling, and industrial inspection. The method we describe produces a triangulated mesh from the data points of the contours which is then used in conjunction with a piecewise parametric surface-fitting algorithm to produce a reconstructed surface. The problem can be broken into four subproblems: the correspondence problem 1992, the tiling problem (how should the contours be connected?), the branching problem (what do we do when there are branches in the surface?), and the surface-fitting problem (what is the precise geometry of the reconstructed surface?) We describe our system for surface reconstruction from sets of contours with respect to each of these subproblems. Special attention is given to the correspondence and branching problems. We present a method that can handle sets of contours in which adjacent contours share a very contorted boundary, and we describe a new approach to solving the correspondence problem using a Minimum Spanning Tree generated from the contours. © 1992, ACM. All rights reserved.",branching problem; branching surfaces; correspondence problem; meshes; minimum spanning tree; surface fitting; surface reconstruction; tiling,Algorithms; Computational complexity; Computational methods; Curve fitting; Geometry; Image reconstruction; Surfaces; Trees (mathematics); Branching problem; Branching surfaces; Correspondence problem; Meshes; Minimum spanning tree; Surface fitting; Surface reconstruction; Tiling; Three dimensional computer graphics
Creating Multisided Rational Bézier Surfaces Using Base Points,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026842539&doi=10.1145%2f130826.130828&partnerID=40&md5=165deeeaacd53369585978b751bb852f,"Rational Be´zier surfaces provide an effective tool for geometric design. One aspect of the theory of rational surfaces that is not well understood is what happens when a rational parameterization takes on the value 1992 for some parameter value. Such parameter values are called base points of the parameterization. Base points can be introduced into a rational parameterization in Be´zier form by setting weights of appropriate control points to zero. By judiciously introducing base points, one can create parameterizations of four-, five- and six-sided surface patches using rational Be´zier surfaces defined over triangular domains. Subdivision techniques allow rendering and smooth meshing of such surfaces. Properties of base points also lead to a new understanding of incompatible edge twist methods such as Gregory's patch. © 1992, ACM. All rights reserved.",blowing up; multisided patches,Computational methods; Curve fitting; Drawing (graphics); Geometry; Mathematical models; Surfaces; Base points; Blowing up; Multisided surface patches; Parameterization; Rational Bezier surfaces; Triangular parametric surface patches; Computer graphics
Visibility Ordering Meshed Polyhedra,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026845991&doi=10.1145%2f130826.130899&partnerID=40&md5=c3c78be6144114bf34ed24611d986ff0,"A visibility-ordering of a set of objects from some viewpoint is an ordering such that if object a obstructs object b, then b precedes a in the ordering. An algorithm is presented that generates a visibility-ordering of an acyclic convex set of meshed convex polyhedra. This algorithm takes time linear in the size of the mesh. Modifications to this algorithm and/or preprocessing techniques are described that permit nonconvex cells nonconvex meshes 1992, meshes with cycles, and sets of disconnected meshes to be ordered. Visibility-ordering of polyhedra is applicable to scientific visualization, particularly direct volume rendering. It is shown how the ordering algorithms can be used for domain decomposition of finite element meshes for parallel processing, and how the data structures used by these algorithms can be used to solve the spatial point location problem. The effects of cyclically obstructing polyhedra are discussed and methods for their elimination are described, including the use of the Delaunay triangulation. Methods for converting nonconvex meshes into convex meshes are described. © 1992, ACM. All rights reserved.",Delaunay triangulation; depth ordering; finite element methods; mesh generation; point location; scattered data; scientific visualization; triangulation; visibility ordering; volume rendering; volume visualization,Algorithms; Computational methods; Data structures; Finite element method; Geometry; Graphic methods; Modification; Triangulation; Visualization; Delaunay triangulation; Depth ordering; Display algorithms; Mesh generation; Meshed convex polyhedra; Scattered data; Scientific visualization; Spatial point location problem; Visibility ordering; Volume rendering; Three dimensional computer graphics
An Analysis of Selected Computer Interchange Color Spaces,1992,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026930882&doi=10.1145%2f146443.146479&partnerID=40&md5=8a2f04f5bfb4125edc9579ca801af12a,"Important standards for device-independent color allow many different color encodings. This freedom obliges users of these standards to choose the color space in which to represent their data. A device-independent interchange color space must exhibit an exact mapping to a colorimetric color representation, ability to encode all visible colors, compact representation for given accuracy, and low computational cost for transforms to and from device-dependent spaces. The performance of CIE 1931 XYZ, CIELUV, CIELAB, YES, CCIR 601-2 YCbCr, and SMPTE-C RGB is measured against these requirements. With extensions, all of these spaces can meet the first two requirements. Quantizing error dominates the representational errors of the tested color spaces. Spaces that offer low quantization error also have low gain for image noise. All linear spaces are less compact than nonlinear alternatives. The choice of nonlinearity is not critical; a wide range of gammas yields acceptable results. The choice of primaries for RGB representations is not critical, except that high-chroma primaries should be avoided. Quantizing the components of the candidate spaces with varying precision yields only small improvements. Compatibility with common image data compression techniques leads to the requirement for low luminance contamination, a property that compromises several otherwise acceptable spaces. The conversion of a device-independent representation to popular device spaces by means of trilinear interpolation requires substantially fewer lookup table entries with CCIR 601-2 YCbCr and CIELAB. © 1992, ACM. All rights reserved.",CIE 1931 XYZ; CIELAB; CIELUV; color; color models; color spaces; device-independent color; quantization; SMPTE-C RGB; YCbCr; YES,Color; Color codes; Digital devices; Error analysis; Image coding; Image compression; Image quality; Standards; CIE 1931 XYZ color space; CIELAB color space; CIELUV color space; Color models; Color quantization; Device independent color; SMPTE-C RGB color space; YCbCr color space; YES color space; Color image processing
Closed Smooth Piecewise Bicubic Surfaces,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026232407&doi=10.1145%2f116913.116915&partnerID=40&md5=97a23add3d5811e229e655447fe70c31,[No abstract available],B-splines; Be´zier representation; bicubic patches; closed surfaces; de Casteljau algorithm; geometric continuity; geometric modeling,Computer aided design; Computer aided engineering; Computer graphics; Eigenvalues and eigenfunctions; Geometry; Interpolation; Linear algebra; Mathematical models; Numerical analysis; Piecewise linear techniques; Polynomials; Surfaces; B splines; Bezier representation; Bicubic patches; Closed piecewise bicubic surfaces; Control polyhedron; de Casteljau algorithm; Geometric continuity; Algorithms
Using Multivariate Resultants to Find the Intersection of three Quadric Surfaces,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026231039&doi=10.1145%2f116913.116917&partnerID=40&md5=6ff9a2cd07fc53b2f045e3317993132a,[No abstract available],,Computation theory; Computational methods; Computer aided design; Computer graphics; Geometry; Polynomials; Surfaces; Bezout's theorem; Intersection of three quadric surfaces; Multivariate resultants; Algorithms
Locally Controllable Conic Splines with Curvature Continuity,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026231037&doi=10.1145%2f116913.116916&partnerID=40&md5=52697b377e1eca799d674686cfafd030,[No abstract available],,Computational methods; Computer aided design; Computer aided engineering; Computer graphics; Cones; Geometry; Splines; Conic sections; Geometric continuity; Projective geometry; Rational Bezier curves; Algorithms
Drawing Antialiased Cubic Spline Curves,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025191488&doi=10.1145%2f99902.99906&partnerID=40&md5=503d66fc70d962548897f441fd9fc22e,"Cubic spline curves have many nice properties that make them desirable for use in comptuer graphics, and the advantages of antialiasing have been known for some years. Yet, only recently has there been any attempt at directly antialiasing spline curves. Parametric spline curves have resisted antialiasing in several ways: single segments may cross or become tangent to themselves. Cusps and small loops are easily missed entirely. Thus, short pieces of the curve cannot necessarily be rendered in isolation. Finding the distance from a pixel center to the curve accurately and efficiently—usually an essential part of antialiasing—is an unsolved problem. The method presented by Lien, Shantz, and Pratt [21] is a good start, although it considers pixel-length pieces of the curve in isolation and lacks robustness in the handling of certain curves. This paper provides an improved method that is more robust, and is able to handle intersections and tangency. © 1991, ACM. All rights reserved.",,Adaptive systems; Algorithms; Anti-aliasing; Computational methods; Curve fitting; Robustness (control systems); Computer Aided Design; Computer Programming--Algorithms; Computers--Computational Methods; Image Processing; Mathematical Techniques--Curve Fitting; Adaptive forward differencing; Bezier curves; Cubic spline curves; Display algorithms; Parametric curve plotting; Bezier Curver; Geometric Algorithms; Parametric Curve Plotting; Computer graphics; Computer Graphics
A General Framework for Visualizing Abstract Objects and Relations,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025191491&doi=10.1145%2f99902.99903&partnerID=40&md5=3e8bfdf0931406cc7f383906231e90db,"Pictorial representations significantly enhance our ability to understand complicated relations and structures, which means that information systems strongly require user interfaces that support the visualization of many kinds of information with a wide variety of graphical forms. At present, however, these difficult visualization problems have not been solved. We present a visualization framework for translating abstract objects and relations, typically represented in textual forms, into pictorial representations, and describe a general visualization interface based on this framework. In our framework, abstract objects and relations are mapped to graphical objects and relations by user-defined mapping rules. The kernel of our visualization process is to determine a layout of graphical objects under geometric constraints. A constraint-based object layout system named COOL has been developed to handle this layout problem. COOL introduces the concept of rigidity of constraints in order to reasonably handle, a set of conflicting constraints by use of the least squares method. As applications of our system, we show the generation of kinship diagrams, list diagrams, Nassi-Shneiderman diagrams, and entity-relationship diagrams. © 1991, ACM. All rights reserved.",,Constraint theory; Graph theory; Graphic methods; Least squares approximations; Object oriented programming; User interfaces; Visualization; Computer Programming Languages--PROLOG; Computer Programming--Algorithms; Computer Software--Software Engineering; Computer Vision; Image Processing; Abstract objects; Constraint based object layout system; Graphics package COOL; Object relations; Pictorial representations; Constraint-Bared Object Layout System (COOL); Translation Into Pictures (TRIP); Computer graphics; Computer Graphics
Efficient Delaunay Triangulation Using Rational Arithmetic,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025191490&doi=10.1145%2f99902.99905&partnerID=40&md5=5c57a2b762789ac58c18c40a34f6eb11,"Many fundamental tests performed by geometric algorithms can be formulated in terms of finding the sign of a determinant. When these tests are implemented using fixed precision arithmetic such as floating point, they can produce incorrect answers; when they are implemented using arbitrary-precision arithmetic, they are expensive to compute. We present adaptive-precision algorithms for finding the signs of determinants of matrices with integer and rational elements. These algorithms were developed and tested by integrating them into the Guibas-Stolfi Delaunay triangulation algorithm. Through a combination of algorithm design and careful engineering of the implementation, the resulting program can triangulate a set of random rational points in the unit circle only four to five times slower than can a floating-point implementation of the algorithm. The algorithms, engineering process, and software tools developed are described. © 1991, ACM. All rights reserved.",,Computer Operating Systems--UNIX; Computer Programming Languages--C; Computer Programming--Algorithms; Computers--Computational Methods; Engineering--Computer Aided Design; Adaptive systems; Algorithms; Computational methods; Data structures; Design aids; Digital arithmetic; Errors; Geometry; Performance; Robustness (control systems); Software engineering; Triangulation; Delaunay Triangulation; Rational Arithmetic; Robust Geometric Computation; Triangulation; Adaptive precision algorithms; Delaunay triangulation; Determinants; Fixed point arithmetic; Geometric algorithms; Rational arithmetic; Robust geometric computation; Computer Graphics; Computer graphics
"Editorial: Looking Back, Looking Ahead",1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976690990&doi=10.1145%2f116913.370586&partnerID=40&md5=f236675c4620b84be6de30ddfc8d7880,[No abstract available],,
Rendering Curves and Surfaces with Hybrid Subdivision and Forward Differencing,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026236245&doi=10.1145%2f116913.116914&partnerID=40&md5=0425ad00071821501933c9547056c626,[No abstract available],adaptive forward differencing; Be´zier curves and surfaces; forward differencing; parametric curves and surfaces; subdivision methods,Computation theory; Computer graphics; Curve fitting; Design; Image processing; Performance; Surfaces; Adaptive forward differencing; Bezier curves and surfaces; Direct rendering criteria (DRC); Hybrid rendering algorithm (HRA); Parametric curves and surfaces; Subdivision methods; Algorithms
Depth-Order Point Classification Techniques for CSG Display Algorithms,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025191489&doi=10.1145%2f99902.99904&partnerID=40&md5=04ef43fa08faff3af22cc9a816c70443,"Constructive Solid Geometry 1991 defines objects as Boolean combinations (CSG trees) of primitive solids. To display such objects, one must classify points on the surfaces of the primitive solids with respect to the resulting composite object, to test whether these points lie on the boundary of the composite object or not. Although the point classification is trivial compared to the surface classification (i.e., the computation of the composite object), for CSG models with a large number of primitive solids (large CSG trees), the point classification may still consume a considerable fraction of the total processing time. This paper presents an overview of existing and new efficiency-improving techniques for classifying points in depth order. The different techniques are compared through experiments. © 1991, ACM. All rights reserved.",,Computer Operating Systems--UNIX; Computer Programming--Algorithms; Computers--Computational Methods; Image Processing; Mathematical Techniques--Trees; Algorithms; Boolean algebra; Computational methods; Geometry; Surfaces; Trees (mathematics); Constructive Solid Geometry (CSG) Display Algorithms; Ray Classification; Constructive solid geometry (CSG); Depth order point classification; Display algorithms; Solid modeling; Computer Graphics; Three dimensional computer graphics
Performing Geometric Transformations by Program Transformation,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025211714&doi=10.1145%2f77635.77637&partnerID=40&md5=eae32b2a356056603814cb84de0c318c,"Problems in geometry often possess symmetry properties that may be exploited in order to develop solutions. Algorithms based on these symmetry properties will frequently use geometric transformations to transform one case into another 1990 case. One advantage of this approach is that the algorithm avoids enumeration of cases and thus is shorter and generally easier to read. One disadvantage is that some additional execution time is required to perform these transformations. We describe how simple program equivalences may be used as program transformations to eliminate this additional execution time from programs that use geometric transformations. This approach has been used to develop an efficient implementation of a new algorithm for the two-dimensional line-clipping problem. © 1990, ACM. All rights reserved.",,Computer Programming--Algorithms; Mathematical Techniques--Geometry; Geometric Transformations; Program Transformations; Symmetry Properties; Computer Graphics
A Two-Dimensional View Controller,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976757642&doi=10.1145%2f77635.77642&partnerID=40&md5=0278670e102461ec6f8f39cf6df901d2,"Description: Many two-dimensional graphics programs provide a user with a rectangular screen window for viewing a two-dimensional image. Common examples of this underlying “world” image include text, line, or shaded pictures, and plots of one- or two-dimensional functions. Typically the screen image cannot display the world image with a 1:1 ratio between screen units 1990 and the smallest resolvable world units. Thus the screen image is typically scaled and panned across the world image. The scaling is often differential, i.e., different scaling factors are applied in X and Y. Suppose a user is viewing a function y = f(x) at a ratio of 1:1. Increasing the scale factor in X will bring more data into view, while retaining vertical amplitude; increasing the scale factor in Y will provide a finer view of the values of the function, while retaining the range plotted. We have developed a compact control device which allows a user to continuously adjust the aspect ratio of the world data presented to the window. Our model is based on the projection of the window on the untouched world data. If the screen window is narrow and tall in the world data, then the world data will be expanded horizontally and compressed vertically when displayed on the screen (note that the window itself never changes size on the screen). Accompanying the aspect ratio selection is a zoom multiplier, which can uniformly grow or shrink the screen window's image in the world. We also include variable-speed scrolling controls. Scrolling and uniform zooming are decoupled from differential scaling. The advantage of our technique is that the user need not independently scale X and Y while searching for the proper scaling of data; although both may be adjusted individually, and may also be adjusted simultaneously in a coupled, single-position device. Thus a single-button input device (such as a mouse) is all that is needed to control any aspect of the display. The technique has the additional advantage of being nonmodal, so the user need not remember any state during operation. © 1990, ACM. All rights reserved.",,
A Triangulation Algorithm from Arbitrary Shaped Multiple Planar Contours,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026134923&doi=10.1145%2f108360.108363&partnerID=40&md5=2f0d24f84c3d3af1d6e8175f2e56f6e0,"Conventional triangulation algorithms from planar contours suffer from some limitations. For instance, incorrect results can be obtained when the contours are not convex, or when the contours in two successive slices are very different. In the same way, the presence of multiple contours in a slice leads to ambiguities in defining the appropriate links. The purpose of this paper is to define a general triangulation procedure that provides a solution to these problems. We first describe a simple heuristic triangulation algorithm which is extended to nonconvex contours. It uses an original decomposition of an arbitrary contour into elementary convex subcontours. Then the problem of linking one contour in a slice to several contours in an adjacent slice is examined. To this end, a new and unique interpolated contour is generated between the two slices, and the link is created using the previously defined procedure. Next, a solution to the general case of linking multiple contours in each slice is proposed. Finally, the algorithm is applied to the reconstitution of the external surface of a complex shaped object: a human vertebra. © 1991, ACM. All rights reserved.",slice interpolation; triangulation,Computer graphics; Computerized tomography; Geometry; Heuristic methods; Magnetic resonance imaging; Medical computing; Medical imaging; Nuclear magnetic resonance; Triangulation; Planar contours; Slice interpolation; Algorithms
Numerically Stable Implicitization of Cubic Curves,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026182719&doi=10.1145%2f108541.108546&partnerID=40&md5=4f5f8fda41f4353dbf583e17ad30b327,"We give efficient, numerically-stable techniques for converting polynomial, and rational cubic curves to implicit form. We achieve numerical stability by working in a rotated coordinak system and using carefully chosen expressions for the coetlicients that appear in the implicit form. This is more practical than previously known methods which can be numerically unstable unless all computations are done in exact rational arithmetic. © 1991, ACM. All rights reserved.",Cubic curves; implicitization; numerical stability,Computational methods; Computer graphics; Geometry; Numerical methods; Numerical stability; Polynomials; Reliability; Stability; Implicitization; Polynomial cubic curves; Rational cubic curves; Algorithms
Turning Point Preserving Planar Interpolation,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026182690&doi=10.1145%2f108541.108548&partnerID=40&md5=fcac34b699f5de8e0da131b83a93fa88,"Planar parametric G1 splines are constructed from quadratic Bezier curve segments such that the turning points of the resulting spline occur at and only at given points in the plane. Such interpolating splines are suitable for the approximation of curved lines which have heen sampled at their turning points. © 1991, ACM. All rights reserved.",Approximation; interpolation; quadratic B6zier curves; turning points,Approximation theory; Computational methods; Computer aided design; Computer aided engineering; Computer graphics; Curve fitting; Geometry; Interpolation; Splines; Interpolating splines; Quadratic Bezier curves; Turning points; Algorithms
Automating the Lexical and Syntactic Design of Graphical User Interfaces: The UofA UIMS,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026182691&doi=10.1145%2f108541.108543&partnerID=40&md5=6ae0557aa36c0bfe1fab1df6f0b203eb,"The primary goal of the UofA* UIMS is to address a key problem with UIMSS:their inability to help in the initial design of user interfaces, Because of this inability, most existing UIMSS require the interface designer to work with low level syntactic and lexical detail, which can be very time-consuming and expensive in terms of effort required. The UofA* approach to this problem is to produce the initial design specification and implementation of the user interface automaticallyy, and then enable the interface designer to improve its appearance and effectiveness through an interactive refinement process, The interface designer, in this approach, works at the conceptual and semantic levels of the user interface and produces a high-level description of the commands the interface is to support. Based on this description the syntactic and lexical levels of the interface are automatically designed and implemented. This interface can be refined by the designer to improve the resulting interaction with the user. The UofA* UIMS facilitates exploration in interface design by using user�s preferences and designer�s guidelines as optional inputs. It allows the creation of interfaces in which many different types of syntaxes can coexist. © 1991, ACM. All rights reserved.",User interface design; user interface management systems,Computer aided software engineering; Computer graphics; Computer software; Human engineering; Graphical user interfaces; Lexical and syntactic design; UIMS; University of Alberta; User interfaces
Integer Forward Differencing of Cubic Polynomials: Analysis and Algorithms,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026134691&doi=10.1145%2f108360.108364&partnerID=40&md5=61159501507a1646be5a71481aa21afd,"Two incremental cubic interpolation algorithms are derived and analysed. Each is based on a known linear interpolation algorithm and modified for third order forward differencing. The tradeoff between overflow avoidance and loss of precision has made forward differencing a method which, although known to be fast, can be difficult to implement. It is shown that there is one particular family of curves which represents the worst case, in the sense that if a member of this family can be accurately drawn without overflow, then any curve which fits in the bounding box of that curve can be. From this the limitations in terms of step count and screen resolution are found for each of the two algorithms. © 1991, ACM. All rights reserved.",Be´zier curves; parametric curve plotting,Curve fitting; Geometry; Interpolation; Mathematical models; Polynomials; Bezier curves; Cubic interpolation algorithms; Forward differencing; Parametric curve plotting; Algorithms
Knot Insertion for Beta-Spline Curves and Surfaces,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025258072&doi=10.1145%2f77635.77638&partnerID=40&md5=682767d3a6399745cfe3787d3723849b,"Discrete Beta-splines arise when a Beta-spline curve is subdivided; that is, extra knots are inserted so that the curve is expressed in terms of a larger number of control vertices and Beta-splines. Their properties and an algorithm for their computation are given in “Discrete Beta-Splines” by Joe 1990. We prove a stronger version of one of these properties, from which a new algorithm for computing discrete Beta-splines is obtained. This algorithm can also be used to compute discrete B-splines. We give a comparison of operation counts for this algorithm versus other algorithms, and for two methods to compute the new control vertices of Beta-spline and B-spline curves and surfaces. © 1990, ACM. All rights reserved.",,Computer Aided Design; Computer Programming--Algorithms; Mathematical Techniques--Interpolation; Surfaces; Beta Splines; Computational Geometry; Computer Aided Geometric Design; Knot Insertion; Knot Refinement; Computer Graphics
Multidimensional Icons,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976806898&doi=10.1145%2f77635.77641&partnerID=40&md5=1adf87f9e3ffcb20400800b10aff8bb2,"Background: Direct manipulation interfaces, such as the Macintosh desktop, often represent objects with icons [l, 41. For example, text files are represented by icons. Selection of the icon invokes an editor to view the file it represents, thus the icon not only represents the text file but also represents a text editor used to view the text file. Each type of object is viewed by using a specific program. Diagram objects, for example, require a graphical editor to view. In a typical iconic interface, icons represent a single view of an object. While the single-view single-icon model has proven very intuitive and easy to use, some objects have more than one logical view [2]. Program code can be viewed as text by using a text editor, or it can be viewed as program code by a compiler. The machine code that corresponds to the program code can be thought of as another view, thus the execution of a program can be thought of as another view of program code. This paper describes a mechanism for grouping a set of icons that depict several views of a single object into one multidimensional icon. Multidimensional icons group sets of icons, each describing a unique view of an object, into a single entity. The individual icons are projected onto the sides of a simulated cube. There are two distinct advantages to using a cube instead of displaying all the icons in a menu. The first advantage is that since cubes are very familiar objects, it is a natural mental model to think of the faces of a cube as views of the entire cube—views of the actual object. The second advantage is that by allowing rotation of the cube, several icons representing views of an object are accessible using only a fraction of the screen space required to display all the icons. © 1990, ACM. All rights reserved.",,
Extending the Radiosity Method to Include Specularly Reflecting and Translucent Materials,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025233268&doi=10.1145%2f77635.77636&partnerID=40&md5=ed5d6437b79318ed53b60d8ee6196144,"An extension of the radiosity method is presented that rigorously accounts for the presence of a small number of specularly reflecting surfaces in an otherwise diffuse scene, and for the presence of a small number of specular or ideal diffuse transmitters. The relationship between the extended method and earlier radiosity and ray-tracing methods is outlined. It is shown that all three methods are based on the same general equation of radiative transfer. A simple superposition of the earlier radiosity and ray-tracing methods in order to account for specular behavior is shown to be physically inconsistent, as the methods are based on different assumptions. Specular behavior is correctly included in the present method. The extended radiosity method and example images are presented. © 1990, ACM. All rights reserved.",,Optics--Geometrical; Illumination Calculations; Radiosity Method; Specularly Reflecting Materials; Translucent Materials; Computer Graphics
A Task-Analytic Approach to the Automated Design of Graphic Presentations,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026135255&doi=10.1145%2f108360.108361&partnerID=40&md5=48afc0923b625a4b173c967cba233909,"BOZ is an automated graphic design and presentation tool that designs graphics based on an analysis of the task for which a graphic is intended to support. When designing a graphic, BOZ aims to optimize two ways in which graphics help expedite human performance of information-processing tasks: 1991 allowing users to substitute simple perceptual inferences in place of more demanding logical inferences, and (2) streamlining users' search for needed information. BOZ analyzes a logical description of a task to be performed by a human user and designs a provably equivalent perceptual task by substituting perceptual inferences in place of logical inferences in the task description. BOZ then designs and renders an accompanying graphic that encodes and structures data such that performance of each perceptual inference is supported and visual search is minimized. BOZ produces a graphic along with a perceptual procedure describing how to use the graphic to complete the task. A key feature of BOZ's approach is that it is able to design different presentations of the same information customized to the requirements of different tasks. BOZ is used to design graphic presentations of airline schedule information to support five different airline reservation tasks. Reaction time studies done with real users for one task and graphic show that the BOZ-designed graphic significantly reduces users' performance time to the task. Regression analyses link the observed efficiency savings to BOZ's two key design principles: perceptual inference substitutions and pruning of visual search. © 1991, ACM. All rights reserved.",automated design; graphic design; graphic user interface; task analysis; visual languages,Artificial intelligence; Automation; Cognitive systems; Computer aided design; Computer software; Data processing; Data structures; Ergonomics; Expert systems; Man machine systems; Regression analysis; User interfaces; Automated design; Task analysis; Visual languages; Computer graphics
A Linear Time Oslo Algorithm,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026181939&doi=10.1145%2f108541.108552&partnerID=40&md5=9e37ff8ac14579cd6069c3c663273d73,"The Oslo algorithm provides a method for identifying and computing the nonzero discreti B-splines for a single new control point following a knot refinement. A linear time, finite state, machine-baaed algorithm is presented which determines all discrete B-splines following a knot refinement. This can be viewed as a new front end to the Oslo algorithm. © 1991, ACM. All rights reserved.",B-splines; computer-aided geometric design; Oslo algorithm; subdivision,Algorithmic languages; Computational methods; Computer aided design; Computer graphics; Finite automata; Geometry; Linear programming; Machine oriented languages; Splines; Surfaces; B splines; Knot refinement; Linear time Oslo algorithm; Oslo algorithm; Subdivision; Algorithms
Simulation of Simplicity: A Technique to Cope with Degenerate Cases in Geometric Algorithms,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025214884&doi=10.1145%2f77635.77639&partnerID=40&md5=3cdc313a292209b972fc84ec3d0d8c83,"This paper describes a general-purpose programming technique, called Simulation of Simplicity, that can be used to cope with degenerate input data for geometric algorithms. It relieves the programmer from the task of providing a consistent treatment for every single special case that can occur. The programs that use the technique tend to be considerably smaller and more robust than those that do not use it. We believe that this technique will become a standard tool in writing geometric software. © 1990, ACM. All rights reserved.",,Computer Programming--Algorithms; Mathematical Techniques--Geometry; Computational Geometry; Degenerate Data; Geometric Algorithms; Computer Graphics
Interactive Measurement of Three-Dimensional Objects Using a Depth Buffer and Linear Probe,1991,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0026134702&doi=10.1145%2f108360.108446&partnerID=40&md5=c0bbaf2bcfe91e132f5e746ec446bdf1,[No abstract available],,Digital differential analyzers; Distance measurement; Image processing; Interactive computer graphics; Probes; Visualization; Depth buffer; Linear probe; Three dimensional digital differential analyzer; Three dimensional computer graphics
The Implementation of an Algorithm to find the Convex Hull of a Set of Three-Dimensional Points,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025255042&doi=10.1145%2f77635.77640&partnerID=40&md5=f4ff5c30e40d64d1a97752c1ab76a228,"A detailed description of the implementation of a three-dimensional convex hull algorithm is given. The problems experienced in the production and testing of a correct and robust implementation of a geometric algorithm are discussed. Attention is paid to those issues that are often brushed over in the theoretical descriptions but cause errors in a real computation. These include degeneracies such as coplanar points, floating-point errors, and other special, but not necessarily degenerate, cases. © 1990, ACM. All rights reserved.",,Computer Programming--Algorithms; Mathematical Techniques--Geometry; Computational Geometry; Convex Hull; Geometric Algorithms; Computer Graphics
Solid Representation and Operation Using Extended Octrees,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976782204&doi=10.1145%2f78956.78959&partnerID=40&md5=01b85cac29944e09f138ad9d2aeb8fe2,"Solid modelers must be based on reliable and fast algorithms for Boolean operations. The octree model, as well as several generalizations 1990, is specially well suited for these algorithms and can be used either as a primary or as a secondary model in solid modeling systems. This paper is concerned with a precise definition of the extended octree model that allows the representation of nonmanifold objects with planar faces and, consequently, is closed under Boolean operations on polyhedrons. Boolean nodes and nearly vertex nodes are introduced, and the model is discussed in comparison with related representations. A fast algorithm for the direct generation of the extended octree from the geometry of the base polygon in extrusion solids is presented, and its complexity is studied. Boolean operation algorithms are introduced. © 1990, ACM. All rights reserved.",,
A Butterfly Subdivision Scheme for Surface Interpolation with Tension Control,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976724020&doi=10.1145%2f78956.78958&partnerID=40&md5=82e09273b89ce90a361b8dd7c7073a35,"A new interpolatory subdivision scheme for surface design is presented. The new scheme is designed for a general triangulation of control points and has a tension parameter that provides design flexibility. The resulting limit surface is C1 for a specified range of the tension parameter, with a few exceptions. Application of the butterfly scheme and the role of the tension parameter are demonstrated by several examples. © 1990, ACM. All rights reserved.",,
Rasterization of Nonparametric Curves,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025460471&doi=10.1145%2f78964.78966&partnerID=40&md5=1e60305d2e55097b16abf56688fc50af,"We examine a class of algorithms for rasterizing algebraic curves based on an implicit form that can be evaluated cheaply in integer arithmetic using finite differences. These algorithms run fast and produce “optimal” digital output, where previously known algorithms have had serious limitations. We extend previous work on conic sections to the cubic and higher order curves, and we solve an important undersampling problem. © 1990, ACM. All rights reserved.",,Computer Programming--Algorithms; Nonparametric Curves; Rasterization; Undersampling Problems; Computer Graphics
The RGYB Color Geometry,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976764556&doi=10.1145%2f78956.78962&partnerID=40&md5=3146b190dcee246e762b17fbcf649e65,"Background:The gamut of a color CRT is defined by its three primary colors, each produced by a phosphor/electron gun combination. Light from the primaries combines additively, so the color gamut is a subset of a three dimensional vector space [1]. With the primaries as basis vectors normalized to 1.0, the color gamut is a unit cube, known as the RGB color geometry, since the three primaries are usually red, green, and blue. User interaction via RGB is generally thought to be counterintuitive, and transformations of RGB, such as Smith's HSV geometry [10] which is derived from centuries old artists' models [2], are more popular. More recent color theories, based on psychophysical and physiological models of early visual processing, suggest that more intuitive geometries may be possible. The RGYB geometry is based on two recent discoveries about the human visual system. First, the three color signals from the cone receptors are organized into three opponent channels [1, 7]. A single achromatic channel indicates lightness or brightness. Two chromatic channels, red/green and yellow/blue, signal the chromatic quantities. Second, signals on the achromatic channel are easily distinguishable from signals on the chromatic ones [6]. Consequently, it is usual to represent colors as a set of surfaces of colors that vary in chromaticity, each at a different level of brightness. Examples are as diverse as CIE chromaticity coordinates, the CIELUV uniform color space, the Munsell color system, and computer graphics color spaces such as HSV and HLS [10, 12]. © 1990, ACM. All rights reserved.",,
Efficient Ray Tracing of Volume Data,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025462506&doi=10.1145%2f78964.78965&partnerID=40&md5=97fa416dc66221438683233b4abdcc39,"Volume rendering is a technique for visualizing sampled scalar or vector fields of three spatial dimensions without fitting geometric primitives to the data. A subset of these techniques generates images by computing 2-D projections of a colored semitransparent volume, where the color and opacity at each point are derived from the data using local operators. Since all voxels participate in the generation of each image, rendering time grows linearly with the size of the dataset. This paper presents a front-to-back image-order volume-rendering algorithm and discusses two techniques for improving its performance. The first technique employs a pyramid of binary volumes to encode spatial coherence present in the data, and the second technique uses an opacity threshold to adaptively terminate ray tracing. Although the actual time saved depends on the data, speedups of an order of magnitude have been observed for datasets of useful size and complexity. Examples from two applications are given: medical imaging and molecular graphics. © 1990, ACM. All rights reserved.",,Biomedical Engineering--Imaging Techniques; Computer Programming--Algorithms; Molecules; Ray Tracing; Volume Rendering; Computer Graphics
Computation of the Axial View of a Set of Isothetic Parallelepipeds,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025464128&doi=10.1145%2f78964.78967&partnerID=40&md5=360146c1a0c2ba7688aa944a4bc1023d,"We present a new technique to display a scene of three-dimensional isothetic parallelepipeds 1990, viewed from infinity along one of the coordinate axes (axial view). In this situation, there always exists a topological sorting of the 3D-rectangles based on the relation of occlusion (a dominance relation). The arising total order is used to generate the axial view, where the two-dimensional view of each 3D-rectangle is incrementally added, starting from the closest 3D-rectangle. The proposed scene-sensitive algorithm runs in time O(N log2N + d log N), where N is the number of 3D-rectangles and d is the number of edges of the display. This improves over the previously best known technique based on the same approach. © 1990, ACM. All rights reserved.",,Computer Programming--Algorithms; Mathematical Techniques--Geometry; Computational Geometry; Isothetic Parallelepipeds; Parallelepipeds; Computer Graphics
Contour Tracing by Piecewise Linear Approximations,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025503218&doi=10.1145%2f88560.88575&partnerID=40&md5=c73acf0d8bd4753978cf1f0d6e8af467,"We present a method for tracing a curve that is represented as the contour of a function in Euclidean space of any dimension. The method proceeds locally by following the intersections of the contour with the facets of a triangulation of space. The algorithm does not fail in the presence of high curvature of the contour; it accumulates essentially no round-off error and has a well-defined integer test for detecting a loop. In developing the algorithm, we explore the nature of a particular class of triangulations of Euclidean space, namely, those generated by reflections. © 1990, ACM. All rights reserved.",,Computer Programming--Algorithms; Contour Tracing; Piecewise Linear Approximations; Triangulations; Computer Graphics
On the Construction of Surfaces Interpolating Curves: I. A method for Handling Nonconstant Parameter Curves,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976847242&doi=10.1145%2f78956.78961&partnerID=40&md5=aa467ef049c8915441ec81d2e08f0d14,"In industrial design, the tool of choice for constructing surfaces that interpolate curves is the Boolean sum surface technique. However, if curves do not lie on constant parameter lines, reparametrizations will be needed, and this may introduce derivative discontinuities. A new technique which shows promise in overcoming this problem is described here. The method is based on describing the interpolation problem directly as a system of linear equations rather than as a curve-blending problem. The resulting system of equations is usually underdetermined and can be solved using numerical linear algebra methods without the a priori determination of certain parameters. The “free” parameters can be used to control the shape of the resulting surface. Two examples of the procedure are given. © 1990, ACM. All rights reserved.",,
Improper Intersection of Algebraic Curves,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976758873&doi=10.1145%2f78956.78957&partnerID=40&md5=6e1719507ad70e6699ab8f15c5ab7074,"Bezout's theorem gives an upper bound on the degree of the intersection of properly intersecting algebraic varieties. In spaces of dimension higher than two, however, intersections between many algebraic varieties such as curves are improper. Bezout's theorem cannot be directly used to bound the number of points at which these curves intersect. In this paper an algebrogeometric technique is developed for obtaining an upper bound on the number of intersection points of two irreducible algebraic curves in k-dimensional space. The theorems obtained are applied to the specific case of intersecting algebraic space curves in three-dimensional space, and a number of examples are analyzed in this regard. The implications of the derived results for computer-aided geometric design are discussed. © 1990, ACM. All rights reserved.",,
Quartic Beta-Splines,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025462429&doi=10.1145%2f78964.78968&partnerID=40&md5=2cd0636bf6b7c85e40b7305aba6a76db,"Quartic Beta-splines have third-degree arc-length or geometric continuity at simple knots and are determined by three β or shape parameters. We present a general explicit formula for quartic Beta-splines, and determine and illustrate the effects of varying the β parameters on the shape of a quartic Beta-spline curve. We show that quartic 1990 rational Beta-splines with arc-length continuity satisfy the same continuity conditions as (nonrational) Beta-splines. We also show that the torsion continuous spline curves presented by Boehm (“Smooth Curves and Surfaces.” In Geometric Modeling: Algorithms and New Trends, G. E. Farin, Ed. SIAM, Philadelphia, Pa., 1987, pp. 175-184.) are equivalent to nonrational quartic Beta-spline curves, and determine the relationship between the shape parameters for the two types of curves. Finally, we present an algorithm for inserting a new knot and determining the refined control polygon. © 1990, ACM. All rights reserved.",,Computer Aided Design; Computer Programming--Algorithms; Mathematical Techniques--Interpolation; Betasplines; Computer Aided Geometric Design; Geometric Continuity; Knot Insertion; Rational Curves; Shape Parameters; Computer Graphics
Fast Line Scan-Conversion,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025505022&doi=10.1145%2f88560.88572&partnerID=40&md5=fc641553e7b8279a10e3dab98460d95b,"A major bottleneck in many graphics displays is the time required to scan-convert straight line segments. Most manufacturers use hardware based on Bresenham's [5] line algorithm. In this paper an algorithm is developed based on the original Bresenham scan-conversion together with the symmetry first noted by Gardner [18] and a recent double-step technique [31]. This results in a speed-up of scan-conversion by a factor of approximately 4 as compared to the original Bresenham algorithm. Hardware implementations are simple and efficient since the property of using only shift and increment operations is preserved. © 1990, ACM. All rights reserved.",,Computer Programming--Algorithms; Line Generators; Scan Line Conversion; Computer Graphics
An Investigation of Curvature Variations Over Recursively Generated B-Spline Surfaces,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025502954&doi=10.1145%2f88560.88580&partnerID=40&md5=7324dffd57e26c3ea5ac109e6708af0a,"The continuity properties of recursively generated B-spline surfaces over an arbitrary topology have been related to the eigenproperties of the local subdivision tranformation, and conditions have been established on the subdivision weightings for tangent plane continuity at extraordinary points. In this paper, curves through an extradordinary point, which align in both the tagent and binormal direction, are identified, and their curvatures are compared either side of the point. Further restrictions on the subdivision weightings are derived to optimize the curvature properties of the surface. In general continuity of curvature is not attained. © 1990, ACM. All rights reserved.",discrete Fourier transform; non-rectangular topologies,Surfaces; B Spline Surfaces; Curvature Variations; Computer Graphics
Two Remarks on Tau-Splines,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976683670&doi=10.1145%2f78956.78960&partnerID=40&md5=f422b8e7de521c173492288678a42e83,"We present a Bézier representation of τ-splines, curvature and torsion-continuous quintics, which were introduced in CAGD by Hagen in 1985 [32]. Explicit formulas are given for the conversion from Bézier representation to τ-spline representation, and vice versa. Thus, by embedding the Bézier representation in a Β-spline representation of curvature and torsion-continuous quintic spline curves, given in [20], a Β-spline-Bézier representation of τ-splines results. Second, positivity conditions for the design parameters of the Bézier representation and certain ranges of tension values are derived, which ensure properties like the convex hull and the variation-diminishing property of the Β-spline-Bézier representation. © 1990, ACM. All rights reserved.",,
A Simple Method for Improved Color Printing of Monitor Images,1990,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0025507846&doi=10.1145%2f88560.88567&partnerID=40&md5=96ac93852309a52701f83accc035720f,"To print image data optimized for display on a color monitor, the red, green, and blue values that drive the display must be transformed into data that control the amounts of cyan, magenta, yellow, and black on the print. The differences in the way display and print images are produced have important consequences for the transformation. Matching the appearance of the monitor and print images may be impossible, and achieving satisfactory results is complex. A method for obtaining pleasing prints from display image data is presented. This method assumes that good results can be achieved by users who do not have extensive knowledge of color reproduction and who have a minimum of color measuring equipment available. © 1990, ACM. All rights reserved.",,Computer Graphics; Display Images; Monitor Images; Printing
On Local Implicit Approximation and Its Applications,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024754775&doi=10.1145%2f77269.77272&partnerID=40&md5=f18b20fb8017473981bea033f7dd210a,"A method is proposed for computing an implicit approximant at a point to a parametric curve or surface. The method works for both polynomially and rationally parameterized curves and surfaces and achieves an order of contact that can be prescribed. In the case of nonsingular curve points, the approximant must be irreducible, but in the surface case additional safeguards are incorporated into the algorithm to ensure irreducibility. The method also yields meaningful results at most singularities. In principle, the method is capable of exact implicitization and has a theoretical relationship with certain resultant-based elimination methods. © 1989, ACM. All rights reserved.",Curve/surface approximation; implicit curves/surfaces; implicitization; linear systems; resultant computations; substitution,Computer Aided Design; Computer Programming--Algorithms; Mathematical Techniques--Geometry; Computational Geometry; Computer Aided Geometric Design; Local Implicit Approximation; Parametric Curves; Parametric Surfaces; Computer Graphics
Curvature Continuity and Offsets for Piecewise Conics,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024639931&doi=10.1145%2f62054.62056&partnerID=40&md5=dad5fef89708956ed1dba7a691981df0,"In this paper the construction of curvature continuous, planar curves (open or closed) that consist of conic segments, represented in the rational Bézier form, is discussed, and an iterative procedure to compute their offset curves is outlined. © 1989, ACM. All rights reserved.",Conic sections; curvature continuity; offset curves; rational Bezier curves,Computer Graphics; Mathematical Techniques--Geometry; Surfaces; Computational Geometry; Conic Sections; Curvature Continuity; Offset Curves; Piecewise Conic Curves; Rational Bezier Curves; Computer Aided Design
A Generalized Ball Curve and Its Recursive Algorithm,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024750337&doi=10.1145%2f77269.77275&partnerID=40&md5=1ccd0bf36e22d8ed44857a2a18834127,"The use of Bernstein polynomials as the basis functions in Bézier’s UNISURF is well known. These basis functions possess the shape-preserving properties that are required in designing free form curves and surfaces. These curves and surfaces are computed efficiently using the de Casteljau Algorithm. Ball uses a similar approach in defining cubic curves and bicubic surfaces in his CONSURF program. The basis functions employed are slightly different from the Bernstein polynomials. However, they also possess the same shape-preserving properties. A generalization of these cubic basis functions of Ball, such that higher order curves and surfaces can be defined and a recursive algorithm for generating the generalized curve are presented. The algorithm could be extended to generate a generalized surface in much the same way that the de Casteljau Algorithm could be used to generate a Bézier surface. © 1989, ACM. All rights reserved.",Ball curves; Bernstein polynomials; Bezier curves; computeraided geometric design; curves and surfaces,Computer Programming--Algorithms; Mathematical Techniques--Polynomials; Bernstein Polynomials; Bezier Curves; Computational Geometry; Computer Aided Geometric Design; Generalized Ball Curve; Recursive Algorithms; Computer Graphics
A Geometric Characterization of Parametric Cubic Curves,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024704553&doi=10.1145%2f77055.77056&partnerID=40&md5=3e7fda42753fe25eecb9bf13902f6e48,"In this paper, we analyze planar parametric cubic curves to determine conditions for loops, cusps, or inflection points. By expressing the curve to be analyzed as a linear combination of control points, it can be transformed such that three of the control points are mapped to specific locations on the plane. We call this image curve the canonical curve. Affine maps do not affect inflection points, cusps, or loops, so the analysis can be applied to the canonical curve instead of the original one. Since the first three points are fixed, the canonical curve is completely characterized by the position of its fourth point. The analysis therefore reduces to observing which region of the canonical plane the fourth point occupies. We demonstrate that for all parametric cubes expressed in this form, the boundaries of these regions are tonics and straight lines. Special cases include Bézier curves, B-splines, and Beta-splines. Such a characterization forms the basis for an easy and efficient solution to this problem. © 1989, ACM. All rights reserved.",Bezier curves; characterization; spline curves,Computer Aided Design; Mathematical Techniques--Geometry; Canonical Curves; Computational Geometry; Computer Aided Geometric Design; Parametric Cubic Curves; Computer Graphics
A Round Trip to B-Splines via de Casteljau,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024704555&doi=10.1145%2f77055.77061&partnerID=40&md5=59309e0f81d353ce93ba60abbc346e87,"B-splines are constructed from Bézier curves solely using de Casteljau's construction. Divided differences are not being used, nor is Mansfield's recurrence formula presupposed. Yet, it is shown how to differentiate, subdivide, and evaluate a B-spline. These results are derived from the corresponding techniques of Bézier curves. © 1989, ACM. All rights reserved.",B-spline control points; B-splines; Bézier curves; Bézier points; de Casteljau's construction; differentiating; knot insertion; recurrence relation,Computer Aided Design; Mathematical Techniques--Interpolation; B Splines; Bezier Curves; Computational Geometry; Computer Aided Geometric Design; De Casteljau's Construction; Knot Insertion; Computer Graphics
A Multisided Generalization of Bézier Surfaces,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024704554&doi=10.1145%2f77055.77059&partnerID=40&md5=871dee47299a16d2b589021402d65570,"In this paper we introduce a class of surface patch representations, called S-patches, that unify and generalize triangular and tensor product Bézier surfaces by allowing patches to be defined over any convex polygonal domain; hence, S-patches may have any number of boundary curves. Other properties of S-patches are geometrically meaningful control points, separate control over positions and derivatives along boundary curves, and a geometric construction algorithm based on de Casteljau's algorithm. Of special interest are the regular S-patches, that is, S-patches defined on regular domain polygons. Also presented is an algorithm for smoothly joining together these surfaces with Ck continuity. © 1989, ACM. All rights reserved.",Computer-aided geometric design; tensor product Bezier surfaces; triangular Bezier surface patches,Computer Aided Design; Computer Programming--Algorithms; Mathematical Techniques--Geometry; Computational Geometry; Computer Aided Geometric Design; Spatches; Triangular Bezier Surface Patches; Computer Graphics
Automatic Parameterization of Rational Curves and Surfaces IV: Algebraic Space Curves,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024749693&doi=10.1145%2f77269.77273&partnerID=40&md5=5157fb92d1c9078821c1f91df1e7d3e4,"For an irreducible algebraic space curve C that is implicitly defined as the intersection of two algebraic surfaces, f (x, y, z) = 0 and g (x, y, z) = 0, there always exists a birational correspondence between the points of C and the points of an irreducible plane curve P, whose genus is the same as that of C. Thus C is rational if the genus of P is zero. Given an irreducible space curve C = (f ∩ g), with f and g not tangent along C, we present a method of obtaining a projected irreducible plane curve P together with birational maps between the points of P and C. Together with [4], this method yields an algorithm to compute the genus of C, and if the genus is zero, the rational parametric equations for C. As a biproduct, this method also yields the implicit and parametric equations of a rational surface S containing the space curve C. The birational mappings of implicitly defined space curves find numerous applications in geometric modeling and computer graphics since they provide an efficient way of manipulating curves in space by processing curves in the plane. Additionally, having rational surfaces containing C yields a simple way of generating related families of rational space curves. © 1989, ACM. All rights reserved.",Computer-aided design; parametric curves,Mathematical Techniques--Geometry; Algebraic Space Curves; Computational Geometry; Parametric Curves; Computer Graphics
Blending Parametric Surfaces,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024705555&doi=10.1145%2f77055.77057&partnerID=40&md5=bd32649586ab1d284fd4ff6f79b589ba,"A blending surface is a surface that smoothly connects two given surfaces along two arbitrary curves, one on each surface. This is particularly useful in the modeling operations of filleting a sharp edge between joining surfaces or connecting disjoint surfaces. In this paper we derive a new surface formulation for representing surfaces which are blends of parametric surfaces. The formulation has the advantage over the traditional rational polynomial approach in that point and normal values have no gaps between the blending surface and the base surfaces. Shape control parameters that control the cross-sectional shape of the blending surface are also available. In addition, the base surfaces are not restricted to any particular type of surface representation as long as they are parametrically defined and have a well-defined and continuous normal vector at each point. The scheme is extensible to higher orders of geometric continuity, although we concentrate on G1. © 1989, ACM. All rights reserved.",Blending; computer-aided geometric design; geometric continuity; parametric surfaces,Computer Aided Design; Mathematical Techniques--Geometry; Blending Surfaces; Computer Aided Geometric Design; Geometric Continuity; Parametric Surfaces; Computer Graphics
Multiple-Knot and Rational Cubic Beta-Splines,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024640946&doi=10.1145%2f62054.62055&partnerID=40&md5=52ba9ab8f62d228541a15502385bc07c,"Goodman (Properties of Beta-splines. J. Approx. Theory 44, 2 (June 1985), 132-153) gave an explicit formula for cubic Beta-splines on a uniform knot sequence with varying β1 and β2 values at the knots. We establish an alternative explicit formula for cubic Beta-splines on a nonuniform knot sequence with constant β1 = 1 and varying β2 values at the knots. This alternative formula can also be used if the knot sequence contains multiple knots, and is useful for knot insertion. We show how to efficiently evaluate a cubic Beta-spline curve at many values using this formula. We introduce rational cubic Beta-spline curves and surfaces that have extra weight parameters for shape control, and show that they satisfy the same geometric continuity conditions and properties as nonrational cubic Beta-spline curves and surfaces. © 1989, ACM. All rights reserved.",Beta-splines; computer-aided geometric design; geometric continuity; rational curves and surfaces,Computer Graphics; Mathematical Techniques--Geometry; Surfaces; Beta Splines; Computational Geometry; Computer Aided Geometric Design; Geometric Continuity; Multiple Knots; Rational Curves and Surfaces; Computer Aided Design
"Rational Continuity: Parametric, Geometric, and Frenet Frame Continuity of Rational Curves",1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024755043&doi=10.1145%2f77269.77274&partnerID=40&md5=185fd115f2f679c655d180461715aaf4,"The parametric, geometric, or Frenet frame continuity of a rational curve has often been ensured by requiring the homogeneous polynomial curve associated with the rational curve to possess either parametric, geometric, or Frenet frame continuity, respectively. In this paper, we show that this approach is overly restrictive and derive the constraints on the associated homogeneous curve that are both necessary and sufficient to ensure that the rational curve is either parametrically, geometrically, or Frenet frame continuous. © 1989, ACM. All rights reserved.",B-splines; Beta-constraints; Beta-splines; Bezier curves; computer-aided geometric design; continuity; curves and surfaces; Frenet frame; Frenet-frame continuity; geometric continuity; jet spaces; NURBs; parametric continuity; rational B-splines; rational continuity; rational splines; reparameterization,Computer Aided Design; Mathematical Techniques--Geometry; Computer-Aided Geometric Design; Geometric Continuity; Parametric Continuity; Rational Curves; Computer Graphics
Local Generalized Hermite Interpolation by Quartic C2 Space Curves,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024705451&doi=10.1145%2f77055.77060&partnerID=40&md5=caa1c4354b65f9d26a7a356f8f0c47aa,"This paper develops and explains the construction of a piecewise quartic space curve that interpolates positional, tangent, and curvature data. The construction is local and explicit; that is, it does not involve the solution of equations. If only positional data are known, then the tangent and curvature data can he derived by simple local default rules. Another option is to reduce the degree of the curve or minimize the a-norm of its derivative by solving a diagonally dominant, banded, linear system. © 1989, ACM. All rights reserved.",C2 space curves; geometric smoothness; intersection of osculating planes; local interpolation scheme,Computer Aided Design; Mathematical Techniques--Interpolation; Computer Aided Geometric Design; Local Generalized Hermite Interpolation; Quartic Curves; Space Curves; Computer Graphics
Discrete Smooth Interpolation,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024640067&doi=10.1145%2f62054.62057&partnerID=40&md5=2f5e8835219682f3cd12b8e550221d6a,"Interpolation of a function ƒ(·) known at some data points of RP is a common problem. Many computer applications (e.g., automatic contouring) need to perform interpolation only at the nodes of a given grid. Whereas most classical methods solve the problem by finding a function defined everywhere, the proposed method avoids explicitly computing such a function and instead produces values only at the grid points. For two-dimensional regular grids, a special case of this method is identical to the Briggs method (see “Machine Contouring Using Minimum Curvature,” Geophysics 17, 1 (1974)), while another special case is equivalent to a discrete version of thin plate splines (see J. Duchon, Fonctions Splines du type Plaque Mince en Dimention 2, Séminaire d'analyse numérique, n 231, U.S.M.G., Grenoble, 1975; and J. Enriquez, J. Thomann, and M. Goupillot, Application of bidimensional spline functions to geophysics, Geophysics 48, 9 (1983)). © 1989, ACM. All rights reserved.",grid; Interpolation; smooth; splines,Artificial Intelligence--Expert Systems; Maps and Mapping--Computer Applications; Mathematical Techniques--Interpolation; Surfaces; Cartography; Computational Geometry; Discrete Smooth Interpolation; Grid Points; Machine Contouring; Computer Graphics
Blending Algebraic Surfaces,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024749404&doi=10.1145%2f77269.77270&partnerID=40&md5=56f5567b4911572623f4edab7c4c3ff5,"A new definition of geometric continuity for implicitly defined surfaces is introduced. Under this definition, it is shown that algebraic blending surfaces (surfaces that smoothly join two or more surfaces) have a very specific form. In particular, any polynomial whose zero set blends the zero sets of several other polynomials is always expressible as a simple combination of these polynomials. Using this result, new methods for blending several algebraic surfaces simultaneously are derived. © 1989, ACM. All rights reserved.",Algebraic surface; blending; geometric continuity; ideals,Mathematical Techniques--Geometry; Surfaces; Algebraic Surfaces; Computational Geometry; Geometric Continuity; Surface Blending; Computer Graphics
The Displacement Method for Implicit Blending Surfaces in Solid Models,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024755404&doi=10.1145%2f77269.77271&partnerID=40&md5=f62533a1de194791b9fde3f0cb18a512,"To date, methods that blend solids, that is, B-rep or CSG models, with implicit functions require successive composition of the blending functions to handle an arbitrary solid model. The shape of the resulting surfaces depends upon the algebraic distances defined by these functions. To achieve meaningful shapes, previous methods have relied on blending functions that have a pseudo-Euclidean distance measure. These methods are abstracted, resulting in some general observations. Unfortunately, the functions used can exhibit unwanted discontinuities. A new method, the displacement form of blending, embeds the zero surface of the blending functions in a form for which algebraic distance is C1 continuous in the entire domain of definition. Characteristics of the displacement form are demonstrated using the superelliptic blending functions. Intuitive and mathematical underpinnings are provided. © 1989, ACM. All rights reserved.",Algebraic distance; blending; geometric modeling; implicit surfaces; sculptured surfaces; solid modeling,Mathematical Techniques--Geometry; Surfaces; Computational Geometry; Displacement; Geometric Modeling; Implicit Surfaces; Solid Models; Surface Blending; Computer Graphics
Conditions for Tangent Plane Continuity over Recursively Generated B-Spline Surfaces,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023999814&doi=10.1145%2f42458.42459&partnerID=40&md5=157d61b8e9dc75e326b7b3188ff8f99b,"The continuity properties of recursively generated B-spline surfaces over an arbitrary topology have been related to the eigenproperties of the local subdivision transformation. In this paper a discrete Fourier transform technique is employed to derive these eigenproperties for a general choice of subdivision weightings. Conditions on these weightings are identified for tangent plane continuity at the extraordinary points and a geometric interpretation is given. © 1988, ACM. All rights reserved.",B-spline surfaces; discrete Fourier transform; nonrectangular topologies; recursive subdivision; tangent plane continuity,COMPUTER AIDED DESIGN; COMPUTER GRAPHICS; MATHEMATICAL TECHNIQUES - Eigenvalues and Eigenfunctions; MATHEMATICAL TRANSFORMATIONS - Fast Fourier Transforms; B-SPLINE SURFACES; DISCRETE FOURIER TRANSFORM; NONRECTANGULAR TOPOLOGIES; RECURSIVE SUBDIVISION; TANGENT PLANE CONTINUITY; SURFACES
Color Gamut Mapping and the Printing of Digital Color Images,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024088253&doi=10.1145%2f46165.48045&partnerID=40&md5=ae155d71bb91eaac3d50757d51280656,"Principles and techniques useful for calibrated color reproduction are defined. These results are derived from a project to take digital images designed on a variety of different color monitors and accurately reproduce them in a journal using digital offset printing. Most of the images printed were reproduced without access to the image as viewed in its original form; the color specification was derived entirely from calorimetric specification. The techniques described here are not specific to offset printing and can be applied equally well to other digital color devices. The reproduction system described is calibrated using CIE tristimulus values. An image is represented as a set of three-dimensional points, and the color output device as a three-dimensional solid surrounding the set of all reproducible colors for that device, called its gamut. The shapes of the monitor and the printer gamuts are very different, so it is necessary to transform the image points to fit into the destination gamut, a process we call gamut mapping. This paper describes the principles that control gamut mapping. Included also are some details on monitor and printer calibration, and a brief description of how digital halftone screens for offset printing are prepared. © 1988, ACM. All rights reserved.",Color; color correction; color printing; color reproduction,Printing--Offset; Calibrated Color Reproduction; CIE Tristimulus Values; Color Gamut Mapping; Digital Color Images; Printer Calibration; Computer Graphics
A Decomposable Algorithm for Contour Surface Display Generation,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023998904&doi=10.1145%2f42458.42461&partnerID=40&md5=88b687f9bf83782fdd672e26e0f71d45,"We present a study of a highly decomposable algorithm useful for the parallel generation of a contour surface display. The core component of this algorithm is a two-dimensional contouring algorithm that operates on a single 2 x 2 subgrid of a larger grid. An intuitive procedure for the operations used to generate the contour lines for a subgrid is developed. A data structure, the contouring tree, is introduced as the basis of a new algorithm for generating the contour lines for the subgrid. The construction of the contouring tree is detailed. Space requirements for the contouring tree algorithm are described for particular implementations. © 1988, ACM. All rights reserved.",contour surface display generation; Contouring; contouring tree,DATA PROCESSING - Data Structures; IMAGE PROCESSING; SURFACES; 2-D CONTOURING; CONTOUR SURFACE DISPLAY GENERATION; CONTOURING TREE; COMPUTER GRAPHICS
A Window-Based Graphics Frame Store Architecture,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024090720&doi=10.1145%2f46165.46166&partnerID=40&md5=4e9fe8e1284f0b505f66b43fe2132c1e,"A proposal for a scalable frame store architecture for a hardware-based window graphics system is described. The architecture is based on a distributed linear array of common elements called microframe stores. Each window and viewport can be independently configured in size and color depth. Unlike the strip-based hardware window systems referenced, this system places no restrictions on the number of transitions that can be accommodated on each scanline. The approach described allows real-time window graphics to be achieved on a variety of full-color, high-resolution, high-refresh-rate, raster-scan displays with pixel rates of up to 400 MHz. © 1988, ACM. All rights reserved.",2-D graphics; Bit-mapped frame stores; VLSI; window graphics; WSI,Computer Architecture; Display Devices; 2-D Graphics; Bit-Mapped Frame Stores; Raster-Scan Displays; Real-Time Window Graphics; Window-Based Graphics Frame Store; Computer Peripheral Equipment
The Circle-Brush Algorithm,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976737867&doi=10.1145%2f49155.49156&partnerID=40&md5=3731728f4027986439c7945e8fc47195,"Brushing commonly refers to the drawing of curves with various line widths in hit-mapped graphics systems. It is best done with circles of suitable diameter so that a constant line width, independent of the curve's slope, is obtained. Allowing all possible integer diameters corresponding to all possible integer line widths results in every second width having an odd value. Thus, the underlying circle algorithm must be able to handle both integer and half-integer radii. Our circle-brush algorithm handles both situations and produces a “best approximation”: All grid points produced simultaneously minimize (1) the residual, (2) the Euclidean distance to the circle, and (3) the displacement along the grid line from the intersection with the circle. Our circle-brush algorithm was developed in careful consideration of its implementation in VLSI. © 1988, ACM. All rights reserved.",Brushing; raster graphics,Computer Architecture; Computer Hardware; Computer Programming--Algorithms; Display Devices; Bit Mapped Graphics; Circle-Brush Algorithm; Display Algorithms; Half Integer Case; Raster Display Devices; Raster Graphics; Computer Graphics
Intersection Algorithms for Lines and Circles,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976785749&doi=10.1145%2f49155.49157&partnerID=40&md5=23ab3dea00070888e5996d525ee32f3f,"This paper presents a unified representation scheme for the implicit equations of points, lines, and circles. An associated set of geometric algorithms operates successfully on degenerate and nearly degenerate geometry, and when necessary produces degenerate geometric results. Computation errors are interpreted geometrically in order to establish preconditions for reliable results and requirements on the resolution of computer arithmetic. The algorithms thus provide a basis for the wide range of geometric constructions required by computer-aided drafting and design systems. © 1988, ACM. All rights reserved.",computation errors; Computational geometry; computer-aided drawing; line/circle intersections,Computer Aided Design--Applications; Computer Aided Engineering--Applications; Computer Programming--Algorithms; Mathematical Techniques--Numerical Analysis; Computational Geometry; Geometric Algorithms; Intersection Algorithms; Object Modeling; Straight Lines Intersection; Two Circles Intersection; Computer Graphics
Formal Specification of a Small Example Based on GKS,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024052917&doi=10.1145%2f44479.44481&partnerID=40&md5=177589f1a08919a06349459f23c1547f,"Implicit regeneration is a fundamental concept of the Graphical Kernel System (GKS), an IS0 International Standard, but it is difficult to understand as presented in the English language specification of GKS. Consequently, it is a good example to use in determining whether formal specification techniques can be used effectively to describe and clarify graphics concepts of this kind. The problem is first motivated informally with a description of GKS concepts and terminology. A formal specification of implicit regeneration using a simplified model is then presented, and the notation that is used for its formalization (VDM) is described. Finally, properties of implicit regeneration are formulated and the specification is proved to conform to these properties. This demonstrates the applicability of formal specification to graphics software, because a sufficiently precise description of a complicated concept is provided that enables its consistency to be checked against an intuitive understanding of the concept as derived from the GKS document. © 1988, ACM. All rights reserved.",Abstract data type; bundled attributes; constructive specification; implicit regeneration,COMPUTER GRAPHICS - Standards; COMPUTER METATHEORY - Formal Logic; FORMAL SPECIFICATION OF SOFTWARE; GRAPHICAL KERNEL SYSTEM (GKS); COMPUTER SOFTWARE
"Active Zones in CSG for Accelerating Boundary Evaluation, Redundancy Elimination, Interference Detection, and Shading Algorithms",1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976666709&doi=10.1145%2f49155.51123&partnerID=40&md5=10fb7a87908ecb638effb1399e25dcf3,"Solids defined by Boolean combinations of solid primitives may be represented in constructive solid geometry (CSG) as binary trees. Most CSG-based algorithms (e.g., for boundary evaluation, graphic shading, interference detection) do various forms of set-membership classification by traversing the tree associated with the solid. These algorithms usually generate intermediate results that do not contribute to the final result, and hence may be regarded as redundant and a source of inefficiency. To reduce such inefficiencies, we associate with each primitive A in a tree S an active zone Z that represents the region of space where changes to A affect the solid represented by S, and we use a representation of Z instead of S for set-membership classification. In the paper we develop a mathematical theory of active zones, prove that they correspond to the intersection of certain nodes of the original trees, and show how they lead to efficient new algorithms for boundary evaluation, for detecting and eliminating redundant nodes in CSG trees, for interference (null-set) detection, and for graphic shading. © 1988, ACM. All rights reserved.",Boolean algebra; boundary evaluation; constructive solid geometry; interference detection; redundancy elimination; representation simplification; solid modeling,Computer Aided Design--Applications; Computer Aided Engineering--Applications; Computer Graphics--Three Dimensional Graphics; Mathematical Techniques--Trees; Active Zones; Boundary Evaluation; Constructive Solid Geometry (CSG); Graphic Shading; Shading Algorithms; Visible Surface Algorithms; Computer Programming
Multiprocessor Experiments for High-Speed Ray Tracing,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024052883&doi=10.1145%2f44479.44480&partnerID=40&md5=bcc8eb27569e30b02f99697b1c372b2f,"New single- and multiprocessor models for ray tracing are presented. Important features are (1) the use of custom VLSI building blocks, (2) the use of a modified hierarchical data-structure-based ray tracing algorithm with three disjoint data sets, and (3) scene access through adaptive information broadcasting. A modular design is presented that permits incremental performance enhancement up to two orders of magnitude over conventional minicomputers or workstations. Ray tracing is a surprisingly good application for a shared bus architecture because of the computational complexity of intersecting light rays with graphics objects. © 1988, ACM. All rights reserved.",Adaptive broadcasting; bounding volume; computer graphics; hierarchical data structures; multiprocessing; ray tracing; VLSI systems design,"COMPUTER ARCHITECTURE; COMPUTER SYSTEMS, DIGITAL - Parallel Processing; COMPUTERS, MICROCOMPUTER - Special Purpose Application; INTEGRATED CIRCUITS, VLSI - Applications; COMPUTATIONAL COMPLEXITY; RAY TRACING; SHARED BUS ARCHITECTURE; COMPUTER GRAPHICS"
Automatic Parsing of Degenerate Quadric-Surface Intersections,1989,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024703677&doi=10.1145%2f77055.77058&partnerID=40&md5=832141967465c2364252f61e07c0461e,"In general, two quadric surfaces intersect in a nonsingular quartic space curve. Under special circumstances, however, this intersection may “degenerate” into a quartic with a double point, or a composite of lines, conics, and twisted cubics whose degrees, counted over the complex projective domain, sum to four. Such degenerate forms are important since they occur with surprising frequency in practice and, unlike the generic case, they admit rational parameterizations. Invoking concepts from classical algebraic geometry, we formulate the condition for a degenerate intersection in terms of the vanishing of a polynomial expression in the quadric coefficients. When this is satisfied, we apply a multivariate polynomial factorization algorithm to the projecting cone of the intersection curve. Factors of this cone which correspond to intersection components “at infinity” may be removed a priori. A careful examination of the remaining cone factors then facilitates the identification and parameterization of the various real, affine intersection elements that may arise: isolated points, lines, conics, cubics, and singular quartics. The procedure is essentially automatic (avoiding the tedium of case-by-case analyses), encompasses the full range of quadric forms, and is amenable to implementation in exact (symbolic) arithmetic. © 1989, ACM. All rights reserved.",Degenerate intersections; discriminant; multivariate polynomial factorization; projecting cone; quadric surfaces; rational parameterizations; Segre characteristic,Computer Aided Design; Mathematical Techniques--Geometry; Automatic Parsing; Computation Geometry; Computer Aided Geometric Design; Degenerate Intersections; Quadric Surfaces; Computer Graphics
On the Power of the Frame Buffer,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023997146&doi=10.1145%2f42458.42460&partnerID=40&md5=b99adb21ab2b5f7557e5d1212af0add8,"Raster graphics displays are almost always refreshed out of a frame buffer in which a digital representation of the currently visible image is kept. The availability of the frame buffer as a two-dimensional memory array representing the displayable area in a screen coordinate system has motivated the development of algorithms that take advantage of this memory for more than just picture storage. The classic example of such an algorithm is the depth buffer algorithm for determining visible surfaces of a three-dimensional scene. This paper constitutes a first attempt at a disciplined analysis of the power of a frame buffer seen as a computational engine for use in graphics algorithms. We show the inherent power of frame buffers to perform a number of graphics algorithms in terms of the number of data fields (registers) required per pixel, the types of operations allowed on these registers, and the input data. In addition to upper bounds given by these algorithms, we prove lower bounds for most of them and show most of these algorithms to be optimal. One result of this study is the introduction of new frame buffer algorithms for computing realistic shadows and for determining the convex intersection of half spaces, an operation important in computational geometry and in rendering objects defined using planes rather than polygons. Another result is that it shows clearly the relationships between different and important areas of research in computer graphics, such as visible surface determination, compositing, and hardware for smart frame buffers. © 1988, ACM. All rights reserved.",Complexity; frame buffer; visibility,COMPUTER ARCHITECTURE; IMAGE PROCESSING; FRAME BUFFER ALGORITHMS; GRAPHICS ALGORITHMS; RASTER DISPLAY DEVICES; RASTER GRAPHICS DISPLAYS; COMPUTER GRAPHICS
Composing Bézier Simplexes,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0024048079&doi=10.1145%2f44479.44482&partnerID=40&md5=98d6ebb3ee9178f2a1d8866b9cfb1812,"This paper describes two algorithms for solving the following general problem: Given two polynomial maps f: Rn ↦ RN and S RN ↦ Rd in Bézier simplex form, find the composition map &Stilde; = S ° f in Bézier simplex form (typically, n ≤ N ≤ d ≤ 3). One algorithm is more appropriate for machine implementation, while the other provides somewhat more geometric intuition. The composition algorithms can be applied to the following problems: evaluation, subdivision, and polynomial reparameterization of Bézier simplexes; joining Bézier curves with geometric continuity of arbitrary order; and the determination of the control nets of Bézier curves and triangular Bézier surface patches after they have undergone free-form deformations. © 1988, ACM. All rights reserved.",Bézier curves; computer-aided geometric design; free-form deformations; geometric continuity; triangular Bizier surface patches,ENGINEERING - Computer Aided Design; MATHEMATICAL TECHNIQUES - Geometry; BEZIER SIMPLEXES; COMPUTATIONAL GEOMETRY; COMPUTER GRAPHICS
A Parallel B-Spline Surface Fitting Algorithm,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976788811&doi=10.1145%2f49155.214377&partnerID=40&md5=977c05570202b8300a22bae717776b6c,"A parallel fitting algorithm using uniform bicubic B-spline surfaces is presented. This algorithm is based on the observation that a tensor product spline surface fitting problem can be split into two spline curve fitting problems, and each of these problems can be carried out in parallel by cyclic reduction. Using this approach, the control points of a uniform bicubic B-spline surface that interpolates a grid of m x n points can be found in O(log m + log n) time on mn processors. Furthermore, since smaller systems of equations are solved in the algorithm, the accumulated error resulting from this approach is smaller than that of the traditional algorithms. © 1988, ACM. All rights reserved.",B-splines; cyclic reduction; interpolation; parallel; recursive doubling; uniform cubic B-spline,Computer Programming--Algorithms; Mathematical Techniques--Numerical Analysis; Computational Geometry; Cyclic Reduction; Geometric Algorithms; Object Modeling; Parallel B-Spline Fitting Algorithm; Spline Surface Fitting Problem; Computer Graphics
Digital Halftones by Dot Diffusion,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023437124&doi=10.1145%2f35039.35040&partnerID=40&md5=38b26424e347d95a2b01b87c5a40fc31,"This paper describes a technique for approximating real-valued pixels by two-valued pixels. The new method, called dot diffusion, appears to avoid some deficiencies of other commonly used techniques. It requires approximately the same total number of arithmetic operations as the Floyd-Steinberg method of adaptive grayscale, and it is well suited to parallel computation; but it requires more buffers and more complex program logic than other methods when implemented sequentially. A “smooth” variant of the method may prove to be useful in high-resolution printing. © 1987, ACM. All rights reserved.",Bilevel display; constrained average; edge enhancement; error diffusion; facsimiles; Floyd-Steinberg method; minimized average error; Mona Lisa; ordered dither; parallel computing; printing,"COMPUTER SYSTEMS, DIGITAL - Parallel Processing; IMAGE PROCESSING - Enhancement; EDGE ENHANCEMENT ALGORITHMS; FLOYD-STEINBERG METHOD; COMPUTER GRAPHICS"
An Enhanced Treatment of Hidden Lines,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023439590&doi=10.1145%2f35039.35042&partnerID=40&md5=8460cd6a164bd77245fe402b6622a09c,"A new display scheme is presented in which three-dimensional objects are represented with a much higher degree of user control of the line-drawing format than those in conventional schemes. In this scheme, the attribute of a line is determined not at the time of definition but after the viewing transformation has been applied, taking the shielding environment of the line into consideration. The essential difference between our scheme and conventional hidden-line removal/indication lies in the treatment of the shielding environment. In conventional hidden-line removal/indication, only the visible/invisible information is available for the selection of the attribute of a line. In our scheme, the entire set of surfaces that hide a line can be used to determine the attribute of the line. A much higher degree of freedom in generating pictures is achieved owing to the treatment of the shielding environment. We also describe a system called GRIP, which implements the new scheme. © 1987, ACM. All rights reserved.",Attribute binding; hidden line/surface removal; three-dimensional graphics; viewing transformation,IMAGE PROCESSING - Enhancement; ATTRIBUTE BINDING; HIDDEN LINE/SURFACE REMOVAL; COMPUTER GRAPHICS
Line Drawings of Octree-Represented Objects,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023849972&doi=10.1145%2f42188.42189&partnerID=40&md5=dc4ef90f74e2d621f306a3f609937c8d,"The octree structure represents the space occupied by an object as a juxtaposition of cubes, where the sizes and position coordinates of the cubes are integer powers of 2 and are defined by a recursive decomposition of three-dimensional space. This makes the octree structure highly sensitive to object location and orientation, and the three-dimensional shape of the represented object obscure. It is helpful to be able to see the actual object represented by an octree, especially for visual performance evaluation of octree algorithms. Presented in this paper is a display algorithm that helps visualize the three-dimensional space represented by the octree. Given an octree, the algorithm produces a line drawing of the objects represented by the octree, using parallel projection, from any specified viewpoint with hidden lines removed. The order in which the algorithm traverses the octree has the property that if node x occludes node y, then node x is visited before node y. The algorithm produces a set of long, straight visible edge segments corresponding to the visible surface of the polyhedral object represented by the octree. Examples of some line drawing produced by the algorithm are given. The complexity of the algorithm is also discussed. © 1988, ACM. All rights reserved.",Hidden line removal; line drawing; octree; three-dimensional representation,"COMPUTER GRAPHICS - Three Dimensional Graphics; DATA PROCESSING - Data Structures; IMAGE PROCESSING - Image Coding; MATHEMATICAL TECHNIQUES - Trees; ROBOTS, INDUSTRIAL - Vision Systems; HIDDEN LINE REMOVAL; OCTREE; VISION AND SCENE UNDERSTANDING; ARTIFICIAL INTELLIGENCE"
Geometric Approaches to Nonplanar Quadric Surface Intersection Curves,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023438553&doi=10.1145%2f35039.35041&partnerID=40&md5=102f43d454159007b5d1cfab5181d109,"Quadric surfaces occur frequently in the design of discrete piece parts in mechanical CAD/CAM. Solid modeling systems based on quadric surfaces must be able to represent intersection curves parametrically and in a fashion that allows the underlying surfaces to be partitioned. An algebraic approach originally developed by Levin meets these needs but is numerically sensitive and based on solutions to fourth-degree polynomial equations. In this paper we develop geometric approaches that are robust and efficient, and do not require solutions to polynomials of degree higher than 2. © 1987, ACM. All rights reserved.",Boundary evaluation; quadric surfaces; solid modeling,COMPUTER AIDED DESIGN; MATHEMATICAL TECHNIQUES - Algorithms; COMPUTATIONAL GEOMETRY; MATHEMATICS OF COMPUTING; OBJECT MODELING; COMPUTER GRAPHICS
Charcoal Sketching: Returning Control to the Artist,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023863918&doi=10.1145%2f42188.42230&partnerID=40&md5=1e26aa56de16eafa1bc55c10dc6ec4df,"Background: Traditional paint programs can be criticized on the grounds that they provide fewer degrees of freedom than conventional artistic media. Mouse or tablet input devices usually provide only (x, y) spatial information. Thus most paint programs allow continuous control of the path of a stroke, but render it with a single “brush shape” of fixed size and orientation and use menus, either stationary or appearing, for such tasks as changing “brush” shapes. This produces two distinct discontinuities for the artist. First is a physical discontinuity: stopping the act of drawing and making a brush selection using a different physical device, or using the same device to point at a menu selection. A second discontinuity is the cognitive one involved with deciphering the menu contents and making a selection. Although the second may be minimized by using iconic menus, these interruptions of the drawing act make it difficult or impossible for the artist to maintain the kind of continuous control over his or her medium that is required. A particular example of this level of control is the continuous and immediate control that an artist maintains when sketching with a piece of charcoal or a pencil. By manipulating the implement, the artist can change the shape of its contact point with the drawing surface. By changes in pressure exerted with the implement against the surface, it is possible to control both the darkness (value) and width (weight) of the line. All of these factors are controlled by the artist in real time and with continuous feedback. Both Greene [2] and Strassman [4] have presented methods for capturing more of the artist's “gesture” in the rendered stroke. However, Greene's technique depends on a special-purpose input device and Strassman's does not work in real time. Hill [3] describes a two-handed paintbrush with the off hand controlling a valuator that varies the ‘brush width. The technique described here represents another way to provide such control to the user of an interactive paint program. It uses off-the-shelf hardware, is easy to implement, and works in real time. As a single-handed technique, it takes advantage of the artist's skill with existing media. © 1988, ACM. All rights reserved.",,COMPUTER INTERFACES - Human Factors; COMPUTER ART; COMPUTER GRAPHICS
"Geometric Continuity, Shape Parameters, and Geometric Constructions for Catmull-Rom Splines",1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023825834&doi=10.1145%2f42188.42265&partnerID=40&md5=7b959d34b5498256d12a8b2045321160,"Catmull-Rom splines have local control, can be either approximating or interpolating, and are efficiently computable. Experience with Beta-splines has shown that it is useful to endow a spline with shape parameters, used to modify the shape of the curve or surface independently of the defining control vertices. Thus it is desirable to construct a subclass of the Catmull-Rom splines that has shape parameters. We present such a class, some members of which are interpolating and others approximating. As was done for the Beta-spline, shape parameters are introduced by requiring geometric rather than parametric continuity. Splines in this class are defined by a set of control vertices and a set of shape parameter values. The shape parameters may be applied globally, affecting the entire curve, or they may be modified locally, affecting only a portion of the curve near the corresponding joint. We show that this class results from combining geometrically continuous (Beta-spline) blending functions with a new set of geometrically continuous interpolating functions related to the classical Lagrange curves. We demonstrate the practicality of several members of the class by developing efficient computational algorithms. These algorithms are based on geometric constructions that take as input a control polygon and a set of shape parameter values and produce as output a sequence of Bézier control polygons that exactly describes the original curve. A specific example of shape design using a low-degree member of the class is given. © 1988, ACM. All rights reserved.",Approximation; Beta-splines; Bézier curves; Catmull-Rom splines; computer-aided geometric design; curves and surfaces; geometric continuity; interpolation; shape parameters,COMPUTER AIDED DESIGN - Applications; COMPUTER AIDED ENGINEERING; COMPUTER PROGRAMMING - Algorithms; CATMULL-ROM SPLINES; COMPUTATIONAL GEOMETRY; OBJECT MODELING; COMPUTER GRAPHICS
A Hierarchical Boundary Model for Solid Object Representation,1988,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023825448&doi=10.1145%2f42188.46164&partnerID=40&md5=a3a38e63ef98eed7c6953edd00595149,"A new hierarchical model for solid object representation is described. This model, called a hierarchical face adjacency hypergraph (HFAH), is based on a relational description of the object boundary, called a face adjacency hypergraph (FAH), which considers faces as the primary topological entities defining the object boundary. The HFAH consists of a hierarchy of FAHs describing the decomposition of the boundary of an object into form features. In this paper the HFAH is described together with its internal encoding structure. Two basic transformations, called refinement and abstraction, are defined on the hierarchical model; these allow effective and efficient modifications of the hierarchical boundary model. © 1988, ACM. All rights reserved.",Hierarchical data structures; solid modeling boundary representations; tree graphs,COMPUTER AIDED DESIGN; COMPUTER AIDED ENGINEERING; COMPUTATIONAL GEOMETRY; OBJECT MODELING; SOLID OBJECT REPRESENTATION; COMPUTER GRAPHICS
"An Experimental Comparison of RGB, YIQ, LAB, HSV, and Opponent Color Models",1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023326526&doi=10.1145%2f31336.31338&partnerID=40&md5=c7dc3507d1cda94fa65674e4c4d29e4d,"The increasing availability of affordable color raster graphics displays has made it important to develop a better understanding of how color can be used effectively in an interactive environment. Most contemporary graphics displays offer a choice of some 16 million colors; the user's problem is to find the right color. Folklore has it that the RGB color space arising naturally from color display hardware is user-hostile and that other color models such as the HSV scheme are preferable. Until now there has been virtually no experimental evidence addressing this point. We describe a color matching experiment in which subjects used one of two tablet-based input techniques, interfaced through one of five color models, to interactively match target colors displayed on a CRT. The data collected show small but significant differences between models in the ability of subjects to match the five target colors used in this experiment. Subjects using the RGB color model matched quickly but inaccurately compared with those using the other models. The largest speed difference occurred during the early convergence phase of matching. Users of the HSV color model were the slowest in this experiment, both during the convergence phase and in total time to match, but were relatively accurate. There was less variation in performance during the second refinement phase of a match than during the convergence phase. Two-dimensional use of the tablet resulted in faster but less accurate performance than did strictly one-dimensional usage. Significant learning occurred for users of the Opponent, YIQ, LAB, and HSV color models, and not for users of the RGB color model. © 1987, ACM. All rights reserved.",Color matching; color models; HSV; LAB; Opponent colors; RGB; YIQ,COLOR - Matching; COMPUTER INTERFACES - Human Factors; COLOR MODELS; COMPUTER GRAPHICS
Modeling the Effect of the Atmosphere on Light,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023380670&doi=10.1145%2f35068.35071&partnerID=40&md5=2971efd4b3a90ce02ec8fe15588c653d,"The interaction of light with particles suspended in the air is the cause of some beautiful effects. Among these effects are the colors of the sunset, the blue of the sky, and the appearance of a scene in fog. A lighting model that takes into account the effects of scattering by suspended particles is presented. A method of computing the colors of the sun and sky, for any sun position above the horizon, is derived from the lighting model. The model is also suitable for rendering fog under general lighting conditions. As an example of the use of the model for rendering fog, the special case of fog lit by the sun, without shadows, is considered. © 1987, ACM. All rights reserved.",Fog; image synthesis; lighting interaction; natural sky simulation; scattering,ATMOSPHERIC OPTICS - Mathematical Models; IMAGE PROCESSING - Synthesis; NATURAL SKY SIMULATION; COMPUTER GRAPHICS
Polyhedral subdivision methods for free-form surfaces,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023275476&doi=10.1145%2f27625.27628&partnerID=40&md5=a6cf4ca445bec64329d11292be18b529,"One of the central issues in computer-aided geometric design is the representation of free-form surfaces which are needed for many purposes in engineering and science. Several limitations are imposed on most available surface systems: the rectangularity of the network describing a surface and the manipulation of surfaces without regard to the volume enclosed are examples. Polyhedral subdivision methods suggest themselves as a solution to these problems. Their use, however, is not widespread for several reasons such as the lack of boundary control, and interpolation and interrogation capabilities. In this paper the original work on subdivision methods is extended to overcome these problems. Two methods are described, one for controlling the boundary curves of such surfaces, and another for interpolating points on irregular networks. A general surface/surface intersection algorithm is also provided: seven decisions need to be made in order to specify a particular implementation. The algorithm is also suitable for intersecting other classes of surfaces amongst which are the popular Bézier and B-spline surfaces. © 1987, ACM. All rights reserved.",B-splines; free-form surfaces; polyhedral subdivision,COMPUTER PROGRAMMING - Algorithms; MATHEMATICAL TECHNIQUES - Numerical Methods; COMPUTATIONAL GEOMETRY; OBJECT MODELLING; SPLINES; COMPUTER GRAPHICS
Corrigendum: Ray tracing generalized cylinders,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976674754&doi=10.1145%2f35068.214383&partnerID=40&md5=d6a0f43549994589f99041c5ea13bfd5,[No abstract available],,
Generalized Stochastic Subdivision,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023381233&doi=10.1145%2f35068.35069&partnerID=40&md5=f396648100cf28fd4d358038f22344a8,"Stochastic techniques have assumed a prominent role in computer graphics because of their success in modeling a variety of complex and natural phenomena. This paper describes the basis for techniques such as stochastic subdivision in the theory of random processes and estimation theory. The popular stochastic subdivision construction is then generalized to provide control of the autocorrelation and spectral properties of the synthesized random functions. The generalized construction is suitable for generating a variety of perceptually distinct high-quality random functions, including those with non-fractal spectra and directional or oscillatory characteristics. It is argued that a spectral modeling approach provides a more powerful and somewhat more intuitive perceptual characterization of random processes than does the fractal model. Synthetic textures and terrains are presented as a means of visually evaluating the generalized subdivision technique. © 1987, ACM. All rights reserved.",Fractals; modeling of natural phenomena; stochastic interpolation; stochastic models; texture synthesis,MATHEMATICAL TECHNIQUES - Algorithms; PROBABILITY - Random Processes; FRACTALS; MODELING OF NATURAL PHENOMENA; STOCHASTIC INTERPOLATION; COMPUTER GRAPHICS
A New Local Basis for Designing with Tensioned Splines,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023325863&doi=10.1145%2f31336.31337&partnerID=40&md5=783278c339bc923b3547841e04bf2095,"Recently there has been a great deal of interest in the use of “tension” parameters to augment control mesh vertices as design handles for piecewise polynomials. A particular local cubic basis called B-splines, which has been termed a “generalization of B-splines, v has been proposed as an appropriate basis. These functions are defined only for floating knot sequences. This paper uses the known property of B-splines that with appropriate knot vectors span what are called here spaces of tensioned splines, and that particular combinations of them, called LT-splines, form bases for the spaces of tensioned splines. In addition, this paper shows that these new proposed bases have the variation diminishing property, the convex hull property, and straightforward knot insertion algorithms, and that both curves and individual basis functions can be easily computed. Sometimes it is desirable to interpolate points and also use these tension parameters, so interpolation methods using the LT-spline bases are presented. Finally, the above properties are established for uniform and nonuniform knot vectors, open and floating end conditions, and homogeneous and nonhomogeneous tension parameter pairs. © 1987, ACM. All rights reserved.",B-splines; CAGD; convex hull property; geometric continuity; knot insertion; v-splines; variation diminishing property; visual continuity,MATHEMATICAL TECHNIQUES - Interpolation; COMPUTATIONAL GEOMETRY; SOLID MODELING; TENSIONED SPLINES; COMPUTER GRAPHICS
The incrementor: A graphical technique for manipulating parameters,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023175155&doi=10.1145%2f27625.214381&partnerID=40&md5=a424cf2d3f5995f89710a50ad44a5eb7,[No abstract available],,COMPUTER INTERFACES - Human Factors; COMPUTER SYSTEMS PROGRAMMING - Input Output Programs; VISUAL PROGRAMMING; COMPUTER GRAPHICS
Weighted Bicubic Spline Interpolation to Rapidly Varying Data,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023254591&doi=10.1145%2f27625.27626&partnerID=40&md5=8e6e16e59d56a60f0b8e6a07689f3dd9,"The weighted bicubic spline that is a C1 piecewise bicubic interpolant to three-dimensional gridded data is introduced. This is a generalization of the univariate weighted spline, developed by Salkauskas, in that a weighted minimization problem is solved. The minimization problem solved is a weighted version of the problem that the natural bicubic spline and Gordon's spline-blended interpolants minimize. The surface is represented as a piecewise bicubic Hermite interpolant whose derivatives are the solution of a linear system of equations. For computer-aided-design applications, the shape of the surface is controlled by weighting the variation over the individual patches, whereas many other shape-control methods weight the discrete data points. A method for selecting the weights is presented so that the weighted bicubic spline effectively solves the important and often difficult problem of interpolating rapidly varying data. © 1987, ACM. All rights reserved.",Bicubic splines; bivariate interpolation; computer-aided design,MATHEMATICAL TECHNIQUES - Numerical Methods; COMPUTATIONAL GEOMETRY; OBJECT MODELING; SPLINES; COMPUTER GRAPHICS
Worst-Case Optimal Hidden-Surface Removal,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023174723&doi=10.1145%2f27625.27627&partnerID=40&md5=d28f155cc010d5db4ed129655dabf634,"An O(n2) hidden-surface removal algorithm is shown. This is an improvement over the previous best worst-case performance of O(n2 log n). It has been established that the hidden-line and hidden-surface problems have an Ω(n2) worst-case lower bound, so the algorithm is optimal. However, the algorithm is not output-size sensitive. Two corollaries to the result are (1) hidden-lines can be removed in optimal O(n2) time, and (2) the portion of a 3-D polyhedron visible from a given interior point is constructible in optimal O(n2) time. © 1987, ACM. All rights reserved.",Arrangements of lines; geometric complexity; hidden-line removal; hidden-surface removal; topological sweep; visibility algorithms; visibility polyhedron,COMPUTER GRAPHICS - Applications; ANALYSIS OF ALGORITHMS; COMPLEXITY OF ALGORITHMS; COMPUTATIONAL GEOMETRY; HIDDEN-SURFACE REMOVAL; COMPUTER PROGRAMMING
Modeling and Rendering Waves: Wave-Tracing Using Beta-Splines and Reflective and Refractive Texture Mapping,1987,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0023379996&doi=10.1145%2f35068.35070&partnerID=40&md5=40d989d24c8fc2726969acbbdd75c2ef,"The graphical simulation of a certain subset of hydrodynamics phenomena is examined. New algorithms for both modeling and rendering these complex phenomena are presented. The modeling algorithms deal with wave refraction in an ocean. Waves refract in much the same way as light. In both cases, the equation that controls the change in direction is Snell's law. Ocean waves are continuous but can be discretely decomposed into wave rays or wave orthogonals. These wave orthogonals are wave-traced in a manner similar to the rendering algorithm of ray-tracing. The refracted wave orthogonals are later traversed and their height contributions to the final surface are calculated using a sinusoidal shape approximation and the principle of wave superposition. The surface is then represented by Beta-splines, using the tension (or β2) shape parameter to easily add more complexity to the surface. The rendering algorithms are based on the use of texture maps and Fresnel's law of reflection. In each algorithm, two texture maps are used to simulate reflection and refraction. Based on surface normal orientation and Fresnel's law, a weighting is calculated that determines what fractions of reflected color and refracted color are assigned to a point. These algorithms are more efficient, though less accurate, alternatives to standard ray-tracing techniques. © 1987, ACM. All rights reserved.",Beta-splines; Fresnel; hydrodynamics; texture mapping; wave refraction; wave-tracing; waves,HYDRODYNAMICS - Mathematical Models; MATHEMATICAL TECHNIQUES - Algorithms; BETA-SPLINES; COMPUTATIONAL GEOMETRY; TEXTURE MAPPING; COMPUTER GRAPHICS
A Survey of Three Dialogue Models,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022753706&doi=10.1145%2f24054.24057&partnerID=40&md5=a557562f5b420a43efaf641cb48f34a9,"A dialogue model is an abstract model that is used to describe the structure of the dialogue between a user and an interactive computer system. Dialogue models form the basis of the notations that are used in user interface management systems (UIMS). In this paper three classes of dialogue models are investigated. These classes are transition networks, grammars, and events. Formal definitions of all three models are presented, along with algorithms for converting the notations into an executable form. It is shown that the event model has the greatest descriptive power. Efficient algorithms for converting from the transition diagram and grammar models to the event model are presented. The implications of these results for the design and implementation of UIMSs are also discussed. © 1986, ACM. All rights reserved.",Dialogue models; human-computer interaction; user interface management,AUTOMATA THEORY - Finite Automata; COMPUTER GRAPHICS - Applications; COMPUTER INTERFACES - Human Factors; COMPUTATION BY ABSTRACT DEVICES; DIALOG MODELS; HUMAN-COMPUTER INTERACTION; USER INTERFACE MANAGEMENT; COMPUTER SOFTWARE
Automating the Design of Graphical Presentations of Relational Information,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022700207&doi=10.1145%2f22949.22950&partnerID=40&md5=4c5d29aa7ae6f6b476e07d0a54417bf3,"The goal of the research described in this paper is to develop an application-independent presentation tool that automatically designs effective graphical presentations (such as bar charts, scatter plots, and connected graphs) of relational information. Two problems are raised by this goal: The codification of graphic design criteria in a form that can be used by the presentation tool, and the generation of a wide variety of designs so that the presentation tool can accommodate a wide variety of information. The approach described in this paper is based on the view that graphical presentations are sentences of graphical languages. The graphic design issues are codified as expressiveness and effectiveness criteria for graphical languages. Expressiveness criteria determine whether a graphical language can express the desired information. Effectiveness criteria determine whether a graphical language exploits the capabilities of the output medium and the human visual system. A wide variety of designs can be systematically generated by using a composition algebra that composes a small set of primitive graphical languages. Artificial intelligence techniques are used to implement a prototype presentation tool called APT (A Presentation Tool), which is based on the composition algebra and the graphic design criteria. © 1986, ACM. All rights reserved.",Automatic generation; composition algebra; effectiveness; expressiveness; graphic design; information presentation; presentation tool; user interface,ARTIFICIAL INTELLIGENCE - Expert Systems; COMPUTER SOFTWARE - Software Engineering; DATABASE SYSTEMS - Relational; INFORMATION RETRIEVAL SYSTEMS - Human Factors; HUMAN INFORMATION PROCESSING; COMPUTER GRAPHICS
MIKE: The Menu Interaction Kontrol Environment,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022797996&doi=10.1145%2f27623.28868&partnerID=40&md5=6aa85a3e559b29e6664ddb36c9308b97,"A User Interface Management System (UIMS) called MIKE that does not use the syntactic specifications found in most UIMSs is described. Instead, MIKE provides a default syntax that is automatically generated from the definition of the semantic commands that the interaction is to support. The default syntax is refined using an interface editor that allows modification of the presentation of the interface. It is shown how active pictures can be created by adding action expressions to the viewports of MIKE's windowing system. The implications of MIKE's command-based dialogue description are discussed in terms of extensible interfaces, device and dialogue-style independence, and system support functions. © 1986, ACM. All rights reserved.",Dialogue design tools; human-computer interfaces; User Interface Management Systems,COMPUTER GRAPHICS - Interactive; COMPUTER INTERFACES - Human Factors; USER-INTERFACE MANAGEMENT SYSTEM (UIMS); COMPUTER SOFTWARE
"Supporting Concurrency, Communication, and Synchronization in Human-Computer Interaction—The Sassafras UIMS",1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022755463&doi=10.1145%2f24054.24055&partnerID=40&md5=818182e6834972c19c3dcbfad704493b,"Sassafras is a prototype User Interface Management System (UIMS) specifically designed to support a wide range of user interface styles. In particular, it supports the implementation of user interfaces where the user is free to manipulate multiple input devices and perform several (possibly related) tasks concurrently. These interfaces can be compactly represented and efficiently implemented without violating any of the rules of well-structured programming. Sassafras also supports elaborate run-time communication and synchronization among the modules that make up the user interface. This is needed to implement user interfaces that have context-sensitive defaults, and it simplifies recovery from semantic errors. Sassafras is based on a new language for specifying the syntax of human-computer dialogues known as Event-Response Language (ERL) and a new run-time structure and communication mechanism for UIMSs known as the Local Event Broadcast Method (LEBM). Both ERL and LEBM are described in detail, and implementation techniques are presented. The effectiveness of Sassafras is demonstrated by describing two interfaces that have been implemented with Sassafras. © 1986, ACM. All rights reserved.",Concurrency; message passing; user interface management systems; user interfaces,COMPUTER INTERFACES - Human Factors; COMPUTER SOFTWARE - Software Engineering; HUMAN-COMPUTER INTERACTION; SASSAFRAS UIMS; USER INTERFACE MANAGEMENT SYSTEM (UIMS); COMPUTER GRAPHICS
Rooms: The Use of Multiple Virtual Workspaces to Reduce Space Contention in a Window-Based Graphical User Interface,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022753251&doi=10.1145%2f24054.24056&partnerID=40&md5=ca29f77c67f084305873f1da345495cd,"A key constraint on the effectiveness of window-based human-computer interfaces is that the display screen is too small for many applications. This results in “window thrashing,” in which the user must expend considerable effort to keep desired windows visible. Rooms is a window manager that overcomes small screen size by exploiting the statistics of window access, dividing the user's workspace into a suite of virtual workspaces with transitions among them. Mechanisms are described for solving the problems of navigation and simultaneous access to separated information that arise from multiple workspaces. © 1986, ACM. All rights reserved.",Bounded locality interval; desktop; locality set; project views; resource contention; Rooms; virtual workspace windows; window manager; working set,COMPUTER GRAPHICS - Applications; COMPUTER INTERFACES - Human Factors; ERGONOMICS; HUMAN INFORMATION PROCESSING; WINDOW-BASED SYSTEMS; COMPUTER OPERATING SYSTEMS
Constraint-Based Tools for Building User Interfaces,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022801659&doi=10.1145%2f27623.29354&partnerID=40&md5=21efce305ce838b1accfe90085879242,"A constraint describes a relation that must be maintained. Constraints provide a useful mechanism to aid in the construction of interactive graphical user interfaces. They can be used to maintain consistency between data and a view of the data, to maintain consistency among multiple views, to specify layout, and to specify relations between events and responses for describing animations of interactive systems and event-driven simulations. Object-oriented techniques for constraint representation and satisfaction are presented, and a range of examples that demonstrate the practical use of static and temporal constraints for such purposes is presented. These examples include animations of algorithms and physics simulations, and constructing user-interface elements such as file browsers, views onto statistical data, and an interactive monitor or a simulated operating system. © 1986, ACM. All rights reserved.",Animation; consistency of multiple views; constraint satisfaction; constraints; graphical programming; object-oriented programming; temporal constraints; user interfaces; userinterface management systems,COMPUTER GRAPHICS - Applications; COMPUTER INTERFACES - Human Factors; COMPUTER PROGRAMMING LANGUAGES; NONPROCEDURAL PROGRAMMING LANGUAGES; OBJECT-ORIENTED PROGRAMMING; COMPUTER SOFTWARE
The X Window System,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022705379&doi=10.1145%2f22949.24053&partnerID=40&md5=bfe833c83b69c66afc4cb40539aaacd1,"An overview of the X Window System is presented, focusing on the system substrate and the low-level facilities provided to build applications and to manage the desktop. The system provides high-performance, high-level, device-independent graphics. A hierarchy of resizable, overlapping windows allows a wide variety of application and user interfaces to be built easily. Network-transparent access to the display provides an important degree of functional separation, without significantly affecting performance, which is crucial to building applications for a distributed environment. To a reasonable extent, desktop management can be custom-tailored to individual environments, without modifying the base system and typically without affecting applications. © 1986, ACM. All rights reserved.",Virtual terminals; window managers; window systems,"COMPUTER GRAPHICS; COMPUTER INTERFACES - Human Factors; COMPUTER NETWORKS - Applications; COMPUTER-COMMUNICATION NETWORKS; WINDOW SYSTEMS; COMPUTERS, DIGITAL"
A Specification Language for Direct-Manipulation User Interfaces,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022798111&doi=10.1145%2f27623.27624&partnerID=40&md5=5de3b8272edeff0a93179bfc36b7933f,"A direct-manipulation user interface presents a set of visual representations on a display and a repertoire of manipulations that can be performed on any of them. Such representations might include screen buttons, scroll bars, spreadsheet cells, or flowchart boxes. Interaction techniques of this kind were first seen in interactive graphics systems; they are now proving effective in user interfaces for applications that are not inherently graphical. Although they are often easy to learn and use, these interfaces are also typically difficult to specify and program clearly. Examination of direct-manipulation interfaces reveals that they have a coroutine-like structure and, despite their surface appearance, a peculiar, highly moded dialogue. This paper introduces a specification technique for direct-manipulation interfaces based on these observations. In it, each locus of dialogue is described as a separate object with a single-thread state diagram, which can be suspended and resumed, but retains state. The objects are then combined to define the overall user interface as a set of coroutines, rather than inappropriately as a single highly regular state transition diagram. An inheritance mechanism for the interaction objects is provided to avoid repetitiveness in the specifications. A prototype implementation of a user-interface management system based on this approach is described, and example specifications are given. © 1986, ACM. All rights reserved.",Direct manipulation; specification language; state transition diagram; user-interface management system (UIMS),COMPUTER GRAPHICS - Applications; COMPUTER INTERFACES - Human Factors; PROGRAM SPECIFICATION TECHNIQUES; USER-INTERFACE MANAGEMENT SYSTEMS (UIMS); COMPUTER SOFTWARE
An Object-Oriented Approach to Graphical Interfaces,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022702534&doi=10.1145%2f22949.22951&partnerID=40&md5=35e176ed94eeb8a2dd0f7757033ea22e,"An object-oriented system for building graphical interfaces to programs is discussed. The system, called GROW, facilitates the process of creating interfaces that are highly interactive (including direct manipulation and animation), rich in layout structure, and effectively reusable across applications. These properties are achieved through three techniques: object-based graphics with taxonomic inheritance, interobject relationships such as composition and graphical dependency, and separation of the interface and application. Experience with interfaces for several applications has provided insights on the effectiveness of these techniques. First, object-oriented programming yields significant leverage on specializing and reusing interfaces. Second, layout constraints (such as maintaining the connectivity of a graph) can be managed with simple data dependencies among the attributes of the graphical objects. Finally, separating the interface and application is essential to reusing interface components. This paper describes the techniques in detail, gives examples of interfaces built with GROW, and summarizes experiences using GROW with a variety of applications. © 1986, ACM. All rights reserved.",constraints; graphical interfaces; object-oriented graphics; software reusability,COMPUTER INTERFACES; EXTENSIBLE PROGRAMMING LANGUAGES; GRAPHICAL OBJECT WORKBENCH (GROW); OBJECT-ORIENTED GRAPHICS; SOFTWARE REUSABILITY; COMPUTER GRAPHICS
Stochastic sampling in computer graphics,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022519813&doi=10.1145%2f7529.8927&partnerID=40&md5=23c0aa2056ecd86da376b520bfa82e04,"Ray tracing, ray casting, and other forms of point sampling are important techniques in computer graphics, but their usefulness has been undermined by aliasing artifacts. In this paper it is shown that these artifacts are not an inherent part of point sampling, but a consequence of using regularly spaced samples. If the samples occur at appropriate nonuniformly spaced locations, frequencies above the Nyquist limit do not alias, but instead appear as noise of the correct average intensity. This noise is much less objectionable to our visual system than aliasing. In ray tracing, the rays can be stochastically distributed to perform a Monte Carlo evaluation of integrals in the rendering equation. This is called distributed ray tracing and can be used to simulate motion blur, depth of field, penumbrae, gloss, and translucency. © 1986, ACM. All rights reserved.",Antialiasing; filtering; image synthesis; Monte Carlo integration; motion blur; raster graphics; ray tracing; sampling; stochastic sampling,IMAGE PROCESSING - Reconstruction; MATHEMATICAL TECHNIQUES - Algorithms; STOCHASTIC SAMPLING; THREE-DIMENSIONAL GRAPHICS; COMPUTER GRAPHICS
An experimental evaluation of computer graphics imagery,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0022506348&doi=10.1145%2f7529.7920&partnerID=40&md5=ef37e1b01bef4d9aee5c26acc914553c,"Accurate simulation of light propagation within an environment and perceptually based imaging techniques are necessary for the creation of realistic images. A physical experiment that verifies the simulation of reflected light intensities for diffuse environments was conducted. Measurements of radiant energy flux densities are compared with predictions using the radiosity method for those physical environments. By using color science procedures the results of the light model simulation are then transformed to produce a color television image. The final image compares favorably with the original physical model. The experiment indicates that, when the physical model and the simulation were viewed through a view camera, subjects could not distinguish between them. The results and comparison of both test procedures are presented within this paper. © 1986, ACM. All rights reserved.",Color science; image science; light reflection models; radiosity,ARTIFICIAL INTELLIGENCE - Applications; COMPUTER INTERFACES - Human Factors; IMAGE PROCESSING - Image Analysis; SCENE ANALYSIS; COMPUTER GRAPHICS
Boolean operations of 2-manifolds through vertex neighborhood classification,1986,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84976795971&doi=10.1145%2f7529.7530&partnerID=40&md5=d9c723d563f28eac12cfe62f38d42357,"A topologically complete set operations algorithm for planar polyhedral Z-manifold objects is described; that is, under the assumption that all numerical tests required can be correctly evaluated, the algorithm is capable of solving all “special cases.” The central component of the algorithm is a module here called the vertex neighborhood classifier. By virtue of the classifier, the various special cases can be reduced into a collection of classification problems involving a pair of coincident vertices. The classifier works by means of decision rules that guarantee the topological consistency and regularity of the resulting polyhedron. If the result is not a 2-manifold, a relaxed polyhedron will be produced. © 1986, ACM. All rights reserved.",Boolean operations; set operations; shape operations; solid modeling,
Shading Models for Point and Linear Sources,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-48149103402&doi=10.1145%2f282918.282938&partnerID=40&md5=d3933561e8b0af623a900009a8ae2709,"The degree of realism of the shaded image of a tree-dimensional scene depends on the successful simulation of shading effects. The shading model has two main ingredients, properties of the surface and properties of the illumination falling on it. Most previous work has concentrated on the former rather than the latter. This paper presents an improved version for generating scenes illuminated by point and linear light sources. The procedure can include intensity distributions for point light sources and output both umbrae and penumbrae for linear light sources, assuming thr environment is composed of convex polyhedra. This paper generalizes Crow's procedure for computing shadow volumes caused by the end points of the linear source results in an easy determination of the reions of penumbrae and umbrae on the face prior to shading calculation. This paper also discusses a method for displaying illuminance distribution on a shaded image aby using colored isolux contours. © 1985, ACM. All rights reserved.",Lighting simulation; luminous intensity distribution,Lighting; Convex polyhedrons; Illuminance distribution; Intensity distribution; Lighting simulation; Linear light source; Luminous intensity distributions; Point light source; Three-dimensional scenes; Light sources
Primitives for the Manipulation of General Subdivisions and the Computation of Voronoi,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942026338&doi=10.1145%2f282918.282923&partnerID=40&md5=611765ff5be7a0cc5e042923f06423ea,"The following problem is discussed: given n points in the plane (the sites) and an arbitrary query point q, find the site that is closest to q. This problem can be solved by constructing the Voronoi diagram of the griven sites and then locating the query point inone of its regions. Two algorithms are given, one that constructs the Voronoi diagram in O(n log n) time, and another that inserts a new sit on O(n) time. Both are based on the use of the Voronoi dual, or Delaunay triangulation, and are simple enough to be of practical value. the simplicity of both algorithms can be attributed to the separation of the geometrical and topological aspects of the problem and to the use of two simple but powerful primitives, a geometric predicate and an operator for manipulating the topology of the diagram. The topology is represented by a new data structure for generalized diagrams, that is, embeddings of graphs in two-dimensional manifolds. This structure represents simultaneously an embedding, its dual, and its mirror image. Furthermore, just two operators are sufficients for building and modifying arbitrary diagrams. © 1985, ACM. All rights reserved.",closest point; computational topology; convex hull; Euler operators; geometric primitives; nearest neighbours; planar graphs; point location; representation of polynedra; trianglations; Voronoi and Delaunay diagrams,Computational geometry; Geometry; Query processing; Surveying; Topology; Triangulation; Closest point; Computational topology; Convex hull; Euler operators; Geometric primitives; Nearest neighbors; Planar graph; Point location; Representation of polyhedra; Voronoi; Graphic methods
The Application of Scene Synthesis Techniques to the Display of Multidimensional Image Data,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84919155309&doi=10.1145%2f6116.6117&partnerID=40&md5=10ae5c62a5c75a86ef10b23c87eab3c5,"Superimposition of two image data sets allows the spatial distribution of one to be directly related to that of the other. If the two data sets have different spatial structures, the composite image is generally confusing and difficult to interpret. A method of representing image data sets in the form of naturally occurring variables in a realistic apparently three-dimensional scene is presented. One data set is represented by the topography of a surface, depicted by shaded-relief methods, while another is represented by the color of the surface, or by the color of an overlaid transparency. Presentation in this form exploits the normal scene decomposition abilities of the human visual system, allowing intuitive appreciation and separation of the scene, and hence data set, variables. The method relies on techniques for the modeling of surfaces and surface reflectance to render the synthesised scenes realistically. © 1985, ACM. All rights reserved.",Color; computer graphics; image display; scene synthesis,Color; Color computer graphics; Computer graphics; Human Visual System; Image display; Multi-dimensional images; Naturally occurring; Scene decompositions; Surface reflectance; Synthesis techniques; Three-dimensional scenes; Image processing
Illicit Expressions in Vector Algebra,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0000601122&doi=10.1145%2f282957.282969&partnerID=40&md5=5b2283091c209e4284aba5d5a5844aae,"In vector geometry there are 2 distinct types of entities: points P, Q, R … and vectors u, v, w … Generally, the operattions of vector algebra —addition, subtraction, scalar multiplication, dot product, and cross product—are intrinsically defined only for vectors, not for points. Yet illicit expressions containing terms like P + Q, cP, P X Q, etc. often appear in graphics textbooks, papers, and programs. In this paper we justify the use of such illicit expressions, and we we give criteria for recognizing when such an expression is truly legitimate. In particular we show that an algebraic expression E(P1, …, Pn) is legitimate if and only if E(v1 + w, …vn + w) = E(v1, …, vn) + kw, k + 0, 1. We also derive many useful examples of such an expression. © 1985, ACM. All rights reserved.",vector algebra; vector geometry,Algebra; Algebraic expression; Cross product; Scalar multiplication; Vector algebra; Vector geometry; Vectors
Markov Chains and Computer Aided Geometric Design: Part II—Examples and Subdivision Matrices,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942026861&doi=10.1145%2f3973.3974&partnerID=40&md5=616705684865596ad68809ab6f27095b,"In Part I, Markov chains were shown to be associated with solutions to several standard problems in computer-aided geometric design. Constraints on these Markov chains were also derived. Examples are given here of Markov chains that either satisfy some of these constraints or solve one of these problems. Subdivision matrices are also studied in special detail. © 1985, ACM. All rights reserved.",Markov chain; probability distribution; stochastic process,Chains; Computer aided design; Probability distributions; Random processes; Stochastic systems; Computer aided geometric designs; Standard problems; Markov processes
Incremental Linear Interpolation,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0041138273&doi=10.1145%2f3973.3976&partnerID=40&md5=a4beddab727e59f14eaf9d5529c84089,"Two incremental linear interpolation algorithms are derived and analyzed for speed and accuracy. The first is a version of a “simple” digital differential analyzer (DDA) employing fixed-point arithmetic, whereas the second is a new algorithm that uses only integral arithmetic and is a generalization of Bresenham's line-drawing algorithm. The new algorithm is shown to achieve perfect accuracy and, depending on the underlying processor, may be faster than the fixed-point algorithm. © 1985, ACM. All rights reserved.",Bresenham's algorithm; digital differential analyzer; scan conversion,Digital differential analyzers; Fixed point arithmetic; Interpolation; Bresenham's algorithm; Fixed-point algorithms; Line drawing algorithms; Linear Interpolation; Linear interpolation algorithms; Scan conversion; Algorithms
Curve-Drawing Algorithms for Raster Displays,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0005431138&doi=10.1145%2f282918.282943&partnerID=40&md5=92e4059a3304f51489c305401ac86fa3,"The midpoint method for deriving efficient scan-conversion algorithms to draw geometric curves on raster displays in described. The method is general and is used to transform the nonparametric equation f(x,y) = 0, which describes the curve, into an algorithms that draws the curve. Floating point arithmetic and time-consuming operations such as multiplies are avoided. The maximum error of the digital approximation produced by the algorithm is one-half the distance between two adjacent pixels on the display grid. The midpoint method is compared with the two-point method used by Bresenham, and is seen to be more accurate (in terms of the linear error) in the general case, without increasing the amount of computation required. The use of the midpoint method is illustrated with examples of lines, circles, and ellipses. The considerzations involved in using the method to derive algorithms for drawing more general classes of curves are discussed. © 1985, ACM. All rights reserved.",curver representations; display algorithms,Approximation algorithms; Adjacent pixels; Curve drawings; Curve representations; Display algorithm; General class; Midpoint method; Non-parametric; Scan-conversion algorithm; Algorithms
Geometric Structures for Three-Dimensional Shape Representation,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84913415905&doi=10.1145%2f357346.357349&partnerID=40&md5=4744272bb9b19ddf18b3f88bdee5bef1,[No abstract available],,Surveying; Triangulation; Delau-nay triangulations; Geometric structure; K-d tree; Minimal representation; Polyhedra; Space requirements; Surface-based methods; Three-dimensional shape; Geometry
Projective Transformations of the Parameter of a Bernstein-Bézier Curve,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0006910710&doi=10.1145%2f6116.6119&partnerID=40&md5=0f2f7357c8b689d3410f5f76309ff56d,"The definitions of polynomial and rational Bernstein-Bézier curves are reviewed and extended to include homogeneous parametrizations. Then the effects of a projective transformation of the parameter space are described in terms of a group representation. This representation is used to answer the following questions: (1) If the control points are held fixed, when do two different sets of weights determine the same rational curve? (2) How do we find the control points for a subdivision of the original curve?. © 1985, ACM. All rights reserved.",Bernstein-BéZier curves; control points; projective geometry; rational curves; subdivision; weights,Curve fitting; Control point; Projective geometry; Rational curves; Subdivision; Weights; Three dimensional computer graphics
Guest Editor's Introduction to Special Issue on Computational Geometry,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942025688&doi=10.1145%2f357346.357347&partnerID=40&md5=c6ab8a850b7d3461cd1b6c7a23d02bbe,[No abstract available],,
Storing a Collection of Polygons Using Quadtrees,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0001511452&doi=10.1145%2f282957.282966&partnerID=40&md5=f1f2266cc03145334a9652e7caf8b4cf,"An adaptation of the quadtree data structure that represents polygonal maps (i.e., collections of polygons, possibly containing holes) is described ina manner that is also useful for the manipulation of arbitrary collections of straight line segments. The gol is to store these maps without the loss of information that results from digitization, and to obtain a worst-case execution time that is not overly sensitive to the positioning of the map. A regular decomposition variant of the region quadtree is used to organize the vertices and edges of the maps. A number of related data organizations are proposed in an iterative manner until a method is obtained that meets the stated goals. The result is termed a PM (polygonal map) quadtree and is based on a regular decomposition point space quadtree (PR quadtree) that stores additional information about the edges at its terminal nodes. Algorithms are given for inserting and deleting line segments from a PM quadtree. Use of the PM quadtree to perform point location, dynamic line insertion, and map overlay is discussed. The PM quadtree is compared conceptually to the K-structure and the layered dag with respect to typical cartographic data. An empirical comparison of the PM quadtree with other quadtree-based representations for polygonal maps is also provided. © 1985, ACM. All rights reserved.",geographic information; hierarchical data structures; line representations; map overlay; polygonal representations; quadtrees,Data structures; Iterative methods; Geographic information; Hierarchical data structure; Line representations; Map overlay; Polygonal representation; Quad trees; Mapping
Object Representation by Means of Nonminimal Division Quadtrees and Octrees,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942019773&doi=10.1145%2f3973.3975&partnerID=40&md5=4f7b37a3082a2f1a53df92f2e7f7ca26,"Quadtree representation of two-dimensional objects is performed with a tree that describes the recursive subdivision of the more complex parts of a picture until the desired resolution is reached. At the end, all the leaves of the tree are square cells that lie completely inside or outside the object. There are two great disadvantages in the use of quadtrees as a representation scheme for objects in geometric modeling system: The amount of memory required for polygonal objects is too great, and it is difficult to recompute the boundary representation of the object after some Boolean operations have been performed. In the present paper a new class of quadtrees, in which nodes may contain zero or one edge, is introduced. By using these quadtrees, storage requirements are reduced and it is possible to obtain the exact backward conversion to boundary representation. Algorithms for the generation of the quadtree, Boolean operations, and recomputation of the boundary representation are presented, and their complexities in time and space are discussed. Three-dimensional algorithms working on octrees are also presented. Their use in the geometric modeling of three-dimensional polyhedral objects is discussed. © 1985, ACM. All rights reserved.",Geometric modeling; octrees; quadtrees,Algorithms; Geometry; Forestry; Boundary representations; Geometric modeling; Object representations; Octrees; Quad trees; Representation schemes; Three dimensional algorithm; Two-dimensional objects; Geometry
Ray Tracing Generalized Cylinders,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0000917068&doi=10.1145%2f6116.6118&partnerID=40&md5=89baaea2195bed1009f951c5e0da75f7,"An algorithm is presented for ray tracing generalized cylinders, that is, objects defined by sweeping a two-dimensional contour along a three-dimensional trajectory. The contour can be any 'well-behaved’ curve in the sense that it is continuous, and that the points where the tangent is horizontal or vertical can be determined, the trajectory can be any spline curve. First a definition is given of generalized cylinders in terms of the Frenet frame of the trajectory. Then the main problem in ray tracing these objects, the computation of the intersection points with a ray, is reduced to the problem of intersecting two two-dimensional curves. This problem is solved by a subdivision algorithm. The three-dimensional normal at the intersection point closest to the eye point, necessary to perform shading, is obtained by transforming the two-dimensional normal at the corresponding intersection point of the two two-dimensional curves. In this way it is possible to obtain highly realistic images for a very broad class of objects. © 1985, ACM. All rights reserved.",Frenet frame; generalized cylinders; image synthesis; raster graphics; ray tracing; solid modeling; splines,Algorithms; Cylinders (shapes); Splines; Trajectories; Frenet frame; Generalized cylinders; Image synthesis; Raster graphics; Solid model; Ray tracing
Automatic Finite-Element Mesh Generation from Geometric Models—A Point-Based Approach,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-5544328108&doi=10.1145%2f357346.357350&partnerID=40&md5=87a90415fa4c1699164e58f60ec0839a,[No abstract available],,Algorithms; Geometry; Mesh generation; Constructive solid geometry; Finite element mesh generations; Geometric definition; Geometric modeling; Mesh construction; Point based approaches; Point distribution; Quadrilateral elements; Finite element method
Convex Decomposition of Simple Polygons,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84910857944&doi=10.1145%2f357346.357348&partnerID=40&md5=33115881f9cdcb1c0e6aa55f3c1a08ae,[No abstract available],,Algorithms; Geometry; Complexity; Geometric modeling; Geometrical convexity; Point set; Polygons; Region decomposition; Computational geometry
The Window Controller,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942021264&doi=10.1145%2f357346.357351&partnerID=40&md5=8c16e5e4193ee963493f0cea628a12b7,[No abstract available],,
Algorithms for Degree-Raising of Splines,1985,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0042506597&doi=10.1145%2f282957.282962&partnerID=40&md5=2ef60b4a2ef797547c28632d133f0f7e,"Stable and efficient algorithms for degree-raising of curves (or surfaces) represented as arbitrary B-splines are presented as a application of the solution to the theoretical problem of rewriting a curve written as a linear combination of mth order B-splines as a linear combination of (m + 1)st order B-splines with a minimal number of knot insertions. This approach can be used to introduce additional degrees of freedom to a curve (or surface), a problem which naturally arises in certain circumstances in constructing mathematical models for computer-aided geometric design. © 1985, ACM. All rights reserved.",B-splines; degree-rasing approach; subdivision approach,Algorithms; Computer aided design; Degrees of freedom (mechanics); B splines; Computer aided geometric designs; Degree-raising approach; Knot insertion; Linear combinations; Subdivision approach; Interpolation
Ray tracing objects defined by sweeping planar cubic splines,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0000909001&doi=10.1145%2f3870.3875&partnerID=40&md5=6e27c255289df09855d6882e189ab6b6,[No abstract available],,Interpolation; Cubic spline; Exact calculations; Image synthesis; Improving efficiency; Raster graphics; Solid model; Sweeping; Ray tracing
The Brush-Trajectory Approach to Figure Specification: Some Algebraic Solutions,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0010594286&doi=10.1145%2f357337.357339&partnerID=40&md5=c18f4459b1bf938b88610fc00a281786,"The brush-trajectory method, a very natural scheme for describing two-dimensional shapes used in graphic arts and typesetting applications, has been used in only a few systems largely owing to the computational complexity involved in transforming such descriptions into raster bit maps. This paper addresses the problem. For some specific brushes and trajectories we derive algebraic solutions for describing the resulting outlines. The result of dynamic transformations on the brush as it moves along the trajectory is also studied. A special closed, smooth, convex brush defined by a Jburth-order parametric equation is introduced to describe more complex shapes. An algorithmic solution to determining the outlines for an unconstrained brush is then presented. Finally, we present some ideas on a canonical brush and its use in solving the inverse problem, that is, determininl, the brushtrajectory description from given outlines. © 1984, ACM. All rights reserved.",Bit-map coding; brush-trajeciory coding; contour coding; deconvolution; supporting line,Algebra; Codes (symbols); Deconvolution; Trajectories; Algebraic solution; Algorithmic solutions; Bit maps; Contour coding; Dynamic transformation; Parametric equation; Supporting line; Trajectory approach; Inverse problems
A New Point-Location Algorithm and its Practical Efficiency—Comparison with Existing Algorithms,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0346233742&doi=10.1145%2f357337.357338&partnerID=40&md5=8a41a1174049fa114601462bc28cf141,"The point-location problem is stated as follows: Given a subdivision of the plane by a straight line planer graph G with n vertices and an arbitrary query point Q, determine which region of the subdivision contains Q. A new practical point-location algorithm is proposed. It has 0(1) search time, O(n) space, and O(n) preprocessing time in the average case. Existing point-location algorithms, as well as the one proposed here, have been implemented in FORTRAN, and their practical efficiencies are investigated by computational experiments on several planar subdivisions defined by graphs with 200-4000 vertices. It is shown that our 0(1) search-time, O(n) space, and O(n) preprocessing-time algorithm is practically the most efficient among the tested algorithms. © 1984, ACM. All rights reserved.",bucketing; Computational complexity; computational geometry; multidimensional search; planar graphs; point location; VLSI design,Computational complexity; Computational geometry; Graph theory; Location; Bucketing; Multidimensional search; Planar graph; Point location; VLSI design; Algorithms
Triangulation and shape-complexity,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0000351241&doi=10.1145%2f357337.357340&partnerID=40&md5=b14bca36c0176849e7e60ffbc7e15fda,"This paper describes a new method for triangulating a simple n-sided polygon. The algorithm runs in time O(n log s), with s ≥ n. The quantity s measures the sinuosity of the polygon, that is, the number of times the boundary alternates between complete spirals of opposite orientation. The value of s is in practice a very small constant, even for extremely winding polygons. Our algorithm is the first method whose performance is linear in the number of vertices, up to within a factor that depends only on the shape-complexity of the polygon. Informally, this notion of shape-complexity measures how entangled a polygon is, and is thus highly independent of the number of vertices. A practical advantage of the algorithm is that it does not require sorting or the use of any balanced tree structure. Aside from the notion of sinuosity, we are also able to characterize a large class of polygons for which the algorithm can be proven to run in O(n log log n) time. The algorithm has been implemented, tested, and empirical evidence has confirmed its theoretical claim to efficiency. © 1984, ACM. All rights reserved.",Divide-and-conquer; shape-complexity; triangulation,Geometry; Surveying; Trees (mathematics); Triangulation; Balanced trees; Divide and conquer; Shape complexity; Algorithms
Triangulating Simple Polygons and Equivalent Problems,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84910836060&doi=10.1145%2f357337.357341&partnerID=40&md5=b7e3f44064f9978492dfa0889f4667f6,"It has long been known that the complexity of triangulation of simple polygons having an upper bound of 0 (n log n) but a lower bound higher than Ω(n) has not been proved yet. We propose here an easily implemented route to the triangulation of simple polygons through the trapezoidization of simple polygons, which is currently done in O(n log n). Then the trapezoidized polygons are triangulated in O(n) time. Both of those steps can be performed on polygons with holes with the same complexity. We also show in this paper that a number of problems, such as the decomposition of simple polygons into convex, star, monotone, spiral, and trapezoidal polygons and the determination of edgevertex visibility, are linearly equivalent to the triangulation problem and therefore share the same lower bound. It is hoped that this will simplify the task of reducing the gap between the lower and upper bound for these problems. © 1984, ACM. All rights reserved.",Decomposition; scan conversion; trapezoid; triangulation,Decomposition; Surveying; Triangulation; Lower and upper bounds; Lower bounds; Polygons with holes; Scan conversion; Simple polygon; Trapezoid; Triangulation problem; Upper Bound; Geometry
Pushdown automata for user interface management,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0012086937&doi=10.1145%2f3870.3871&partnerID=40&md5=745231d9895a23f5a53e108aece72865,[No abstract available],,Automata theory; Semantics; Automata; Dialogue control; Graphical device handling; Input state; Interaction; Interface management; Push-down automata; User interface management systems; User interfaces
Markov chains and computer-aided geometric design: Part I - problems and constraints,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942043391&doi=10.1145%2f3870.3978&partnerID=40&md5=5de68a0c913bebf71cb1222951bc3ba4,[No abstract available],,Blending; Chains; Computer aided design; Geometry; Probability distributions; Random processes; Stochastic systems; Blending function; Computer aided geometric designs; Control point; Geometric problems; Probability theory; Markov processes
Structured Graphics for Distributed Systems,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84910556247&doi=10.1145%2f357332.357334&partnerID=40&md5=549bc60cf2dcfe8ab23ae96daf022090,"One of the most important functions of an intelligent workstation is to provide a state-of-the-art user interface to distributed resources. One aspect of such an interface is virtual terminal support for both localand remote applications with a range of requirements, including graphics. To ensure good response for remote applications, in particular, the bulk of user interaction must be handled local to the workstation. Therefore, the terminal management software on the workstation must provide object modelingas well as viewing facilities, in contrast to most contemporary graphics systems. One way ofdoingthis is to support structured display files. It is equally important to support simultaneous access to multiple applications; thus the terminal management software must provide window system facilities. Lastly, since the terminal management software should present a common interface to both local and remote applications, the workstation itself should be regarded as a multifunction component ofthe distributed system and not strictly as a terminal or a personal computer. This paper presents the system architecture and protocols necessary to achieve these goals and evaluates an existing implementation. © 1984, ACM. All rights reserved.",Structured display files; virtual terminals; window systems,Application programs; Computer workstations; Interface states; Network architecture; Personal computers; User interfaces; Distributed resources; Distributed systems; Intelligent workstation; Multiple applications; Structured display files; System architectures; Virtual Terminals; Window system; Distributed computer systems
Improved Computational Methods for Ray Tracing,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942034385&doi=10.1145%2f357332.357335&partnerID=40&md5=ef79dc20db772b6bce7cbd5e3267280c,"This paper describes algorithmic procedures that have been implemented to reduce the computational expense of producing ray-traced images. The selection of bounding volumes is examined to reduce the computational cost of the ray-intersection test. The use of object coherence, which relies on a hierarchical description of the environment, is then presented. Finally, since the building of the rayintersection trees is such a large portion of the computation, a method using image coherence is described. This visible-surface preprocessing method, which is dependent upon the creation of an “item buffer,” takes advantage of a priori image information. Examples that indicate the efficiency of these techniques for a variety of representative environments are presented. © 1984, ACM. All rights reserved.",Computer graphics; hierarchical data structures; ray tracing; visible-surface algorithms,Algorithms; Computer graphics; Algorithmic procedure; Computational costs; Computational expense; Hierarchical data structure; Hierarchical description; Image information; Pre-processing method; Surface algorithm; Ray tracing
A New Concept and Method for Line Clipping,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942020434&doi=10.1145%2f357332.357333&partnerID=40&md5=fd49c84343e325cc326979a57d317ce4,"A new concept and method for line clipping is developed that describes clipping in an exact and mathematical form. The basic ideas form the foundation for a family of algorithms for twodimensional, three-dimensional, and four-dimensional (homogeneous coordinates) line clipping. The line segment to be clipped is mapped into a parametric representation. From this, a set of conditions is derived that describes the interior of the clipping region. Observing that these conditions are all of similar form, they are rewritten such that the solution to the clipping problem is reduced to a simple max/min expression. For each dimension, the mathematics are discussed, an example is given, the algorithm is designed, and a performance test is conducted. The new algorithm is compared with the traditional Sutherland-Cohen clipping algorithm. Using randomly generated data, the new algorithm showed a 36 percent, 40 percent, and 79 percent improvement for two-dimensional, three-dimensional, and four-dimensional clipping, respectively. One of the advantages of this algorithm is the quick rejection of line segments that are invisible. In addition, this algorithm can be easily generalized for clipping against any convex viewing volume. © 1984, ACM. All rights reserved.",Clipping; line clipping,Algorithms; Clipping; Clipping algorithms; Homogeneous coordinates; Line clipping; Line segment; Mathematical forms; Parametric representations; Performance tests; Computer graphics
Vax Station: A General-Purpose Raster Graphics Architecture,1984,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942050776&doi=10.1145%2f357332.357336&partnerID=40&md5=4e34b4957bc088a045ec7c8fe3458257,"A raster graphics architecture and a raster graphics device are described. The graphics architecture is an extension of the RasterOp model and supports operations for rectangle movement, text writing, curve drawing, flood, and fill. The architecture is intended for implementation by both closely and loosely coupled display subsystems. The first implementation of the architecture is a remote raster display connected by fiber optics to a VAX minicomputer. The device contains a separate microprocessor, frame buffer, and additional local memory; it is capable of executing raster commands on operands in local memory or VAX host memory. © 1984, ACM. All rights reserved.",,Drawing (graphics); Memory architecture; BitBlt; Curve drawings; Frame buffer; Graphics architecture; Loosely coupled; Raster graphics; RasterOp; Workstation; Rasterization
Guest Editor Introduction,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942011627&doi=10.1145%2f357318.357319&partnerID=40&md5=7e47747a2e615d7c3e64ba6f3ba8ad4f,[No abstract available],,
Efficient Polygon-Filling Algorithms for Raster Displays,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0345943622&doi=10.1145%2f245.248&partnerID=40&md5=411c7cca8df0ea2e3be23bc0c6172129,[No abstract available],,Geometry; Rasterization; Co-ordinate system; Correctness properties; Filling algorithm; Graphics; Interior point; Raster scans; Two ways; Algorithms
Best approximate circles on integer grids,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0005499998&doi=10.1145%2f245.246&partnerID=40&md5=c7d04dced83710454731afd9477b356c,[No abstract available],,Diophantine approximation; Euclidean distance; Grid line; Grid points; Raster graphics; Computer graphics
Curve Fitting with Conic Splines,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0001836210&doi=10.1145%2f357314.357315&partnerID=40&md5=8673c3838324277f757ddcc9ce08e511,"Conic splines are formed by arcs of conics, each defined by its endpoints and the tangents at them plus an intermediate point. Instead of the common general equation that depends on five parameters, an equation with a single parameter is used, thus simplifying significantly the curve fitting problem. The resulting guided conics resemble Bezier polynomials and for parabolas are identical to them. Such splines can be used conveniently both for interactive design and for automatic curve fitting. They allow circular, elliptical, and hyperbolic arcs to be included in the spline family, while the common forms using a B-spline basis allow the inclusion of parabolic arcs only. Conic splines are described either in a rational parametric or in algebraic form f(x, y) = 0. A simple estimate for the distance of a point from such a curve is given and is used to test the quality of approximations. The data to be fitted are first approximated by a polygon, and then simple heuristics are used to decide which sequences of vertices should be approximated by conics. The conics found by the applications of the heuristics are usually close approximations of the data and need no further adjustments. When adjustments are needed, the interval is split and a conic is fitted on each part. It is shown theoretically that exact knot placement at the optimal locations is less important for higher order splines than for polygons. Examples of application of the method to the fitting of font and other contours are given. Comparisons with other methods suggest that conic splines require no more knots than cubic splines for similar quality of approximation. © 1983, ACM. All rights reserved.",Approximation by splines; Bezier polynomials; font description; interactive graphics; optical character recognition; variable knot splines,Character recognition; Interpolation; Optical character recognition; Automatic curve fittings; Bezier polynomials; Close approximation; Curve fitting problems; Font description; General equations; Interactive design; Interactive graphics; Curve fitting
Local Control of Bias and Tension in Beta-splines,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0346473396&doi=10.1145%2f357318.357321&partnerID=40&md5=f1a1ae4f4a40955e9ec155fa81e992c0,"The Beta-spline introduced recently by Barsky is a generalization of the uniform cubic B-spline: parametric discontinuities are introduced in such a way as to preserve continuity of the unit tangent and curvature vectors at joints (geometric continuity) while providing bias and tension parameters, independent of the position of control vertices, by which the shape of a curve or surface can be manipulated. Using a restricted form of quintic Hermite interpolation, it is possible to allow distinct bias and tension parameters at each joint without destroying geometric continuity. This provides a new means of obtaining local control of bias and tension in piecewise polynomial curves and surfaces. © 1983, ACM. All rights reserved.",Beta-splines; computer-aided design; geometric continuity; polynomial splines; tension,Computer aided design; Interpolation; Polynomial approximation; Cubic B -spline; Curvature vectors; Geometric continuity; Hermite interpolation; Local control; Piecewise polynomials; Polynomial splines; Tension; Geometry
Particle Systems—a Technique for Modeling a Class of Fuzzy Objects,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84919155948&doi=10.1145%2f357318.357320&partnerID=40&md5=6db73dfe50310e49b77844cd7410023c,"This paper introduces particle systems—a method for modeling fuzzy objects such as fire, clouds, and water. Particle systems model an object as a cloud of primitive particles that define its volume. Over a period of time, particles are generated into the system, move and change form within the system, and die from the system. The resulting model is able to represent motion, changes of form, and dynamics that are not possible with classical surface-based representations. The particles can easily be motion blurred, and therefore do not exhibit temporal aliasing or strobing. Stochastic processes are used to generate and control the many particles within a particle system. The application of particle systems to the wall of fire element from the Genesis Demo sequence of the film Star Trek H: The Wrath of Khan [10] is presented. © 1983, ACM. All rights reserved.",dynamic objects; Motion blur; stochastic modeling; temporal aliasing,Random processes; Stochastic models; Stochastic systems; A-particles; Classical surfaces; Dynamic objects; Fuzzy objects; Motion blur; Motion-blurred; Particle systems; Temporal aliasing; Stochastic control systems
Techniques for Reducing Pen Plotting Time,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0343909986&doi=10.1145%2f357323.357327&partnerID=40&md5=7d04a9ed48d45f4baa3144b4599122aa,[No abstract available],,Application programs; Data structures; Optimization; Buffer sizes; Data plotting; Line drawings; Plotting; Quad trees; Quadtree data structures; Set of lines; Time reduction; Computer aided design
An Integer Method for the Graphical Output of Conic Sections,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942065600&doi=10.1145%2f357323.357325&partnerID=40&md5=691ad2fe5b583dea88303cb76be781c1,[No abstract available],,Computer hardware; Computer software; Hardware; Curve generation; Floating point hardware; Integer arithmetic; Parametric forms; Software simulation; Square-root algorithms; Subtraction method; Trigonometric functions; Digital arithmetic
Graphics in overlapping bitmap layers,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84934061314&doi=10.1145%2f357318.357322&partnerID=40&md5=28123d717bc31abc56a5c94505a8698f,"One of the common uses of bitmap terminals is storing multiple programming contexts in multiple, possibly overlapping, areas of the screen called windows. Windows traditionally store the visible state of a programming environment, such as an editor or debugger, while the user works with some other program. This model of interaction is attractive for one-process systems, but to make full use of a multiprogramming environment, windows must be asynchronously updated, even when partially or wholly obscured by other windows. For example, a long compilation may run in one window, displaying messages as appropriate, while the user edits a file in another window. This paper describes a set of low-level graphics primitives to manipulate overlapping asynchronous windows, called layers, on a bitmap display terminal. Unlike previous window software, these primitives extend the domain of the general bitmap operator bitblt to include bitmaps that are partially or wholly obscured. © 1983, ACM. All rights reserved.",bitblt instruction; bitmaps; Raster image; windows,Multiprogramming; Windows; Bit maps; Bitblt instruction; Debuggers; Process system; Programming environment; Raster image; Program debugging
Quantitative Analysis of Vector Graphics System Performance,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84913338298&doi=10.1145%2f357314.357317&partnerID=40&md5=bb64d1430c411d93b5f2210411fdbf8a,"A set of quantitative performance modeling techniques for the evaluation and design of vector graphics system hardware and firmware is presented. The performance modeling techniques are based on a functional model of graphics processing. The techniques are used to evaluate different addressing schemes for graphical data, and the evaluation quantitatively demonstrates trade-offs between a versatile addressing scheme and one that permits only immediate data. © 1983, ACM. All rights reserved.",Hierarchical picture definition; instruction set design,Firmware; Addressing scheme; Functional model; Graphical data; Graphics processing; Hierarchical picture definition; Instruction set design; Performance Model; Vector graphics; Economic and social effects
A multiresolution spline with application to image mosaics,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-79551559765&doi=10.1145%2f245.247&partnerID=40&md5=e57fb94ef5d8ff8a5d6708f9caef5123,[No abstract available],,Computer graphics; Multiresolution analysis; Splines; Fast algorithms; Frequency Analysis; Image mosaic; Photomosaics; Pyramid algorithms; Frequency bands
New Techniques for Ray Tracing Procedurally Defined Objects,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0000626608&doi=10.1145%2f357323.357324&partnerID=40&md5=498135dd5521c900d9649efe9d539137,[No abstract available],,Algorithms; Image Analysis; Problem Solving; Algorithms; Forestry; Fractals; Prisms; Stochastic models; Stochastic systems; Trees (mathematics); Fractal surfaces; Image synthesis; Procedural modeling; Raster graphics; Solid model; Strip trees; Surfaces of revolution; Ray tracing
An Algorithm for Filling Regions on Graphics Display Devices,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-5844313951&doi=10.1145%2f357323.357326&partnerID=40&md5=a2f1e4c8eaed36f86f91301d15343d94,[No abstract available],,Computer graphics; Display devices; Geometry; Hardware; Maps; Algorithm efficiency; Application area; Color pattern; Graphics display; Hardware implementations; Polygons; Shading; Surface image; Algorithms
The 8 by 8 Display,1983,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0346483049&doi=10.1145%2f357314.357316&partnerID=40&md5=83afa6e9e11e57b5356e201b3239270e,"This paper describes a display system designed to make the recording and rearrangement of bits in a frame-buffer display system convenient and rapid. The advantage of frame-buffer displays is that because the intensity of each pixel can be specified independently, any picture can be displayed. The disadvantage is that a great many bits in the frame-buffer memory must be changed to make major changes in the picture. The 8 by 8 display described in this paper gets its name from the fact that in a single memory cycle it can access any 8 by 8 square of pixels. Internal shifters and special memory addressing circuits are provided to make the access independent of word boundaries in the memory. Pixel manipulation functions are included to process the 64 pixels thus accessed, mask them, overwrite them with new information, or combine them logically with other pixels. The resulting data can be stored into any other 8 by 8 square of pixels in a subsequent memory cycle. Looping mechanisms implemented in microcode provide RasterOp functions that transfer information from any rectangular area of the display to any other area with or without intervening pixelmodification operations. The prototype system is able to copy the entire 768 by 1024 array of the display in 52 ms, or two frame times. The ability to rearrange data quickly has proved to be an asset for character generation, line drawing, and picture construction, as well as for scrolling and other rearrangements of material already displayed on the screen. A simple model is developed to compare the performance of the 8 by 8 memory system with conventional frame-buffer organization. Execution traces of Smalltalk display programs are applied to the model to obtain figures of merit for different hardware organizations. © 1983, ACM. All rights reserved.",BitBlt; Frame-buffer display; RasterOp,Display devices; BitBlt; Character generation; Figures of merits; Frame buffer; Manipulation functions; Picture construction; RasterOp; Transfer information; Pixels
Sizing and Positioning Rectangles,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942023457&doi=10.1145%2f357299.357304&partnerID=40&md5=55b1322442063d876480a1d9d0155447,[No abstract available],,
A Language for Bitmap Manipulation,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84910457191&doi=10.1145%2f357306.357308&partnerID=40&md5=0d5f3113af43602f69d424ebc4080395,"This paper proposes that bitmaps, or raster images, should be given full citizenship in the world of computer science. We introduce a calculus of bitmap operations and MUMBLE, a programming language appropriate for describing bitmap computations. We illustrate the use of MUMBLE by several interesting graphical applications. We also discuss the structure of BOP, an efficient implementation of the bitmap calculus that is the underpinning of our system. © 1982, ACM. All rights reserved.",bitblt instruction; bitmap calculus; delayed evaluation; raster image,Computational linguistics; Rasterization; Bit maps; Bitblt instruction; Bitmap calculus; Delayed evaluation; Efficient implementation; Graphical applications; Raster image; Calculations
The Rack,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942065936&doi=10.1145%2f357299.357305&partnerID=40&md5=833014fae3d7e55f62e3ddf0874167c1,[No abstract available],,
A High-Level Language for Specifying Pictures,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0038639121&doi=10.1145%2f357299.357303&partnerID=40&md5=8dcd7bdabaa87d85f1e0057c66ce8be6,"A programming language that includes special constructs for drawing pictures is discussed. The language has been designed so that programs to draw pictures can reflect the structure of those pictures. Picture elements are called boxes. They are defmed by declaring algebraic relationships that should exist among their significant points and requesting actions to be performed at those points. The algebraic relationships are processed by an equation solver to determine the absolute location of significant points. A new mechanism of variable reference and scope makes the expression of relationships that should exist among picture elements more direct than it is in conventional languages. Some common picture operations--drawing lines using a pattern, filling in areas with textures, and obscuring parts of a picture by other parts--are all expressed readily once the mechanism for defining and using boxes is in place. The language has been implemented, and used by several authors to prepare figures for their papers and books. It was also used to prepare this paper. © 1982, ACM. All rights reserved.",hierarchical description of pictures,Algebra; Computational linguistics; Computer programming languages; Pixels; Drawing pictures; Equation solvers; Filling in; Hierarchical description; New mechanisms; Significant points; High level languages
Hidden Line Elimination in Projected Grid Surfaces,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0003730814&doi=10.1145%2f357311.357313&partnerID=40&md5=1828f30f2616a8235c4ca48bd23c85f3,"The hidden line and hidden surface problems are often simpler when restricted to special classes of objects. An example is the class of grid surfaces, that is, graphs of bivariate functions represented by their values on a set of grid points. Projected grid surfaces have geometric properties which permit hidden line or hidden surface elimination to be done more easily than in the general case. These properties are discussed in this paper, and an algorithm is given which exploits them. © 1982, ACM. All rights reserved.",function graphing; grid surface; Hidden line elimination; hidden surface elimination,Bivariate functions; Geometric properties; Grid points; Grid surfaces; Hidden line elimination; Hidden surface elimination; Special class; Surface problems; Computer graphics
Frame-to-frame Coherence and the Hidden Surface Computation: Constraints for a Convex World,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0041401732&doi=10.1145%2f357299.357302&partnerID=40&md5=a4f5841a47da5b6942e742beda9cc608,[No abstract available],frame coherence,Geometry; Frame-to-frame coherence; Mathematical analysis; Self occlusion; Animation
Editor's Introduction,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942010740&doi=10.1145%2f357306.357307&partnerID=40&md5=ae155b2c2bb7711b2adbc62e84795971,[No abstract available],,
A Generalization of Algebraic Surface Drawing,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-74349114123&doi=10.1145%2f357306.357310&partnerID=40&md5=1f98b5486609ccba0ad2bf3ae7972079,"The mathematical description of three-dimensional surfaces usually falls into one of two classifications: parametric and implicit. An implicit surface is defined to be all points which satisfy some equation F (x, y, z) = 0. This form is ideally suited for image space shaded picture drawing; the pixel coordinates are substituted for x and y, and the equation is solved for z. Algorithms for drawing such objects have been developed primarily for fLrst- and second-order polynomial functions, a subcategory known as algebraic surfaces. This paper presents a new algorithm applicable to other functional forms, in particular to the summation of several Gaussian density distributions. The algorithm was created to model electron density maps of molecular structures, but it can be used for other artistically interesting shapes. © 1982, ACM. All rights reserved.",,Algorithms; Algebraic surfaces; Electron density maps; Functional forms; Gaussian density distribution; Implicit surfaces; Mathematical descriptions; Second-order polynomial; Three-dimensional surface; Algebra
Anti-Aliasing through the Use of Coordinate Transformations,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0347616856&doi=10.1145%2f357306.357309&partnerID=40&md5=df14381585b5b5302afee792fd07ad77,"The use of the perpendicular point-line distance in evaluating the two-dimensional anti-aliasing convolution is studied. Transformations of the point-spread function (PSF) that give the effective convolution in terms of the point-line distance when the class of object space primitives is limited to lines and polygons are derived. Because the quality of filtering is embedded in a table indexed by the point-line distance, this approach allows one to use arbitrarily complex PSFs; only the width and not the shape of the PSF affects the amount of computation. The CORDIC algorithm is applied to point-line distance evaluation, and its merits are shown. Also shown are the more standard uses of the CORDIC algorithm for coordinate rotation, for polar-to-rectangular and rectangular-to-polar conversion, and for calculating the Euclidean norm of a vector. Rounded endpoints can be achieved by using the point-segment distance, and computational methods are given, including CORDIC implementation. The CORDIC algorithms for the aforementioned geometric operations are prime candidates for VLSI implementation because of their inherent parallel/pipeline nature. © 1982, ACM. All rights reserved.",anti-aliasing; CORDIC algorithm; point-line distance; point-segment distance; point-spread function (PSF),Algorithms; Convolution; Function evaluation; Optical transfer function; Co-ordinate transformation; CORDIC algorithms; Euclidean norm; Geometric operations; Object space; Point-line distance; Point-segment distance; VLSI implementation; Anti-aliasing
Using Program Transformations to Derive Line-Drawing Algorithms,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-33744836792&doi=10.1145%2f357311.357312&partnerID=40&md5=8a998f0b0fac9cccb1066697748afe89,"A wide variety of line-drawing algorithms can be derived by applying program transformations to a simple, obviously correct algorithm. The transformations increase the speed of the algorithm and eliminate the need for floating-point computations. We show how Bresenham's algorithm can be derived in this way. The transformations are then used to derive several variants of Bresenham's algorithm, designed for use on displays that can generate more than one pixel at a time. The treatment shows a complete, extended example of the practical use of program transformations. © 1982, ACM. All rights reserved.",line-drawing; Program transformation; raster graphics,Digital arithmetic; Drawing (graphics); Bresenham's algorithm; Floating-point computation; Line drawing algorithms; Line drawings; Practical use; Program transformations; Raster graphics; Algorithms
Synthetic Image Generation with a Lens and Aperture Camera Model,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0010237035&doi=10.1145%2f357299.357300&partnerID=40&md5=35ddddd4784d48980f7f57586160ebd8,"This paper extends the traditional pinhole camera projection geometry used in computer graphics to a more realistic camera model which approximates the effects of a lens and an aperture function of an actual camera. This model allows the generation of synthetic images which have a depth of field and can be focused on an arbitrary plane; it also permits selective modeling of certain optical characteristics of a lens. The model can be expanded to include motion blur and special-effect filters. These capabilities provide additional tools for highlighting important areas of a scene and for portraying certain physical characteristics of an object in an image. © 1982, ACM. All rights reserved.",camera model; defocused optical system; lens and aperture; point-spread function,Cameras; Computer graphics; Optical systems; Optical transfer function; Pinhole cameras; Aperture function; Camera model; Camera projection; Defocused optical systems; Optical characteristics; Physical characteristics; Realistic camera models; Synthetic image generation; Lenses
Graphics Programming Using a Database System with Dependency Declarations,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84919108859&doi=10.1145%2f357299.357301&partnerID=40&md5=5be3d36b8f43931757b1a68e21956731,"This paper presents and integrates two ideas which can have a long-term impact on the ease of developing interactive computer graphics applications. The first idea is that of using a database management system (DBMS) to manage all the data in an interactive graphics application program (graphical input data, application data, and graphical output data). The second idea is that of replacing much of the traditional procedural specification of an application program with a more concise specification of the dependencies among the input, application, and output data. The underlying system performs the procedures necessary to maintain the dependencies. These two ideas are combined by using a relational DBMS to manage the data, and continuously evaluated qualified updates to specify dependencies to the DBMS. We illustrate these ideas with an example, and discuss the implementation of our system. © 1982, ACM. All rights reserved.",dependencies; nonprocedural programming; production rules,Application programs; Computer graphics; Database systems; Interactive computer graphics; Specifications; Application data; Computer graphics applications; Dependencies; Graphics programming; Interactive graphics; Long-term impacts; Production rules; Underlying systems; Information management
Guest Editor's Introduction,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942035797&doi=10.1145%2f357290.357292&partnerID=40&md5=b6826156f952e996e6a96b18f3e7a5e3,[No abstract available],,
A Visible Polygon Reconstruction Algorithm,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0345434302&doi=10.1145%2f357290.357294&partnerID=40&md5=e0561f2392ac936433b35188fe1415a6,"An algorithm for determining visible lines or visible surfaces in polygonal form, at object resolution, is presented. The original scene must consist of nonintersecting planar polygons. The procedure relies on image coherence, since the sampling is dependent on the complexity of the image. The reconstruction method is based on an elaborate data structure, which allows the polygonal output to be easily obtained. The polygonal output is useful for smooth shaded or textured images, as well as for the creation of shadows. © 1982, ACM. All rights reserved.",,Computer graphics; Object resolution; Reconstruction algorithms; Reconstruction method; Textured images; Visible lines; Algorithms
A Reflectance Model for Computer Graphics,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942063973&doi=10.1145%2f357290.357293&partnerID=40&md5=53e16533342e7060f22d9f6b95248c79,"A new reflectance model for rendering computer synthesized images is presented. The model accounts for the relative brightness of different materials and light sources in the same scene. It describes the directional distribution of the reflected light and a color shift that occurs as the reflectance changes with incidence angle. A method for obtaining the spectral energy distribution of the light reflected from an object made of a specific real material is presented, and a procedure for accurately reproducing the color associated with the spectral energy distribution is discussed. The model is applied to the simulation of a metal and a plastic. © 1982, ACM. All rights reserved.",image synthesis; reflectance,Computer graphics; Image processing; Light sources; Reflection; Spectroscopy; Directional distributions; Image synthesis; Incidence angles; Reflectance changes; Reflectance model; Relative brightness; Spectral energy distribution; Synthesized images; Color computer graphics
ACM Algorithms Policy,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942010761&doi=10.1145%2f357290.357297&partnerID=40&md5=64f5afd63604e38f157eb23d6dfc8750,[No abstract available],,
An Experimental System for Creating and Presenting Interactive Graphical Documents,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-1142306369&doi=10.1145%2f357290.357296&partnerID=40&md5=7b8f5f8bac531476f73ded40ba03afa9,"An experimental system is described for the design, development, and presentation of computer-based documents that combine pictures and text on a high-resolution color raster display. Such documents can be used, for example, for maintenance and repair tasks, videotex databases, or computer-aided instruction. Documents are directed graphs whose nodes we refer to as pages, in analogy to the pages of a paper book. A page includes a set of simultaneously displayed pictures, actions (procedures and processes), and indexing information. Pages may be nested arbitrarily deeply in chapters that serve much the same organizing function as those of conventional books. The system is comprised of separate programs for laying out and drawing pictures, for graphically specifying the contents of pages, chapters, and their interconnections, and for displaying the document for user interaction. Examples are given from a prototype maintenance and repair manual in which emphasis was placed on designing actions that allow simple real-time animation and assist in finding one's way around the document. © 1982, ACM. All rights reserved.",maintenance and repair; pictorial information systems,Computer aided instruction; Directed graphs; Maintenance; Videotex; Drawing pictures; Experimental system; High resolution; Paper book; Real-time animations; User interaction; Repair
A Software Testbed for the Development of 3D Raster Graphics Systems,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-0042122845&doi=10.1145%2f357290.357295&partnerID=40&md5=554b7d6ea9d82322c4427772608ee22d,"A set of utility programs for 3D shaded display that make up a testbed for creating raster scan display systems is described. The principal feature of this system is a flexible scan conversion processor that can simultaneously manage several different object types. Communications between the scan conversion routine and processes which follow it in the display pipeline can be routed through a structure called a span buffer which retains some of the highresolution, three-dimensional data of the object description and at the same time has the characteristics of a run length encoded image. It was found that the testbed software has the flexibility for a variety of experimental applications, and that the building block approach reduces the amount of programming effort required for new applications. © 1982, ACM. All rights reserved.",software testbed,Application programs; Display devices; Rasterization; Testbeds; Building blockes; Experimental application; High resolution; New applications; Object description; Raster graphics; Software testbed; Three-dimensional data; Utility programs
Editor's Introduction,1982,ACM Transactions on Graphics (TOG),https://www.scopus.com/inward/record.uri?eid=2-s2.0-84942056225&doi=10.1145%2f357290.357291&partnerID=40&md5=7929d0ec58a52b493624f531388b5fb2,[No abstract available],,

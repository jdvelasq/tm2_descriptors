Title,Year,Source title,Link,Abstract,Author Keywords,Index Keywords
Teaching computer vision: Bringing research benchmarks to the classroom,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924084758&doi=10.1145%2f2597627&partnerID=40&md5=07422126d8ec57729aa236800ec2a382,"This article concerns the design of effective computer vision programming exercises and presents a novel means of designing these assignments. We describe three recent case studies designed to evaluate the effectiveness of assigning graduate-level computer vision students with publicly available research benchmarks as competitive assignments. This was done rather than assigning more traditional exercises that require students to implement specific algorithms or applications.We allowed our students the freedom of designing or choosing their own methods, with the goal of obtaining the best performance on the benchmark chosen for each assignment. Students, therefore, competed against each other, as well as published state of the art. We detail the design, application, and results of these benchmark exercises. We show that not only are these benchmarks easily adapted for the classroom, but also that in some cases, student assignments matched published state-of-the-art performance. This observation provides strong evidence to support the effectiveness of the proposed exercise design. We conclude by discussing the benefits and drawbacks of these exercises compared to those traditionally employed in computer vision classrooms. © 2015 ACM.",Benchmark exercises; Competitive exercises; Computer vision education; Research benchmarks,Benchmarking; Computer programming; Computer vision; Design; Education; Teaching; Case-studies; Competitive exercises; Graduate levels; Programming exercise; State of the art; State-of-the-art performance; Student assignments; Students
"Smartphones, studio-based learning, and scaffolding: Helping novices learn to program",2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920935046&doi=10.1145%2f2677089&partnerID=40&md5=14c729d09a0dc68ebd815b82449c7b88,"This article describes how smartphones, studio-based learning, and extensive scaffolding were used in combination in the teaching of a freshman Introduction to Programming course. To reduce cognitive overload, a phased approach was followed in introducing programming concepts and development environments, beginning with the visual programming environment Scratch and culminating with Java development for Android smartphones. Studio-based learning, a pedagogical approach long established in the fields of architecture and design education, was used as the basis for a collaborative social constructivist-and constructionist-approach to learning. Smartphones offered students the potential to develop applications for a context that is both immediate and clearly relevant to the ways in which they utilize and interact with technology. The research was carried out over three full academic years and included 53 student participants. An exploratory case study methodology was used to investigate the efficacy of the approach in helping to overcome the barriers faced by novice programmers. The findings indicate that the approach has merit. The students were motivated and engaged by the learning experience and were able to develop sophisticated applications that incorporated images, sound, arrays, and event handling. There is evidence that aspects of the studio-based learning approach, such as the scope that it gave students to innovate and the open feedback during student presentations, provided a learning environment that was motivating. Overall, the combination of smartphones, studio-based learning, and appropriate scaffolding offers an effective way to teach introductory programming courses. © 2014 ACM.",Contextualized learning; Smartphones,Computer programming; Curricula; Smartphones; Students; Studios; Teaching; Contextualized learning; Development environment; Exploratory case studies; Introduction to programming; Introductory programming course; Learning environments; Pedagogical approach; Visual programming environments; Computer aided instruction
Team project experiences in humanitarian free and open source software (HFOSS),2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84938572444&doi=10.1145%2f2684812&partnerID=40&md5=33dfd480c1c4c85fcf7cdb3e7fc46d60,"Providing students with the professional, communication, and technical skills necessary to contribute to an ongoing software project is critical, yet often difficult in higher education. Involving student teams in real-world projects developed by professional software engineers for actual users is invaluable. Free and Open Source Software (FOSS) has emerged as an important approach to creating, managing, and distributing software products. Involvement in a FOSS project provides students with experience developing within a professional environment, with a professional community, and has the additional benefit that all communication and artifacts are publicly accessible. Humanitarian Free and Open Source Software (HFOSS) projects benefit the human condition in some manner. They can range from disaster management to microfinance to election-monitoring applications. This article discusses the benefits and challenges of students participating in HFOSS projects within the context of undergraduate computing degree programs. This article reports on a 6-year study of students' self-reported attitudes and learning from participation in an HFOSS project. Results indicate that working on an HFOSS project increases interest in computing. In addition, students perceive that they are gaining experience in developing software in a distributed environment with the attendant skills of communication, distributed teamwork, and more. © 2015 ACM.",Humanitarian free and open source software (HFOSS),Computer software; Disaster prevention; Disasters; Education; Open systems; Professional aspects; Software engineering; Students; Disaster management; Distributed environments; Free and open source softwares; Monitoring applications; Professional community; Professional environments; Professional software engineers; Real world projects; Open source software
Team building in multidisciplinary client-sponsored project courses,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84948395181&doi=10.1145%2f2700518&partnerID=40&md5=437d8c29c9c97d4c758b6c0c9a38f252,"Experience working inmultidisciplinary teams is important both to prepare Computer Science (CS) students for industry and to improve their communication with teammates from disciplines other than their own. This article describes the evolution and results of collaborations among three courses: an undergraduate CS course about user interface design and implementation, an undergraduate Scientific and Technical Communication (STC) course about usability and instructions writing, and a graduate CS/Human Factors course about userinterface evaluation and usability testing. Students from all three courses work with scientists to complete the scientist-sponsored citizen science Android applications (apps). Students from the undergraduate CS and STC courses form multidisciplinary teams to design and implement apps, while the graduate students consult with the teams by evaluating and user-testing the apps. The collaboration's effectivenesswas assessed using student surveys, interviews, and evaluations of student work. This article compares the collaboration within the teams and the coordination with the scientists across two years of activities in order to determine the effectiveness of course modifications. The article concludes with recommendations for improving the collaboration within teams and the coordination with clients in multidisciplinary course projects.",Human-computer interaction (HCI); Interdisciplinary teams; Multidisciplinary teams,Curricula; Human computer interaction; Human resource management; User interfaces; Course modifications; Design and implements; Human computer interaction (HCI); Interdisciplinary teams; Multi-disciplinary teams; Multidisciplinary course; Technical communications; User interface designs; Students
Examining interest and grades in computer science 1: A study of pedagogy and achievement goals,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84941339562&doi=10.1145%2f2802752&partnerID=40&md5=e45e32d0149c871f193f6ed24c5b056d,"Computer Science 1 (CS1), the first course taken by college-level computer science (CS) majors, has traditionally suffered from high failure rates. Efforts to understand this phenomenon have considered a wide range of predictors of CS success, such as prior programming experience, math ability, learning style, and gender, with findings that are suggestive but inconclusive. The current quasiexperimental study extends this research by exploring how the pedagogical approach of the course (traditional lecture vs. Peer Instruction (PI) and clickers) in combination with student achievement goals (mastery goals vs. performance goals) relates to exam grades, interest in the subject matter, and course enjoyment. The research revealed that students with performance goals scored significantly lower on final exams in both the lecture and PI conditions. However, students with performance goals reported higher levels of subject matter interest when taught through PI. Students withmastery goals, in both conditions, scored significantly higher on the final exam, had higher levels of interest, and reported higher levels of course enjoyment than their performance-oriented counterparts. The results suggest that PI may improve the level of subject-matter interest for some students, thereby indicating the importance of studying pedagogical approach as we seek to understand student outcomes in CS1. © 2015 ACM.",Achievement goals; CS1; Peer instruction,Failure analysis; Achievement goals; Computer Science 1; Computer science 1 (CS1); Pedagogical approach; Peer instruction; Performance-oriented; Programming experience; Student achievement; Students
Teaching mathematical reasoning principles for software correctness and its assessment,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84937125197&doi=10.1145%2f2716316&partnerID=40&md5=47cc4847f7aefc48aaf010989274dec0,"Undergraduate computer science students need to learn analytical reasoning skills to develop high-quality software and to understand why the software they develop works as specified. To accomplish this central educational objective, this article describes a systematic process of introducing reasoning skills into the curriculum and assessing how well students have learned those skills. To facilitate assessment, a comprehensive inventory of principles for reasoning about correctness that captures the finer details of basic skills that students need to learn has been defined and used. The principles can be taught at various levels of depth across the curriculum in a variety of courses. The use of a particular instructional process is illustrated to inculcate reasoning principles across several iterations of a sophomore-level development foundations course and a junior-level software engineering course. The article summarizes how learning outcomes motivated by the inventory of reasoning principles lead to questions that in turn form the basis for a careful analysis of student understanding and for finetuning teaching interventions that together facilitate continuous improvements to instruction. © 2015 ACM.",Components; Evaluation; Formal methods; Learning outcomes; Objects; Specifications,Curricula; Formal methods; Specifications; Teaching; Components; Computer science students; Continuous improvements; Evaluation; Learning outcome; Mathematical reasoning; Objects; Software engineering course; Students
Object-oriented design and programming: An investigation of novices' conceptions on objects and classes,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84941337071&doi=10.1145%2f2700519&partnerID=40&md5=7cf34adea2c76adeadc8b061d36afc8a,"The Object-Oriented Programming (OOP) technique is nowadays the most popular programming technique among tertiary education institutions. However, learning OOP is a cognitively demanding task for undergraduate students. Several difficulties and misconceptions have been recorded in the literature for both OOP concepts and languages, mainly Java. This article focuses on reviewing and advancing research on the most fundamental OOP concepts, namely, the concepts of ""object"" and ""class"" and their role during program execution. The results of a long-term investigation on the subject are presented, focusing on a study exploring undergraduate students' conceptions on ""objects"" and ""classes."" The study advances related research on categories of conceptions on ""objects"" and ""classes"" by providing quantitative results, in addition to qualitative results, regarding the frequency of the recorded conceptions. Nearly half the students seem to comprehend the modeling and static/dynamic aspects of the concepts ""object"" and ""class."" Implications for achieving a deep conceptual understanding of text, action, and modeling aspects of these fundamental concepts are also discussed. Information regarding the programming environments utilized in the course and key features of the applied teaching approach are presented, in order to facilitate both a better understanding of the context and a better employment of the results of the presented study. Finally, proposals for enhancing the contribution of this and similar studies are made. © 2015 ACM.",Class; Conceptions; Misconceptions; Object; Object-oriented programming; Teaching/learning programming,Students; Class; Conceptions; Misconceptions; Object; Teaching/learning; Object oriented programming
A purposeful MOOC to alleviate insufficient cs education in Finnish schools,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929178219&doi=10.1145%2f2716314&partnerID=40&md5=a9b99ca080ab383cdfe4d2b1bab42b3c,"The Finnish national school curriculum, effective from 2004, does not include any topics related to Computer Science (CS). To alleviate the problem that school students are not able to study CS-related topics, the Department of Computer Science at the University of Helsinki prepared a completely online course that is open to pupils and students in all schools in Finland. The course is a Massive Open Online Course (MOOC), as the attendance scales without an upper bound. Schools in Finland have offered the MOOC as an elective CS course for their students and granted formal school credits for completing (parts of) it. Since our MOOC is exactly the same programming course as our university-level CS1 course, we are able to use the MOOC also as a long-lasting entrance exam to the CS BSc and MSc degrees. After two spring semesters of operation, we have observed that there are school students dispersed around Finland who are ready and willing to take on a challenging programming course online, and bridging the MOOC to a full study right makes a strong incentive to keep working on the programming assignments, even without traditional teaching. © 2015 ACM.",Entrance exam; High-performing students; Open Online Course; Programming education,Students; Entrance exam; Massive open online course; Open online course; Programming assignments; Programming course; Programming education; University levels; University of helsinki; E-learning
How to implement rigorous computer science education in K-12 schools? Some answers and many questions,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929144568&doi=10.1145%2f2729983&partnerID=40&md5=0108350ff416fee7ac0c108c49bf09d1,"Aiming to collect various concepts, approaches, and strategies for improving computer science education in K-12 schools, we edited this second special issue of the ACM TOCE journal. Our intention was to collect a set of case studies from different countries that would describe all relevant aspects of specific implementations of Computer Science Education in K-12 schools. By this, we want to deliver well-founded arguments and rich material to the critical discussion about the state and the goals of K-12 computer science education, and also provide visions for the future of this research area. In this editorial, we explain our intention and report some details about the genesis of these special issues. Following, we give a short summary of the Darmstadt Model, which was suggested to serve as a structuring principle of the case studies. The next part of the editorial presents a short description of the five extended case studies from India, Korea, NRW/Germany, Finland, and USA that are selected to be included in this second issue. In order to give some perspectives for the future, we propose a set of open research questions of the field, partly derived from the Darmstadt Model, partly stimulated by a look on large-scale investigations like PISA. © 2015 ACM 1946-6226/2015/04-ART5 $15.00.",CS education; Curricula; Darmstadt Model; K-12 education; Research questions; Schools,Computer programming; Computer science; Curricula; Case-studies; Computer Science Education; Critical discussions; CS education; K-12 education; K-12 schools; Research questions; Schools; Education computing
An analysis of HTML and CSS syntax errors in a web development course,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924812038&doi=10.1145%2f2700514&partnerID=40&md5=6be0050fa119eeecabef7a89fb68b0e6,"Many people are first exposed to code through web development, yet little is known about the barriers beginners face in these formative experiences. In this article, we describe a study of undergraduate students enrolled in an introductory web development course taken by both computing majors and general education students. Using data collected during the initial weeks of the course, we investigate the nature of the syntax errors they make when learning HTML and CSS, and how they resolve them. This is accomplished through the deployment of openHTML, a lightweight web-based code editor that logs user activity. Our analysis reveals that nearly all students made syntax errors that remained unresolved in their assessments, and that these errors continued weeks into the course. Approximately 20% of these errors related to the relatively complex system of rules that dictateswhenit is valid for HTML elements to be nested in one another. On the other hand, 35% of errors related to the relatively simple tag syntax determininghowHTML elements are nested. We also find that validation played a key role in resolving errors: While the majority of unresolved errors were present in untested code, nearly all of the errors that were detected through validation were eventually corrected. We conclude with a discussion of our findings and their implications for computing education. © 2015 ACM 1946-6226/2015/03-ART4 $15.00.",Code editors; Computational literacy; Web development,Codes (symbols); Curricula; Errors; HTML; Syntactics; Code editors; Computational literacy; Computing education; Computing majors; General education; Syntax errors; Undergraduate students; Web development; Students
"Uncovering ""threshold concepts"" in Web development: An instructor perspective",2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924757718&doi=10.1145%2f2700513&partnerID=40&md5=2fdea5d29c7c5a91627235fcb1c1966a,"The field of Web development has evolved and diversified significantly in recent years, and narrowing the gap between the requirements of academia and the demands of industry remains a challenge. Moreover, many faculty members often struggle with knowing ""how much"" of a particular subject they should teach to their students and at what level. This small-scale, exploratory study seeks to uncover the existence of ""threshold concepts"" with in Web development. Threshold concepts are the fundamental concepts which, once mastered, allow a learner to progress to a deeper understanding of a subject. An online questionnaire was sent out to 24 instructors within UK higher education institutions who teachWeb development subjects. Nine participants responded to the questionnaire and interviews were conducted with five to discuss and expand on the responses provided, resulting in the identification of four areas that were perceived as difficult for students to grasp when learning Web development. Analysis of these areas suggests that threshold concepts do exist within the subject and we offer up two candidates for the field of Web development:basic programming principlesanddecomposition and abstraction. Designing a curriculum based on threshold concepts and less on the latest methods, tools, and techniques can go a long way in helping students to become experts in their chosen discipline. © 2015 ACM 1946-6226/2015/03-ART2 $15.00.",Higher education; Thematic analysis; Threshold concepts; Web development,Surveys; Exploratory studies; Fundamental concepts; Higher education; Higher education institutions; Online questionnaire; Thematic analysis; Threshold Concepts; Web development; Students
Investigating essential factors on students' perceived accomplishment and enjoyment and intention to learn in web development,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924799145&doi=10.1145%2f2700515&partnerID=40&md5=5f9d682e11a00be763fdbbedbf32914c,"Web development is an important component in the curriculum of computer science and information systems areas. However, it is generally considered difficult to learn among students. In this study, we examined factors that could influence students' perceptions of accomplishment and enjoyment and their intention to learn in the web development course. Specifically, we investigated both student-related and instructor-related factors. A research model was developed. To empirically test the model and the hypotheses, the survey method was used and the structural equation modeling (SEM) technique was adopted for data analysis. Overall, the results indicated that both student-related factors (perceived web development efficacy and motivation) and instructor-related factors (instructor characteristics and teaching method) could significantly influence students' perceptions toward accomplishment and enjoyment and their intention to learn web development. We also summarized comments collected from students to gain a deeper understanding of their ideas toward learning web development techniques. We believe the research results can help provide better knowledge and insights to educators on teaching web development. © 2015 ACM 1946-6226/2015/03-ART3 $15.00.",Instructor-related factors; Intention to learn; Perceived accomplishment; Perceived enjoyment; Student-related factors; Web development,Curricula; Teaching; Intention to learn; Perceived accomplishment; Perceived enjoyment; Related factors; Web development; Students
Introduction to the special issue on web development,2015,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924760034&doi=10.1145%2f2724759&partnerID=40&md5=c58d75b964ddee129dabde0f53de9c17,"Despite its prevalence in computing, web development is underrepresented in computing curricula and computing education research. This special issue takes a step towards improving its representation with three articles on web development education. Drawing upon diverse methods from a variety of contexts, the articles address challenges of teaching web development and common difficulties students encounter when learning particular concepts. All three articles identify web development as a promising avenue for motivating students in their study of computing. © 2015 ACM 1946-6226/2015/03-ART1 $15.00.",Web development,Computer programming; Computer science; Computing curricula; Computing education; Diverse methods; Web development; Students
A qualitative study of students' computational thinking skills in a data-driven computing class,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84995559813&doi=10.1145%2f2676660&partnerID=40&md5=8b320373dfdef864539f354bc2426d51,"Critical thinking, problem solving, the use of tools, and the ability to consume and analyze information are important skills for the 21st century workforce. This article presents a qualitative case study that follows five undergraduate biology majors in a computer science course (CS0). This CS0 course teaches programming within a data-driven context and is part of a university-wide initiative to improve students' quantitative scholarship. In this course, students learn computing concepts and computational thinking by writing programs in MATLAB that compute with data, by performing meaningful analyses, and by writing about the results. The goal of the study reported here is to better understand the thought processes students use in such a data-driven approach. Findings show that students engage in an ongoing organizational process to understand the structure of the data. The computational and visualization tasks appear to be closely linked, and the visualization component appears to provide valuable feedback for students in accomplishing the programming tasks. © 2014 ACM.",Computational science and science education; Computational thinking; Computer education programs; Model curricula; [Social and professional topics]: computing education,Curricula; Education; Education computing; MATLAB; Problem solving; Teaching; Visualization; Computational thinkings; Computer education; Computing education; Model curriculum; Science education; Students
Teaching introductory programming: A quantitative evaluation of different approaches,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84995571199&doi=10.1145%2f2662412&partnerID=40&md5=7a3f0c6c45058d2a5e8072064b58a2eb,"Teaching programming to beginners is a complex task. In this article, the effects of three factors - choice of programming language, problem-solving training, and the use of formative assessment - on learning to program were investigated. The study adopted an iterative methodological approach carried out across 4 consecutive years. To evaluate the effects of each factor (implemented as a single change in each iteration) on students' learning performance, the study used quantitative, objective metrics. The findings revealed that using a syntactically simple language (Python) instead of a more complex one (Java) facilitated students' learning of programming concepts. Moreover, teaching problem solving before programming yielded significant improvements in student performance. These two factors were found to have variable effects on the acquisition of basic programming concepts. Finally, it was observed that effective formative feedback in the context of introductory programming depends on multiple parameters. The article discusses the implications of these findings, identifies avenues for further research, and argues for the importance of studies in computer science education anchored on sound research methodologies to produce generalizable results. 2014 Copyright is held by the owner/author(s).",CS1; Curriculum; Empirical studies; Experimentation; Formative feedback; Human factors; K.3.2 [computers and education]: computer and information science education - Computer science education;; Learning programming; Measurement; Novice programmers; Problem solving; Programming languages; Teaching strategies,Computer programming languages; Curricula; Education computing; Human engineering; Iterative methods; Measurement; Problem oriented languages; Students; Computer and information science educations; Empirical studies; Experimentation; Formative feedbacks; Learning programming; Novice programmer; Teaching strategy; Problem solving
Children programming games: A strategy for measuring computational learning,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84995686736&doi=10.1145%2f2677091&partnerID=40&md5=24f196e7c6d91b765442cfe05f8f2b72,"This article reports the results of a study of the relationship of computer game programming to computational learning (CL). The results contribute to the growing body of knowledge about how to define and measure CL among children by proposing a new concept, Game Computational Sophistication (GCS). We analyzed 231 games programmed by 325 11 and 12 year olds with a range of prior computer experience who attended a voluntary technology class during or after school. Findings suggest that students' games exhibited a range of GCS: programs composed of sequences of simple programming constructs; programs composed of programming constructs, some of which are used to implement higher-order patterns; and programs composed of game mechanics built from combinations of patterns ""glued"" together with simple programming constructs. We use case studies of students' games to illustrate how variation in the use and integration of programming constructs, patterns, and game mechanics can be used to demonstrate evidence of CL. The study contributes to an understanding of what CL looks like in middle school, how to assess it, and how game-programming activities might promote CL. © 2014 ACM.",Alice; Computational learning; Computational thinking; Experimentation; Game programming; K.3.2 [computers and education]: computer and information science education - computer science education; Languages; Measurement; Middle school,Computer programming; Computer programming languages; Education; Education computing; Engineering education; Measurements; Microcomputers; Query languages; Students; Alice; Computational learning; Computational thinkings; Computer and information science educations; Experimentation; Game Programming; Middle school; Computer games
Utilizing structural equation modeling and social cognitive career theory to identify factors in choice of IT as a major,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914160284&doi=10.1145%2f2623198&partnerID=40&md5=3f4b87e32868053bd8c8cbbf18d377d4,"In the United States, the number of students entering into and completing degrees in science, technology, engineering, and mathematics (STEM) areas has declined significantly over the past decade. Although modest increases have been shown in enrollments in computer-related majors in the past 4 years, the prediction is that even in 3 to 4 years when these students graduate, there will be shortages of computerrelated professionals for industry. The challenge on which this article focuses is attracting students to select an information technology (IT) field such as computer science, computer engineering, software engineering, or information systems as a major when many high schools do not offer a single computer course, and high school counselors, families, and friends do not provide students with accurate information about the field. The social cognitive career theory (SCCT) has been used extensively within counseling and career psychology as a method for understanding how individuals develop vocational interests, make occupational choices, and achieve success within their chosen field. In this article, the SCCT model identifies factors that specifically influence high school students to select a major in an IT-related discipline. These factors can then be used to develop new or enhance existing IT-related activities for high school students. Our work demonstrates that both interest and outcome expectations have a significant positive impact on choice to major. Interest also is found to mediate the effects of self-efficacy and outcome expectations on choice of major. Overall, the model predicts a good portion of variance in the ultimate outcome of whether or not an individual chooses to major in IT. © 2014 ACM.",Interest; Self-efficacy; Social cognitive career theory; Structural equationmodeling,"Employment; Information systems; Software engineering; Teaching; Computer engineering; High school students; Interest; Occupational choice; Science , technology , engineering , and mathematics; Self efficacy; Social cognitive career theory; Structural equationmodeling; Students"
Scenario-based programming usability-oriented perception,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914148290&doi=10.1145%2f2648814&partnerID=40&md5=fbadb2ca5a5c28cae3cd3449263c4742,"In this article, we discuss the possible connection between the programming language and the paradigm behind it, and programmers'tendency to adopt an external or internal perspective of the system they develop. Based on a qualitative analysis, we found that when working with the visual, interobject language of live sequence charts (LSC), programmers tend to adopt an external and usability-oriented view of the system, whereas when working with an intraobject language, they tend to adopt an internal and implementationoriented viewpoint. This is explained by first discussing the possible effect of the programming paradigm on programmers'perception and then offering a more comprehensive explanation. The latter is based on a cognitivemodel of programming with LSC, which is an interpretation and a projection of themodel suggested by Adelson and Soloway [1985] onto LSC and scenario-based programming, the new paradigm on which LSC is based. Our model suggests that LSC fosters a kind of programming that enables iterative refinement of the artifact with fewer entries into the solution domain. Thus, the programmer can make less context switching between the solution domain and the problem domain, and consequently spend more time in the latter.We believe that these findings are interesting mainly in two ways. First, they characterize an aspect of problem-solving behavior that to the best of our knowledge has not been studied before-the programmer's perspective. The perspective can potentially affect the outcome of the problem-solving process, such as by leading the programmer to focus on different parts of the problem. Second, relating the structure of the language to the change in perspective sheds light on one of the ways in which the programming language can affect the programmer's behavior. © 2014 ACM.",Live sequence charts; Psychology of programming,Flowcharting; Problem oriented languages; Visual languages; Context switching; Iterative refinement; Live sequence chart; Problem solving process; Programming paradigms; Psychology of programming; Qualitative analysis; Scenario-based programming; Problem solving
Asking research questions: Theoretical presuppositions,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914147527&doi=10.1145%2f2644924&partnerID=40&md5=1f6d857446d392762d159a47ba52053f,"Asking significant research questions is a crucial aspect of building a research foundation in computer science (CS) education. In this article, I argue that the questions that we ask are shaped by internalized theoretical presuppositions about how the social and behavioral worlds operate. And although such presuppositions are essential in making the world sensible, at the same time they preclude carrying out many research studies that may further our collective research enterprise. I build this argument by first considering a few proposed research questions typical of much of the existing research in CS education, making visible the cognitivist assumptions that these questions presuppose. I then provide a different set of assumptions based on sociocultural theories of cognition and enumerate some of the (different) research questions to which these presuppositions give rise. My point is not to debate the merits of the contrasting theories but to demonstrate how theories about how minds and sociality operate are imminent in the very questions that researchers ask. Finally, I argue that by appropriating existing theory from the social, behavioral, and learning sciences, and making such theories explicit in carrying out and reporting their research, CS education researchers will advance the field. © 2014 ACM.",Cognition; CS education research; Research questions; Theory,Computer programming; Computer science; Cognition; CS education; CS education research; Learning science; Research questions; Research studies; Socio-cultural theories; Theory; Education computing
Integrating testing into software engineering courses supported by a collaborative learning environment,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914164948&doi=10.1145%2f2648787&partnerID=40&md5=996aec2d31da071888a4b3bbbea11a35,"As software becomesmore ubiquitous and complex, the cost of software bugs continues to grow at a staggering rate. To remedy this situation, there needs to be major improvement in the knowledge and application of software validation techniques. Although there are several software validation techniques, software testing continues to be one of the most widely used in industry. The high demand for software engineers in the next decade has resulted in more software engineering (SE) courses being offered in academic institutions. However, due to the number of topics to be covered in SE courses, little or no attention is given to software testing, resulting in students entering industry with little or no testing experience. We propose a minimally disruptive approach of integrating software testing into SE courses by providing students access to a collaborative learning environment containing learning materials on testing techniques and testing tools. In this article, we describe the learning environment and the studies conducted to measure the benefits accrued by students using the learning environment in the SE courses. © 2014 ACM.",Code coverage; Course management; Software testing; Testing tutorials; Unit testing,Application programs; Computer aided instruction; Program debugging; Software testing; Students; Teaching; Testing; Academic institutions; Code coverage; Collaborative learning environment; Course management; Learning environments; Software engineering course; Software validation; Unit testing; Integration testing
An achievement degree analysis approach to identifying learning problems in object-oriented programming,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914095567&doi=10.1145%2f2648794&partnerID=40&md5=172bb7cb24cbc7d4194973fc5fd5b588,"Students often face difficulties while learning object-oriented programming (OOP) concepts. Many papers have presented various assessment methods for diagnosing learning problems to improve the teaching of programming in computer science (CS) higher education. The research presented in this article illustrates that although max-min composition is a method to analyze and determine student learning problems, when performed on an OOP exam, it shows some limitations. The max-min composition may be suitable for multiple choice questions (MCQs), but it is not adequate for questions with a more complex structure, as in the OOP assessment. Therefore, the purpose of this research is to present the incorporation of a concepteffect propagation approach and the Handy Instrument for Course Level Assessment (HI-Class) approach to promote a modified valid analysis approach, the Achievement Degree Analysis (ADA). The ADA approach will diagnose students'problem outcomes and demonstrate its effectiveness within the context of an OOP course. © 2014 ACM.",Achievement degree analysis; Concept-effect propagation approach; Max-min composition,Ada (programming language); Education computing; Students; Teaching; Achievement degree analysis; Analysis approach; Complex structure; Concept-effect propagation approach; Max-min composition; Multiple choice questions; Student learning; Teaching-of-programming; Object oriented programming
Using UML modeling to facilitate three-tier architecture projects in software engineering courses,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914115948&doi=10.1145%2f2635831&partnerID=40&md5=920075b22d32845379c348929222a4a8,"This article presents the use of a model-centric approach to facilitate software development projects conforming to the three-tier architecture in undergraduate software engineering courses. Many instructors intend that such projects create software applications for use by real-world customers. While it is important that the first version of these applications satisfy the customer by providing the functionality the customer expects and perform reliably and efficiently, it is equally important to be able to accommodate the customer's change requests over the period of the product's lifetime. The challenges in achieving these goals include the lack of real-world software development experience among the student developers and the fact that postdeployment change requests will almost certainly have to be handled by students who are not among the original developers. In this article, we describe how a model-centric approach using UML has been effective in enabling students to develop and maintain eight software applications for small businesses over a 9-year period. We discuss the characteristics of our modeling technique, which include the application of modeling patterns and quality check rules that enable students to create a model that can be clearly and consistently mapped to code. We also describe the nature of these mapping-to-code techniques, emphasizing how they reduce coupling among the implementation's classes. We then discuss our experiences in the classroom with these techniques, focusing on how we have improved our teaching over the years based on the analysis of student performance and feedback. Finally, we compare our approach to related work teaching modeling and the development and maintenance of code in software engineering courses with both extensive and minimal modeling. © 2014 ACM.",Java; Mapping techniques; Model-based development; Three-tier architecture,Application programs; Client server computer systems; Codes (symbols); Curricula; Customer satisfaction; Mapping; Sales; Students; Teaching; Technical presentations; Development experiences; Java; Mapping techniques; Model based development; Software development projects; Software engineering course; Three-tier architecture; Undergraduate software engineering; Software design
Cybersecurity education: Bridging the gap between hardware and software domains,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898062801&doi=10.1145%2f2538029&partnerID=40&md5=a43206750a9f1433836b5ba385df8eb8,"With the continuous growth of cyberinfrastructure throughout modern society, the need for secure computing and communication is more important than ever before. As a result, there is also an increasing need for entry-level developers who are capable of designing and building practical solutions for systems with stringent security requirements. This calls for careful attention to algorithm choice and implementation method, as well as trade-offs between hardware and software implementations. This article describes motivation and efforts taken by three departments at Rochester Institute of Technology (Computer Engineering, Computer Science, and Software Engineering) that were focused on creating a multidisciplinary course that integrates the algorithmic, engineering, and practical aspects of security as exemplified by applied cryptography. In particular, the article presents the structure of this new course, topics covered, lab tools and results from the first two spring quarter offerings in 2011 and 2012. © 2014 ACM.",Cybersecurity education; Hardware and software design; Multidisciplinary applied cryptography; Security-oriented curriculum,Algorithms; Cryptography; Curricula; Software engineering; Applied cryptography; Cyber-security educations; Hardware and software; Hardware and software designs; Hardware and software implementations; Multidisciplinary course; Rochester institute of technologies; Security requirements; Hardware
Computational thinking in elementary and secondary teacher education,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898065176&doi=10.1145%2f2576872&partnerID=40&md5=9211708dfb4128e7cfb7134dba8ed139,"Computational thinking (CT) is broadly defined as the mental activity for abstracting problems and formulating solutions that can be automated. In an increasingly information-based society, CT is becoming an essential skill for everyone. To ensure that students develop this ability at the K-12 level, it is important to provide teachers with an adequate knowledge about CT and how to incorporate it into their teaching. This article describes a study on designing and introducing computational thinking modules and assessing their impact on preservice teachers' understanding of CT concepts, as well as their attitude towards computing. Results demonstrate that introducing computational thinking into education courses can effectively influence preservice teachers' understanding of CT concepts. © 2014 ACM.",Computational thinking; Teacher education; Teaching/learning strategies,Computer programming; Computer science; Computational thinkings; Education course; Elementary and secondary teachers; Mental activity; Pre-service teacher; Teacher education; Teaching/learning strategy; Teaching
Fiction as an introduction to computer science research,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898068092&doi=10.1145%2f2576873&partnerID=40&md5=78ea132a05c7f19435c46f71a7151f89,"The undergraduate computer science curriculum is generally focused on skills and tools; most students are not exposed to much research in the field, and do not learn how to navigate the research literature. We describe how fiction reviews (and specifically science fiction) are used as a gateway to research reviews. Students learn a little about current or recent research on a topic that stirs their imagination, and learn how to search for, read critically, and compare technical papers on a topic related to their chosen science fiction book, movie, or TV show. © 2014 ACM.",Artificial intelligence; Research; Science fiction,Artificial intelligence; Computer science; Curricula; Students; Computer science curricula; Computer science research; Exposed to; Recent researches; Research review; Science fictions; Research
"A crafts-oriented approach to computing in high school: Introducing computational concepts, practices, and perspectives with electronic textiles",2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898064688&doi=10.1145%2f2576874&partnerID=40&md5=7a990e6eae14dc96438f0171b96d6458,"In this article, we examine the use of electronic textiles (e-textiles) for introducing key computational concepts and practices while broadening perceptions about computing. The starting point of our work was the design and implementation of a curriculum module using the LilyPad Arduino in a pre-AP high school computer science class. To understand students' learning, we analyzed the structure and functionality of their circuits and program code as well as their design approaches to making and debugging their e-textile creations and their views of computing. We also studied students' changing perceptions of computing. Our discussion addresses the need for and design of scaffolded challenges and the potential for using crafts materials and activities such as e-textiles for designing introductory courses that can broaden participation in computing. © 2014 ACM.",Education; Electronic textiles; K-12,Curricula; Education; Program debugging; Design and implementations; Design approaches; E-textiles; Electronic textiles; High school; Introductory course; K-12; Program code; Textiles
A case study of the introduction of computer science in NZ schools,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905821922&doi=10.1145%2f2602485&partnerID=40&md5=6e0df2d3a54b872ef32a1ad7d48c51f5,"For many years computing in New Zealand schools was focused on teaching students how to use computers, and there was little opportunity for students to learn about programming and computer science as formal subjects. In this article we review a series of initiatives that occurred from 2007 to 2009 that led to programming and computer science being made available formally as part of the National Certificate in Educational Achievement (NCEA), the main school-leaving assessment, in 2011. The changes were phased in from 2011 to 2013, and we review this process using the Darmstadt model, including describing the context of the school system, the socio-cultural factors in play before, during and after the changes, the nature of the new standards, the reactions and roles of the various stakeholders, and the teaching materials and methods that developed. The changes occurred very quickly, and we discuss the advantages and disadvantages of having such a rapid process. In all these changes, teachers have emerged as having a central role, as they have been key in instigating and implementing change. © 2014 ACM.",Computer science education; Darmstadt model; High school,Computer programming; Students; Computer Science Education; High school; New zealand; Rapid process; School systems; Sociocultural factors; Teaching materials; Teaching
"Georgia computes! An intervention in a US state, with formal and informal education in a policy context",2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905828839&doi=10.1145%2f2602488&partnerID=40&md5=bdc7c3bc9750551d17ff58ab2e33df63,"Georgia Computes! (GaComputes) was a six-year (2006-2012) project to improve computing education across the state of Georgia in the United States, funded by the National Science Foundation. The goal of GaComputes was to broaden participation in computing and especially to engage more members of underrepresented groups which includes women, African Americans, and Hispanics. GaComputes' interventions were multi-faceted and broad: summer camps and after-school/weekend programs for 4th-12th grade students, professional development for secondary teachers, and professional development for post-secondary instructors/faculty. All of the efforts were carefully evaluated by an external team (led by the third and fourth authors), which provides us with an unusually detailed view into a computing education intervention across a region (about 59K square miles, about 9.9 million residents). Our dataset includes evaluations from over 2,000 students who attended after-school or weekend workshops, over 500 secondary school teachers who attended professional development, 120 post-secondary teachers who attended professional development, and over 2,000 students who attended a summer day (non-residential) camp. GaComputes evaluations provide insight into details of interventions and into influences on student motivation and learning. In this article, we describe the results of these evaluations and describe how GaComputes broadened participation in computing in Georgia through both direct interventions and indirect support of other projects. © 2014 ACM.",Assessment; Broadening participation; Curriculum; Education research; Motivation; Retention; Underrepresented minorities; Women,Curricula; Motivation; Professional aspects; Assessment; Broadening participation; Education research; Retention; Underrepresented minorities; Women; Students
Computer science education in French secondary schools: Historical and didactical perspectives,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905819681&doi=10.1145%2f2602486&partnerID=40&md5=5372dda5c4e1558e9e894427b6c099a9,"Computer science as a school subject in France is characterized by a succession of promising starts that have not yet been transformed into perennial solutions. The main goal of this article is to analyze this complex situation from a historical perspective, and describe the current rebirth of an optional Computer Science course in the last year of secondary education, together with other initiatives that might contribute to introducing Computer Science as a school subject. We also aim at discussing some perspectives for the future to support a better informatics education for all students. The sources we have used are mainly historical and administrative, however we have also drawn on empirical research and surveys conducted since the seventies. This article therefore takes both retrospective and perspective viewpoints. © 2014 ACM.",Computer science curriculum in French high schools; Computer science teachers,Curricula; Teaching; Computer Science course; Computer Science Education; Computer science teachers; Empirical research; High school; Historical perspective; Informatics education; Secondary schools; Education computing
Informatics education in Italian secondary schools,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905865006&doi=10.1145%2f2602490&partnerID=40&md5=2456b3b6c77f33bb06858ee2775f391d,"This article describes the state of informatics education in the Italian secondary schools, highlighting how the learning objectives set up by the Ministry of Education are difficult to meet, due to the fact that the subject is often taught by teachers not holding an informatics degree, the lack of suitable teaching material and the expectations of pupils and families, who tend to identify informatics with the use of computer applications. © 2014 ACM.",Informatics educatiOn; Secondary school,Teaching; Informatics; Informatics education; Learning objectives; Ministry of Education; Secondary schools; Teaching materials; Information science
Programming in school: Look back to move forward,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905856931&doi=10.1145%2f2602487&partnerID=40&md5=6d1f02e0a983e9fb2292600670c0de54,"In this article, the development of the Swedish informatics curriculum during the 1970s, 1980s and 1990s is studied and described. The study's design is inspired by the curriculum theory presented by Lindensjö and Lundgren [2000], who suggest using the concept of arenas (the arenas of enactment, transformation and realisation) when discussing curriculum development. Data collection in this study comprises activities and actors in the arenas of enactment and transformation. Collected data include contemporary articles, journals, reports, booklets, government documents and archived documents. Findings show that informatics education in Sweden evolved from primarily focusing on programming knowledge related to automatic data processing and offered exclusively in vocational education (the 1960s and 1970s) to later (early 1980s) being introduced in the upper secondary school curriculum under the heading Datakunskap. The enactment of the informatics curriculum in 1983 encompassed programming, system development and computing in relation to applied sciences and civics. Mathematics teachers did much of the experimental work. It is shown that the competencies of upper secondary school teachers at the time rarely corresponded to the demands of the subject (content knowledge, resources and pedagogical skills). Stereotypical examples were therefore developed to support teachers in instructing about the subject content. When implemented in the theoretical natural science-programme, system development/systemisation was transformed into a twofold issue, comprising vocational attributes and societal aspects of computer programming. The implementation of today's informatics education, including programming in the curriculum, should draw from lessons learned from history. For a successful outcome, this study emphasises the necessity to understand 1) the common incentives for introducing computer programming in the curriculum, 2) the requirement for teachers' pedagogical content knowledge and 3) the stakeholders' role in the curriculum development process. © 2014 ACM.",Automatic data processing (ADP); Computer programming; Curriculum development; Informatics education; Ministry of Education; National Board of Education; Teacher; Upper secondary school,Computer programming; Information science; Teaching; Automatic data processing; Curriculum development; Informatics education; Ministry of Education; Secondary schools; Teacher; Curricula
Perspectives and visions of computer science education in primary and secondary (K-12) schools,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905820906&doi=10.1145%2f2602482&partnerID=40&md5=65f573854b5d42664ec8e722888cf4f6,"In view of the recent developments in many countries, for example, in the USA and in the UK, it appears that computer science education (CSE) in primary or secondary schools (K-12) has reached a significant turning point, shifting its focus from ICT-oriented to rigorous computer science concepts. The goal of this special issue is to offer a publication platform for soundly based in-depth experiences that have been made around the world with concepts, approaches, or initiatives that aim at supporting this shift. For this purpose, the article format was kept as large as possible, enabling the authors to explain many facets of their concepts and experiences in detail. Regarding the structure of the articles, we had encouraged the authors to lean on the Darmstadt Model, a category system that was developed to support the development, improvement, and investigation of K-12 CSE across regional or national boundaries. This model could serve as a unifying framework that might provide a proper structure for a well-founded critical discussion about the future of K-12 CSE. Curriculum designers or policy stakeholders, who have to decide, which approach an upcoming national initiative should follow, could benefit from this discussion as well as researchers who are investigating K12 CSE in any regard. With this goal in mind, we have selected six extensive and two short case studies from the UK, New Zealand, USA/Israel, France, Sweden, Georgia (USA), Russia, and Italy that provide an in-depth analysis of K-12 CSE in their respective country or state. © 2014 ACM.",CS education; Curricula; K-12 education; Schools,Curricula; Societies and institutions; Computer Science Education; Critical discussions; CS education; In-depth analysis; K-12 education; National initiatives; Schools; Secondary schools; Computer vision
Editorial: Computing education in (K-12) schools from a cross-national perspective,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905823297&doi=10.1145%2f2602481&partnerID=40&md5=716ebbfc938dde7b59e41800b4fb4b32,"This special issue on computing education in (K-12) schools represents considerable effort by the editorial team, authors, and reviewers. It provides a series of country-specific case studies of computing education in schools that highlights the way in which curricula emerge from each country's specific historical and cultural circumstances. As a result, not only is there much to learn from each of the case studies, but there are additional lessons in the commonalities and generalizations obtainable only by having a rich set of case studies such as these that can be viewed comparatively. © 2014 ACM.",CS education; Curricula; K-12 education; Schools,Curricula; Computing education; Cross-national; CS education; K-12 education; Schools; Societies and institutions
Restart: The resurgence of computer science in UK schools,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905856554&doi=10.1145%2f2602484&partnerID=40&md5=ec1f23a259631c1b3a32a1547fa966a9,"Computer science in UK schools is undergoing a remarkable transformation. While the changes are not consistent across each of the four devolved nations of the UK (England, Scotland, Wales and Northern Ireland), there are developments in each that are moving the subject to become mandatory for all pupils from age 5 onwards. In this article, we detail how computer science declined in the UK, and the developments that led to its revitalisation: a mixture of industry and interest group lobbying, with a particular focus on the value of the subject to all school pupils, not just those who would study it at degree level. This rapid growth in the subject is not without issues, however: there remain significant forthcoming challenges with its delivery, especially surrounding the issue of training sufficient numbers of teachers. We describe a national network of teaching excellence which is being set up to combat this problem, and look at the other challenges that lie ahead. © 2014 ACM.",Computer science education; High school; Teachers,Personnel training; Computer Science Education; High school; Interest groups; Northern Ireland; Rapid growth; Scotland; Teachers; Teaching excellence; Teaching
School subject informatics (Computer Science) in Russia: Educational relevant areas,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905819697&doi=10.1145%2f2602489&partnerID=40&md5=508885f5bf6d6c320176ce091200be57,"This article deals with some aspects of studying Informatics in Russian schools. Those aspects are part of the 'third dimension' of the Darmstadt model (they are also projected on the other two dimensions of this model) and include evolution of the subject, regulatory norms conforming to the Federal Educational Standards, the learning objectives, the required learning outcomes, and the Unified National Examination in Informatics, which is required for admission to a number of university programs. It is interesting to note that correspondence between requirements for the outcomes of learning Informatics in Russian school and the requirements of K-12 Computer Science Standards (USA) is quite satisfactory. It is noteworthy that the relatively high level of school education in Informatics in Russia is determined by the well-established methodological system with a 30-year history, the subject's being on the list of core disciplines at school, as well as the existence of a state-sponsored system of education teachers of Informatics. © 2014 ACM.",Curriculum issues; Didactic software; Education policies; Educational standards; Extracurricular activities; History of Informatics in school; Learning objectives and outcomes; Qualification and professional experience of teachers; Structural components of Informatics; Textbooks; Unified National Exam,Curricula; Standards; Teaching; Textbooks; Education policies; Educational standards; Extracurricular activities; Informatics; Learning objectives; Professional experiences; Unified National Exam; Information science
A tale of two countries: Successes and challenges in K-12 computer science education in Israel and the United States,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84905824241&doi=10.1145%2f2602483&partnerID=40&md5=70e3a6eeac7890c4f03fe083c66dd7c5,"This article tells a story of K-12 computer science in two different countries. These two countries differ profoundly in culture, language, government and state structure, and in their education systems. Despite these differences, however, they share the pursuit of excellence and high standards in K-12 education. In Israel, curriculum is determined at the national level. The high-school computer science curriculum has been in place for more than 20 years and is offered in all schools as an elective similar to biology, chemistry, and physics. The picture in the United States is more complex and therefore less amenable to generalization. Because educational policy is set at the state and sometimes even at the school district level, access to computer science courses and the content of those courses can vary even for schools within the same district. This article will describe the development of the curricula/standards in both countries and the current situation, focusing on common issues and challenges in areas such as equity and teacher training. © 2014 ACM.",Computer science; Computer science educators; Computer science teachers,Computer science; Personnel training; Teaching; Computer Science course; Computer science curricula; Computer Science Education; Computer science teachers; Current situation; Education systems; Educational policy; Issues and challenges; Curricula
CSTutor: A sketch-based tool for visualizing data structures,2014,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84898071306&doi=10.1145%2f2535909&partnerID=40&md5=432a21a5feb9eb4bb29ed4c963622f7b,"We present CSTutor, a sketch-based interface designed to help students understand data structures, specifically Linked Lists, Binary Search Trees, AVL Trees, and Heaps. CSTutor creates an environment that seamlessly combines a user's sketched diagram and code. In each of these data structure modes, the user can naturally sketch a data structure on the canvas just as they would on a white board. CSTutor analyzes the user's diagrams in real time, and automatically generates code in a separate code view to reflect any changes the user has made. Additionally, the code can also be edited and any new code changes will animate the data structure drawn on the canvas. The connection between the data structure drawn on the canvas and the code implementation is intended to bridge the gap between the conceptual diagram of a data structure and the actual implementation. We also present the results of two semester-long studies using CSTutor in a CS1 course. The results indicate that students preferred CSTutor and were more engaged using it than a standard whiteboard lecture; however, results were mixed in quiz and exam performance. © 2014 ACM.",Animation; Data structures; Sketch-based input; Visualization,Data; Forestry; Structures; Trees; Animation; Data structures; Flow visualization; Forestry; Binary search trees; Code changes; Conceptual diagrams; Real time; Sketch-based inputs; Sketch-based interfaces; Structure mode; White board; Binary trees
Toward a singleton undergraduate computer graphics course in small and medium-sized colleges,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84888169846&doi=10.1145%2f2522689&partnerID=40&md5=322f1eacec01bbbc53c0e370bf6b1c92,"This article discusses the evolution of a single undergraduate computer graphics course over five semesters, driven by a primary question: if one could offer only one undergraduate course in graphics, what would it include? This constraint is relevant to many small and medium-sized colleges that lack resources, adequate expertise, and enrollment to sustain multiple courses in graphics that spread out its vast and evolving content. We strive to include material that would provide (1) a basic but solid theoretical foundation, (2) topics, data structures, and algorithms that are most practically used, (3) ample experience in actual graphics programming and (4) a basic awareness of advanced topics. We have a secondary objective of relating and complementing computer graphics knowledge and programming with topics in other computer science courses to provide a more cohesive understanding to our students. We achieve both objectives by using an ""early-scenegraphs"" approach to progressively create graphics applications that use XML-based modeling and both pipeline-based and ray traced rendering. We report and analyze results that show how students were able to achieve more complex results within similar time periods while largely retaining prior average student performance in the course. Students also report higher rates of satisfaction with the course when it follows our proposed approach. Pedagogically our main contribution is an evolving blueprint for a single undergraduate CG course that offers flexibility to emphasize different aspects like modeling, rendering, etc. according to the instructor's and students' interests, while aligning the course better within the computer science curriculum especially when resources are limited. Copyright © 2013 by the Association for Computing Machinery (ACM).",Computer graphics; Graphics education; Graphics in small colleges; Ray tracing; Scene graphs,Computer graphics; Computer science; Curricula; Ray tracing; Societies and institutions; Teaching; Computer Science course; Computer science curricula; Graphics applications; Graphics education; Graphics in small colleges; Scene graph; Theoretical foundations; Undergraduate Courses; Students
An empirical investigation into programming language syntax,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84888148404&doi=10.1145%2f2534973&partnerID=40&md5=cfe2a21c963bc98ea18cbdac5c1f4fb8,"Recent studies in the literature have shown that syntax remains a significant barrier to novice computer science students in the field. While this syntax barrier is known to exist, whether and how it varies across programming languages has not been carefully investigated. For this article, we conducted four empirical studies on programming language syntax as part of a larger analysis into the, so called, programming language wars. We first present two surveys conducted with students on the intuitiveness of syntax, which we used to garner formative clues on what words and symbols might be easy for novices to understand. We followed up with two studies on the accuracy rates of novices using a total of six programming languages: Ruby, Java, Perl, Python, Randomo, and Quorum. Randomo was designed by randomly choosing some keywords from the ASCII table (a metaphorical placebo). To our surprise, we found that languages using a more traditional C-style syntax (both Perl and Java) did not afford accuracy rates significantly higher than a language with randomly generated keywords, but that languages which deviate (Quorum, Python, and Ruby) did. These results, including the specifics of syntax that are particularly problematic for novices, may help teachers of introductory programming courses in choosing appropriate first languages and in helping students to overcome the challenges they face with syntax. Copyright © 2013 by the Association for Computing Machinery (ACM).",Novice programmers; Programming languages; Syntax,Ada (programming language); C (programming language); Computer programming; Computer programming languages; Ruby; Students; Syntactics; Teaching; Accuracy rate; Computer science students; Empirical investigation; Empirical studies; Introductory programming course; Novice programmer; Syntax; Syntax barrier; Java programming language
An experimental method for the active learning of greedy algorithms,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84888153206&doi=10.1145%2f2534972&partnerID=40&md5=ae4e18bc684934fbcbb55d7158a06b15,"Greedy algorithms constitute an apparently simple algorithm design technique, but its learning goals are not simple to achieve.We present a didacticmethod aimed at promoting active learning of greedy algorithms. The method is focused on the concept of selection function, and is based on explicit learning goals. It mainly consists of an experimental method and the interactive system, GreedEx, that supports it. We also present our experience of five years using the didactic method and the evaluations we conducted to refine it, which are of two kinds: usability evaluations of GreedEx and analysis of students' reports. Usability evaluations revealed a number of opportunities of improvement for GreedEx, and the analysis of students' reports showed a number of misconceptions. We made use of these findings in several ways, mainly: improving GreedEx, elaborating lecture notes that address students' misconceptions, and adapting the class and lab sessions and materials. As a consequence of these actions, our didactic method currently satisfies its initial goals. The article has two main contributions. First, the didactic method itself can be valuable for computer science educators in their teaching of algorithms. Secondly, the refinement process we have carried out, which was a multifaceted, medium-term action research, can be of interest to researchers of technology-supported computing education, since it illustrates how the didactic method was integrated into our educational practice. Copyright © 2013 by the Association for Computing Machinery (ACM).",Active learning; Computer science education; Greedy algorithms; Misconceptions; Usability; Visualization,Engineering education; Flow visualization; Students; Active Learning; Computer Science Education; Greedy algorithms; Misconceptions; Usability; Learning algorithms
Introducing discipline-based computing in undergraduate engineering education,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84888169362&doi=10.1145%2f2534971&partnerID=40&md5=cf7128b0310cd11a89f0a9b5fc4b7a77,"This article investigates the effectiveness of a course employing a discipline-based computing approach. The research questions driving this study were: (1) Can experiences with discipline-based computing promote students' acquisition and application of foundational computing concepts and procedures? (2) How do students perceive and experience the integration of discipline-based computing as relevant to their future career goals? (3) How do students perceive the structure of the class as useful and engaging for their learning? We used qualitative and quantitative research methods to approach the research questions. The population studied was 20 engineering undergraduates from Johns Hopkins University. Results of this study suggest that students performed proficiently in applying computing methods, procedures, and concepts to the solution of well-structured engineering problems. Results also suggest that student self-perceptions of their overall computing abilities and their abilities to specifically solve engineering problems shifted from low to high confidence. Students consistently found the course to be important and useful for their studies and their future careers. They also found the course to be of very high quality and identified the instructors and the teaching and feedback methods employed as very useful for their learning. Finally, students also described the course as very challenging compared with other courses in their own department and at the university in general. Copyright © 2013 by the Association for Computing Machinery (ACM).",Discipline-based computing; Engineering domains; How people learn framework; Innovative pedagogies; Student-centered pedagogies,Professional aspects; Research; Teaching; Discipline-based; Engineering domains; How people learn; Innovative pedagogies; Student-centered pedagogies; Students
A review of generic program visualization systems for introductory programming education,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886090580&doi=10.1145%2f2490822&partnerID=40&md5=2556d539a125b6c210fb2ee84e546cb9,"This article is a survey of program visualization systems intended for teaching beginners about the runtime behavior of computer programs. Our focus is on generic systems that are capable of illustrating many kinds of programs and behaviors. We inclusively describe such systems from the last three decades and review findings from their empirical evaluations. A comparable review on the topic does not previously exist; ours is intended to serve as a reference for the creators, evaluators, and users of educational program visualization systems. Moreover, we revisit the issue of learner engagement which has been identified as a potentially key factor in the success of educational software visualization and summarize what little is known about engagement in the context of the generic program visualization systems for beginners that we have reviewed; a proposed refinement of the frameworks previously used by computing education researchers to rank types of learner engagement is a side product of this effort. Overall, our review illustrates that program visualization systems for beginners are often short-lived research prototypes that support the user-controlled viewing of program animations; a recent trend is to support more engaging modes of user interaction. The results of evaluations largely support the use of program visualization in introductory programming education, but research to date is insufficient for drawing more nuanced conclusions with respect to learner engagement. On the basis of our review, we identify interesting questions to answer for future research in relation to themes such as engagement, the authenticity of learning tasks, cognitive load, and the integration of program visualization into introductory programming pedagogy. Copyright © 2013 by the Association for Computing Machinery (ACM).",CS1; Engagement taxonomy; Introductory programming education; Literature review; Notional machine; Program dynamics; Program visualization; Software visualization,Research; Visualization; CS1; Engagement taxonomies; Introductory programming; Literature reviews; Program visualization; Software visualization; Java programming language
Using POGIL to help students learn to program,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883569318&doi=10.1145%2f2499947.2499950&partnerID=40&md5=c4c0227a77a42172d6bd022d9a28a6d7,"POGIL has been successfully implemented in a scientific computing course to teach science students how to program in Python. Following POGIL guidelines, the authors have developed guided inquiry activities that lead student teams to discover and understand programming concepts. With each iteration of the scientific computing course, the authors have refined the activities and learned how to better adapt POGIL for the computer science classroom. This article details how POGIL activities differ from both traditional computer science labs and other active-learning pedagogies. Background is provided on POGIL's effectiveness. The article then includes a full description of how POGIL activities were used in the scientific computing course, as well as an example POGIL activity on recursion. Discussion is provided on how to facilitate and develop POGIL activities. Quotes from student evaluations and an assessment on how well students learned to program are provided. © 2013 ACM.",Active learning; Inquiry-based learning; POGIL; Process skills; Process-oriented guided inquiry learning,Computer science; Computer software; Teaching; Active Learning; Guided inquiry; Inquiry-based learning; POGIL; Programming concepts; Science classroom; Student evaluation; Traditional computers; Students
Talking about code: Integrating pedagogical code reviews into early computing courses,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883588236&doi=10.1145%2f2499947.2499951&partnerID=40&md5=e0a84ec0720b62d31daf3538a23577c9,"Given the increasing importance of soft skills in the computing profession, there is good reason to provide students withmore opportunities to learn and practice those skills in undergraduate computing courses. Toward that end, we have developed an active learning approach for computing education called the Pedagogical Code Review (PCR). Inspired by the code inspection process used in the software industry, a PCR is a collaborative activity in which a small team of students, led by a trained moderator: (a) walk through segments of each other's programming solutions, (b) check the code against a list of best coding practices, and (c) discuss and log issues that arise. To evaluate the viability and effectiveness of this approach, we conducted a series of four mixed-method empirical studies of various implementations of PCRs in CS1 courses at Washington State University. The first study validated the viability of the PCR activity. Using a quasi-experimental design, the final three studies evaluated two alternative implementations of PCRs-face-to-face and online. Our results provide evidence that PCRs can promote positive attitudinal shifts, and hone skills in critical review, teamwork, and communication. Based on our findings, we present a set of best practices for implementing PCRs. © 2013 ACM.",Computer-supported collaborative learning; Pedagogical code reviews; Studio-based learning and instruction,C (programming language); Software engineering; Students; Code review; Collaborative activities; Computer Supported Collaborative Learning; Computing education; Empirical studies; Programming solutions; Studio-based learning and instruction; Washington State University; Teaching
Teaching human-centered security using nontraditional techniques,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883570890&doi=10.1145%2f2492687&partnerID=40&md5=cdd9edf482a2943bf3560788cc5ce91d,"Computing science students amass years of programming experience and a wealth of factual knowledge in their undergraduate courses. Based on our combined years of experience, however, one of our students' abiding shortcomings is that they think there is only one correct answer to issues in most courses: an idealistic stance. Human-centered security, as well as other areas, requires students to understand that they have to weigh up a number of different possible solutions, and satisfice, rather than choose the one that is undeniably the best. In other words, they need to adopt a more realistic stance. Lecture-based teaching cannot develop this facility, due to its inability to engage students deeply with the issues and possible solutions. We argue that depth (in terms of understanding the complexity and issues involved) as well as breadth (in terms of appreciating the different positions taken by users on these issues) are essential for developing the realistic stance. This article reports on an instructional design that was used to help students become more realistic in their decision making. The design is based on seven educational strategies that, in tandem, help students to see the depth and breadth of topics in the course. We detail the instructional design and its application to three topic areas in the course, and report on the outcomes. We found evidence that students did indeed develop the depth and breadth we were hoping for. In concluding, we reflect on the design and the positive result, and propose changes to further improve the course. © 2013 ACM.",Activity-based learning; Flip teaching; Humans; Peer instruction; Problem-based learning; Realism; Security,Curricula; Design; Activity-based learning; Humans; Peer instruction; Problem based learning; Realism; Security; Students
"Cooperative learning instructional methods for CS1: Design, implementation, and evaluation",2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883562667&doi=10.1145%2f2492686&partnerID=40&md5=3b78775fdf5e0d26252f94492a54f357,"Cooperative learning is a well-known instructional technique that has been applied with a wide variety of subject matter and a broad spectrum of populations. This article briefly reviews the principles of cooperative learning, and describes how these principles were incorporated into a comprehensive set of cooperative learning activities for a CS1 course. In each activity, specific roles are assigned to group members in order to highlight important concepts and to enhance the overall functioning of the group. The group processing is followed by a whole-class debriefing led by the instructor, which works in tandem with the group activity to help students improve their understanding of the material. The effectiveness of these cooperative learning activities was assessed in a series of educational research studies which spanned three academic years and included two different instructors. The results of these studies show statistically significant benefits from the cooperative learning approach, both overall and for a broad range of subgroups of students. The article concludes with suggestions for faculty members who may want to use these cooperative learning activities in the classroom, or to develop their own activities along similar lines. © 2013 ACM.",Classroom management; Cooperative learning; CS1; Group formation; Pedagogy,Computer science; Classroom management; Cooperative learning; CS1; Group formations; Pedagogy; Teaching
Introduction to special issue on alternatives to lecture in the computer science classroom,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883570726&doi=10.1145%2f2499947.2499948&partnerID=40&md5=e31e05d9d85d35ab46425e8d25380ae6,"Active learning in the college classroom has long been promoted as more effective than traditional lecture. Increased adoption of these instructional practices is recommended in several prominent national reports as well as a new National Science Foundation program. The goal of this special issue is to share evidence-based instructional practices that have been applied to computer science education. With collaborative learning, students interact with each other to achieve a common learning goal. Peer Instruction is an active pedagogy pioneered in Physics education in which most lecture time is replaced with students answering carefully designed multiple-choice questions. Chemistry faculty developed and refined an inquiry-based pedagogy called Process-Oriented Guided-Inquiry Learning (POGIL). The fields of Architecture and Fine Arts promote student collaboration in studio-based learning. © 2013 ACM.",Active learning; Collaborative learning; Computer science education; Pedagogy,Students; Active Learning; Collaborative learning; Computer Science Education; Inquiry-based pedagogy; Instructional practices; Multiple-choice questions; National Science Foundations; Pedagogy; Teaching
Can peer instruction be effective in upper-division computer science courses?,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883580985&doi=10.1145%2f2499947.2499949&partnerID=40&md5=131202bf42bd1a9932380824fe1a6067,"Peer Instruction (PI) is an active learning pedagogical technique. PI lectures present students with a series of multiple-choice questions, which they respond to both individually and in groups. PI has been widely successful in the physical sciences and, recently, has been successfully adopted by computer science instructors in lower-division, introductory courses. In this work, we challenge readers to consider PI for their upper-division courses as well. We present a PI curriculum for two upper-division computer science courses: Computer Architecture and Theory of Computation. These courses exemplify several perceived challenges to the adoption of PI in upper-division courses, including: exploration of abstract ideas, development of high-level judgment of engineering design trade-offs, and exercising advanced mathematical sophistication. This work includes selected course materials illustrating how these challenges are overcome, learning gains results comparing these upper-division courses with previous lower-division results in the literature, student attitudinal survey results (N = 501), and pragmatic advice to prospective developers and adopters. We present three main findings. First, we find that these upper-division courses achieved student learning gains equivalent to those reported in successful lower-division computing courses. Second, we find that student feedback for each class was overwhelmingly positive, with 88% of students recommending PI for use in other computer science classes. Third, we find that instructors adopting the materials introduced here were able to replicate the outcomes of the instructors who developed the materials in terms of student learning gains and student feedback. © 2013 ACM.",Active learning; Classroom response; Clickers; Peer instruction,Computation theory; Computer architecture; Curricula; Design; Students; Active Learning; Classroom response; Clickers; Computer Science course; Mathematical sophistication; Multiple-choice questions; Peer instruction; Theory of computation; Teaching
Notional machines and introductory programming education,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880204596&doi=10.1145%2f2483710.2483713&partnerID=40&md5=013f2433f1a2882c4f7af5010afb6d45,"This article brings together, summarizes, and comments on several threads of research that have contributed to our understanding of the challenges that novice programmers face when learning about the runtime dynamics of programs and the role of the computer in program execution. More specifically, the review covers the literature on programming misconceptions, the cognitive theory of mental models, constructivist theory of knowledge and learning, phenomenographic research on experiencing programming, and the theory of threshold concepts. These bodies of work are examined in relation to the concept of a ""notional machine""- an abstract computer for executing programs of a particular kind. As a whole, the literature points to notional machines as a major challenge in introductory programming education. It is argued that instructors should acknowledge the notional machine as an explicit learning objective and address it in teaching. Teaching within some programming paradigms, such as object-oriented programming, may benefit from using multiple notional machines at different levels of abstraction. Pointers to some promising pedagogical techniques are provided. ©2013 ACM.",Constructivism; CS1; Introductory programming education; Literature review; Mental models; Misconceptions; Notional machine; Phenomenography; Threshold concepts,Object oriented programming; Constructivism; CS1; Introductory programming; Literature reviews; Mental model; Misconceptions; Phenomenography; Threshold Concepts; Abstracting
Teaching programming by emphasizing self-direction: How did students react to the active role required of them?,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880191679&doi=10.1145%2f2483710.2483711&partnerID=40&md5=3dea7e0d4674c7e928cfcae5c10bee53,"Lecturing is known to be a controversial form of teaching. With massed classrooms, in particular, it tends to constrain the active participation of students. One of the remedies applied to programming education is to use technology that can vitalize interaction in the classroom, while another is to base teaching increasingly on programming activities. In this article, we present the first results of an exploratory study, in which we teach programming without lectures, exams, or grades, by heavily emphasizing programming activity, and, in a pedagogical sense, student self-direction. This article investigates how students reacted to the active role required of them and what issues emerged in this setting where self-direction was required. The results indicate three issues that should be taken into account when designing a student-driven course: the challenge of supporting students' theoretical synthesis of the topics to be learned, the individual's opportunities for self-direction in a group work setting, and mismatch between individual learning processes and academic course scheduling. ©2013 ACM.",Programming education; Self-direction,Teaching; Academic course; Exploratory studies; Group work; Individual learning process; Programming activities; Programming education; Self-direction; Teaching programming; Students
"Designing i*CATch: A multipurpose, education-friendly construction kit for physical and wearable computing",2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880251268&doi=10.1145%2f2483710.2483712&partnerID=40&md5=050402c12dd1e02250fbbb42b7108aa4,"This article presents the design and development of i*CATch, a construction kit for physical and wearable computing that was designed to be scalable, plug-and-play, and to provide support for iterative and exploratory learning. It consists of a standardized construction interface that can be adapted for a wide range of soft textiles or electronic boards, a set of functional components, and an easy-to-use hybrid text-graphical integrated development environment. The objective was to design an easily usable, manufacturable and extensible construction kit that can be used in a wide range of teaching tasks for a wide variety of student demographic profiles.We present detailed specifications of our construction kit and explain some of the major design decisions. Experiences in using the kit in multiple teaching environments, ranging from elementary school to postgraduate, demonstrate that the design objectives have been achieved. ©2013 ACM.",Construction toolkits; Creativity; Education; Educational technology; Engineering outreach; Physical computing; Wearable computing,Design; Education; Educational technology; Web services; Construction interfaces; Creativity; Design and Development; Engineering outreach; Functional components; Integrated development environment; Physical computing; Wearable computing; Wearable computers
A down-to-earth educational operating system for up-in-the-cloud many-core architectures,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883539125&doi=10.1145%2f2414446.2414450&partnerID=40&md5=8c8a1d456bb6b741d1ba27907bf8611f,"We present Xipx, the first port of a major educational operating system to a processor in the emerging class of many-core architectures. Through extensions to the proven Embedded Xinu operating system, Xipx gives students hands-on experience with system programming in a distributed message-passing environment. We expose the software primitives needed to maintain coherency between many cores in a system lacking specialized caching hardware. Our proposed series of laboratory assignments adds parallel thread execution and intercore message passing communication to a well-established OS curriculum. © 2013 ACM.",Embedded Xinu; Intel SCC; Many-core; Message passing; Xipx,Curricula; Message passing; Embedded Xinu; Intel SCC; Laboratory assignments; Many-core; Many-core architecture; Message-passing communication; Xipx; Computer architecture
Introduction to the special issue on concurrent and parallel programming,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883510393&doi=10.1145%2f2414446.2414447&partnerID=40&md5=7c9aedbbd7d8e5d0084d204ed48eca80,"Much of computing education research is devoted to introductory computer science. The articles in this special issue look at the other end of the spectrum: learning advanced subjects, here, concurrent, parallel and distributed computation. The articles present four approaches for teaching these subjects using infrastructure that is feasible for educational institutions to acquire: MapReduce in a cloud, remote computing on a multicore system, a network of gaming consoles, and software modeling using formal specification. © 2013 ACM.",Gaming consoles; Graphics processing units; MapReduce; Multicore; Temporal logic of actions; Z,Computer graphics; Education computing; Program processors; Gaming consoles; Graphics Processing Unit; Map-reduce; Multi core; Temporal logic of actions; Z; Parallel programming
Implementing an affordable high-performance computing for teaching-oriented computer science curriculum,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883507262&doi=10.1145%2f2414446.2414449&partnerID=40&md5=792f29980f471effce6e2b154ee9559c,"With the advances in computing power, high-performance computing (HPC) platforms have had an impact on not only scientific research in advanced organizations but also computer science curriculum in the educational community. For example, multicore programming and parallel systems are highly desired courses in the computer science major. However, the high cost of HPC equipment and maintenance makes it hard to be adapted into a conventional computer science curriculum. Specifically, teaching-oriented institutions cannot afford an HPC system due to the high cost, lack of experience, and smaller research infrastructure. The main objective of this article is to present an affordable and easy-to-use high-performance cluster system for teaching-oriented computer science curriculums. In order to address this, we have designed and implemented an affordable high-performance cluster system based on the PlayStation 3 (PS3). For the performance evaluation of the PS3 cluster, we conducted a benchmarking test, that is, matrix multiplication, with different numbers of synergistic processing elements (SPEs) and nodes. As a result, it was concluded that the PS3Cluster provides enough computing power as an HPC for computer science courses, while the total cost is less than 10% of an existing cluster system on the market that has similar performance. In addition, the implemented PS3Cluster system has been used for computer science courses, such as Parallel and Distributed Databases and Parallel Programming. © 2013 ACM.",Curriculum; High-performance computing; Parallel computation,Cluster analysis; Costs; Curricula; Parallel programming; Computer Science course; Computer science curricula; Computer science curriculum; Conventional computers; High-performance clusters; High-performance computing; Parallel Computation; Research infrastructure; Computer science
Using clouds for MapReduce measurement assignments,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883543363&doi=10.1145%2f2414446.2414448&partnerID=40&md5=bce3db15da676e9cceecd37378d18097,"We describe our experiences teaching MapReduce in a large undergraduate lecture course using public cloud services and the standard Hadoop API. Using the standard API, students directly experienced the quality of industrial big-data tools. Using the cloud, every student could carry out scalability benchmarking assignments on realistic hardware, which would have been impossible otherwise. Over two semesters, over 500 students took our course. We believe this is the first large-scale demonstration that it is feasible to use pay-as-you-go billing in the cloud for a large undergraduate course. Modest instructor effort was sufficient to prevent students from overspending. Average per-pupil expenses in the Cloud were under $45. Students were excited by the assignment: 90% said they thought it should be retained in future course offerings. © 2013 ACM.",Cloud computing; Education; MapReduce,Cloud computing; Computer science; Education; Map-reduce; Pay-as-you-go; Public clouds; Undergraduate Courses; Students
A model-driven approach to teaching concurrency,2013,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883511523&doi=10.1145%2f2414446.2414451&partnerID=40&md5=8e6b55b3756acb656d62971a73614934,"We present an undergraduate course on concurrent programming where formal models are used in different stages of the learning process. The main practical difference with other approaches lies in the fact that the ability to develop correct concurrent software relies on a systematic transformation of formal models of interprocess interaction (so called shared resources), rather than on the specific constructs of some programming language. Using a resource-centric rather than a language-centric approach has some benefits for both teachers and students. Besides the obvious advantage of being independent of the programming language, the models help in the early validation of concurrent software design, provide students and teachers with a lingua franca that greatly simplifies communication at the classroom and during supervision, and help in the automatic generation of tests for the practical assignments. This method has been in use, with slight variations, for some 15 years, surviving changes in the programming language and course length. In this article, we describe the components and structure of the current incarnation of the course - which uses Java as target language - and some tools used to support our method. We provide a detailed description of the different outcomes that the model-driven approach delivers (validation of the initial design, automatic generation of tests, and mechanical generation of code) from a teaching perspective. A critical discussion on the perceived advantages and risks of our approach follows, including some proposals on how these risks can be minimized. We include a statistical analysis to show that our method has a positive impact in the student ability to understand concurrency and to generate correct code. © 2013 ACM.",Ada95; Coding idiom; Concurrency; Correct-by-construction; Formal specifications; Java; Model-driven engineering; Teaching,Ada (programming language); Computer programming languages; Software design; Students; Teaching; Ada95; Coding idiom; Concurrency; Correct-by-construction; Formal Specification; Java; Model-driven Engineering; Automatic programming
Digital hardware design teaching: An alternative approach,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872092972&doi=10.1145%2f2382564.2382565&partnerID=40&md5=8226a9c67db41ea7461b6e539f83ce23,"This article presents the design and implementation of a complete review of undergraduate digital hardware design teaching in the School of Engineering at the University of Edinburgh. Four guiding principles have been used in this exercise: learning-outcome driven teaching, deep learning, affordability, and flexibility. This has identified discrete electronics as key components in the early stages of the curriculum and FPGAs as an economical platform for the teaching of various digital hardware design concepts and techniques in later stages of the curriculum. In particular, the article presents the detailed design and implementation of one digital hardware design laboratory, called Gateway, which introduces students to synchronous digital circuit development from high level functional specifications, uses Verilog for hardware description and FPGAs as an implementation platform. Biggs' theory of constructive alignment was applied in the design of this lab's learning outcomes, lab content, teaching and learning methods, and assessment methods. The lab makes extensive use of multimedia in both lab content delivery and demonstration applications developed by students. Student feedback following the deployment of this lab was overwhelmingly positive and an evaluation of the lab results compared to previous lab offerings' shows the merit of the approach taken. © 2012 ACM 1946-6226/2012/11-ART13 $15.00.",Computer engineering; Constructive alignment; Curriculum design; Digital hardware design; Electrical and electronics engineering; FPGA; Reconfigurable hardware; Verilog,Alignment; Computer hardware description languages; Curricula; Design; Electronics engineering; Field programmable gate arrays (FPGA); Hardware; Laboratories; Reconfigurable hardware; Students; Alternative approach; Assessment methods; Circuit development; Computer engineering; Content delivery; Curriculum designs; Deep learning; Demonstration application; Detailed design; Digital hardware design; Functional specification; Guiding principles; Hardware descriptions; Implementation platforms; Learning outcome; School of engineering; Student feedback; Teaching and learning; University of Edinburgh; Verilog; E-learning
Frances: A tool for understanding computer architecture and assembly language,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872060635&doi=10.1145%2f2382564.2382566&partnerID=40&md5=f2c78517621f838da52aae1bb8b9116e,"Students in all areas of computing require knowledge of the computing device including software implementation at the machine level. Several courses in computer science curricula address these low-level details such as computer architecture and assembly languages. For such courses, there are advantages to studying real architectures instead of simplified examples. However, real architectures and instruction sets introduce complexity that makes them difficult to grasp in a single semester course. Visualization techniques can help ease this burden, unfortunately existing tools are often difficult to use and consequently difficult to adopt in a course where time is already limited. To solve this problem, we present Frances. Frances graphically illustrates key differences between familiar high-level languages and unfamiliar low-level languages and also illustrates how familiar high-level programs behave on real architectures. Key to this tool is that we use a simple Web interface that requires no setup, easing course adoption hurdles. We also include several features that further enhance its usefulness in a classroom setting. These features include graphical relationships between high-level code and machine code, clearly illustrated step-by-step machine state transitions, color coding to make instruction behavior clear, and illustration of pointers. We have used Frances in courses and performed experimental evaluation. Our experiences with Frances in the classroom demonstrate its usability. Most notably, in our experimental setting, students with no computer architecture course experience were able to complete lessons using Frances with no guidance. © 2012 ACM 1946-6226/2012/11-ART14 $15.00.",Architecture; Code generation; Compilers; Education; Frances; Visualization,Architecture; Computer architecture; Education; Flow visualization; High level languages; Program compilers; Teaching; Assembly language; Classroom settings; Code Generation; Color coding; Computer architecture course; Computer science curricula; Computing devices; Experimental evaluation; Frances; High-level program; Instruction set; Low-level language; Machine codes; Machine level; Machine state; Semester course; Software implementation; Visualization technique; Web interface; Curricula
When life and learning do not fit: Challenges of workload and communication in introductory computer science online,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872062892&doi=10.1145%2f2382564.2382567&partnerID=40&md5=a0565c88cb933cc0914808627b457204,"We present the results of an interview study investigating student experiences in two online introductory computer science courses. Our theoretical approach is situated at the intersection of two research traditions: distance and adult education research, which tends to be sociologically oriented, and computer science education research, which has strong connections with pedagogy and psychology. The article reviews contributions from both traditions on student failure in the context of higher education, distance and online education as well as introductory computer science. Our research relies on a combination of the two perspectives, which provides useful results for the field of computer science education in general, as well as its online or distance versions. The interviewed students exhibited great diversity in both socio-demographic and educational background. We identified no profiles that predicted student success or failure. At the same time, we found that expectations about programming resulted in challenges of time-management and communication. The time requirements of programming assignments were unpredictable, often disproportionate to expectations, and clashed with the external commitments of adult professionals. Too little communication was available to access adequate instructor help. On the basis of these findings, we suggest instructional design solutions for adult professionals studying introductory computer science education. © 2012 ACM 1946-6226/2012/11-ART15 $15.00.",Communication; Introductory computer science; Online education; Programming instruction; Qualitative research; Student failure; Workload,Communication; Computer science; Distance education; Research; Teaching; Introductory computer science; On-line education; Programming instruction; Qualitative research; Workload; Students
Computer science education in secondary schools - The introduction of a new compulsory subject,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872074013&doi=10.1145%2f2382564.2382568&partnerID=40&md5=aacc91cc041b57944000d4177070cac0,"In 2004 the German state of Bavaria introduced a new compulsory subject of computer science (CS) in its grammar schools (Gymnasium). The subject is based on a comprehensive teaching concept that was developed by the author and his colleagues during the years 1995-2000. It comprises mandatory courses in grades 6/7 for all students of grammar schools and in grade 9/10 for the students of the science and technology track of this school type. In grades 11 and 12 there are elective courses that qualify for an optional graduation exam in CS. The first students that have attended the course in total graduated in 2011. This article describes the whole project in the form of an extensive case study that is guided by the Darmstadt Model, which was developed as a category system for computer science education in secondary schools by a working group at ITiCSE 2011. This case study is the first (nearly) all-embracing discussion of the whole project that describes the long way from the original concept to the first graduates as well as the internal structure of the subject and the first results. © 2012 ACM 1946-6226/2012/11-ART16 $15.00.",Compulsory subject; Darmstadt Model; Object-oriented modeling and programming; Objects-first,Students; Bavaria; Category systems; Compulsory subject; Computer Science Education; Elective course; Grammar schools; Internal structure; Objectoriented modeling; Objects-first; Science and Technology; Secondary schools; Working groups; Societies and institutions
Exploring experienced professionals' reflections on computing education,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872146548&doi=10.1145%2f2275597.2275601&partnerID=40&md5=038450d1b50c97da27e910b17e87a249,"This exploratory qualitative study examines computing professional's memories of their own formal and non-formal educational experiences, their reflections on how these have prepared them for their professional roles, and their recommendations for an ""ideal"" undergraduate degree program. Data was collected through semi-structured interviews of experienced computing professionals. Ongoing on-the-job learning is a natural part of professionals' work lives. Participants indicate that important elements in an undergraduate degree program include foundational computing topics, development of critical thinking and communications skills, and a strong emphasis on experiences similar to those encountered in a professional position, such as complex, realistic group projects. Specific programming languages and technologies should be used only as practice in solving problems and learning on one's own. © 2012 ACM.",Adult education; Computer Science education; Computing education; Continuing professional development; Higher education; Non-formal learning; Self-learning; Undergraduate; University,Professional aspects; Adult education; Computer Science Education; Computing education; Continuing professional development; Higher education; Non-formal learning; Self-learning; Undergraduate; University; Education
Creativity-supporting learning environment-CSLE,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872140116&doi=10.1145%2f2275597.2275600&partnerID=40&md5=a3cefeee7b286ca85a282088e7cbc69e,"Despite much public discussion about the importance of creativity and innovation-friendly teaching in Finnish higher education, the impact of the general opinion on actual teaching practices has been limited. In the Finnish computer science education the teaching mostly follows a pattern of lectures, fixed exercise sets, and exams. With this article we want to open a discussion about possibilities of enhancing the learning environment by focusing on creative problem solving. We will present results from two research experiments in which we aimed to provide computer science students with a practically oriented learning environment with an explicit intention of supporting the creative work of students. There exists a vast amount of scientific theory about creativity, yet it is unclear on how to turn that theory into practice. Thus, our main interest was to find ways of applying creativity theory in practice in the context of computer science education. Our research experiments consist of a practically oriented computer science course, where LEGO RMindstorms robots were used as the platform for the student work. Methodological tools used in this study included content analysis of student products, observations from our learning sessions and semi-structured interviews with the students. The course was organised two times: the first time was in spring 2009 and the second in spring 2010. The total number of attending students was 72. In this article we argue that our approach of providing a creativity-supporting practical computer science course was a success. We gained a lot of ideas on how to support creativity, the students were clearly motivated, and they began to learn a new kind of experimental working style. The robotics kit seemed to work well both as a trigger for motivation and as a platform to support experimental learning, enhancing students' creativity and working style. In our opinion these findings are of great importance, and give promising practical ideas for the support of creativity in higher computer science education. © 2012 ACM.",Creativity; Motivation; Open learning environment; Robotics,Computer aided instruction; Human computer interaction; Motivation; Robotics; Students; Computer Science course; Computer Science Education; Computer science students; Content analysis; Creative problem-solving; Creative work; Creativity; Experimental learning; Finnish; Higher education; Learning environments; Learning sessions; Methodological tools; Open learning; Scientific theories; Semi structured interviews; Teaching practices; Working styles; Experiments
Developing competence in interactive Systems: The GRASP Tool for the design or redesign of pedagogIcal ICT devices,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872149851&doi=10.1145%2f2275597.2275598&partnerID=40&md5=dac506180be009ebd0001ed15e7142ba,"Training professionals to design and produce interactive systems requires the use of well thought-out training scenarios. Indeed, it is essential to consider pedagogical forms whose objective is providing learners with field experience. It is also necessary to motivate learners to learn about subjects that sometimes seem distant from their immediate concerns and to renew their interest in these subjects. This article presents a tool, called GRASP, that helps design pedagogical devices. This tool was first evaluated through three educational initiatives implemented in two universities in the north of France. These initiatives were analyzed to enhance the tool. Then, a second evaluation was conducted to validate the tool more widely. The first part of this article presents the scientific context. Then the design tool, the evaluation protocol, and the three devices built using this tool and their evaluation are introduced. Some of the lessons learned during the initiatives are described. Next, the second evaluation, conducted with more teachers, is presented. Finally, the conclusion highlights the perspectives opened by these initiatives. © 2012 ACM.",Active pedagogy; Competence training; Design tool; GRASP; Interactive systems education and training; Pedagogical devices design,Design; Active pedagogy; Design tool; Evaluation protocol; Field experience; GRASP; Interactive system; Scientific context; Training scenario; Education
Practical problem-based learning in computing education,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84867217930&doi=10.1145%2f2275597.2275599&partnerID=40&md5=0d2935fae1192d1abe82e49281a34c54,"Computer Science (CS) is a relatively new disciple and how best to introduce it to new students remains an open question. Likewise, the identification of appropriate instructional strategies for the diverse topics that constitute the average curriculum remains open to debate. One approach considered by a number of practitioners in CS education involves Problem-Based Learning (PBL), a radical departure from the conventional lecturing format. PBL has been adopted in other domains with success, but whether these positive experiences will be replicated in CS remains to be seen. In this article, a systematic review of PBL initiatives in undergraduate and postgraduate CS is presented from a Computing Education Research (CER) perspective. This includes analyses of a range of practical didactic issues, including the degree to which PBL has been systematically evaluated, practical problem description in the literature, as well as a survey of topics for which a PBL approach has been adopted. © 2012 ACM.",Computing Education Research (CER); Problem-Based Learning (PBL),Computing education; CS education; Instructional strategy; Practical problems; Problem based learning; Systematic Review; Curricula
No user left behind: Including accessibility in student projects and the impact on CS students' attitudes,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84860299401&doi=10.1145%2f2160547.2160548&partnerID=40&md5=010b8add8fab96f15bb8b92941580018,"Usability and accessibility have become increasingly important in computing curricula. This article briefly reviews how these concepts may be included in existing courses. The authors conducted a survey of student attitudes toward these issues at the start and end of a usability engineering course that included a group project with an accessibility component. Results of the survey indicate that students' awareness of issues related to usability and accessibility are increased after taking the course and completing the project. Our work and results are potentially valuable to CS educators in three ways: (1) They validate the usefulness of the survey instrument in assessing pedagogies in usability engineering, (2) They provide useful insights into the attitudes of CS majors relative to the important topics of usability and accessibility, and (3) They point to possible benefits of including usability and accessibility topics into CS curricula. © 2012 ACM.",Accessibility; Computer science education; Usability,Curricula; Students; Surveys; Teaching; Technical presentations; Accessibility; Computer Science Education; Computing curricula; Group projects; Student attitudes; Student project; Survey instruments; Usability; Usability engineering
"Fitting the needs of an industry: An examination of games design, development, and art courses in the UK",2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84860281527&doi=10.1145%2f2160547.2160549&partnerID=40&md5=d8923b0c05b6e85784c8654650d2c692,"There have been growing criticisms in recent years among the computer and video games community on the apparent lack of graduates capable of meeting the industry's employment needs. Following the sharp rise in the number of computer and video games courses across higher education (HE) institutions in the UK and across the globe, this article examines the composition of existing British games design, development, and art programs in relation to prescribed study areas voiced by industry bodies. From a sample of 242 courses, and a further 11 industry-derived and accredited programs, the results explore content currently residing within a variety of games programs and qualification types and evaluate the extent to which such content adheres to the industry's demand for the focus on specific skills and study areas. The findings point toward certain shortfalls in some key areas deemed to be important by industry professionals and the consideration of the degree to which course providers should cater to the specific demands of industry. © 2012 ACM.",Computer games; Course design; Curriculum; Games courses; Higher education,Design; Human computer interaction; Industry; Interactive computer graphics; Computer game; Course design; Games courses; Higher education; Industry professionals; Study areas; Video game; Curricula
The curriculum planning process for undergraduate game degree programs in the United Kingdom and United States,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84860302940&doi=10.1145%2f2160547.2160550&partnerID=40&md5=ae5954807f1782a3029dd24292bbc744,"Digital games are marketed, mass-produced, and consumed by an increasing number of people and the game industry is only expected to grow. In response, postsecondary institutions in the UK and the U.S. have started to create game degree programs. Though curriculum theorists provide insight into the process of creating a new program, no formal research contextualizes curriculum planning for game degree programs. The purpose of this research was to explore these processes when planning undergraduate game degree programs. The research methodology included an explanatory mixed-methods approach, using a quantitative survey of participants in the UK and the U.S., followed by interviews with several participants selected on the basis of their institution's demographics. Results indicate that five external factors influence the development of game programs (government, industry, other universities, society, and trade associations) and eight internal factors influence curriculum planning (facilities, faculty, institution, interdisciplinary collaboration, learners, learning time and space, originating department, and backgrounds of the planners). Results also indicate that while some differences exist in the game degree programs across countries, the vast majority of curriculum planning processes and influencing factors are the same. The study concludes with a set of recommendations for educators, trade associations, and the games industry to improve game degree programs. © 2012 ACM.",Curriculum; Education; Game; Instruction,Commerce; Curricula; Education; Industry; Planning; Research; Surveys; Degree program; Digital games; External factors; Game; Game industry; Influencing factor; Instruction; Interdisciplinary collaborations; Learning time; Number of peoples; Planning process; Post-secondary institutions; Research methodologies; Trade associations; United kingdom; Education computing
"CS unplugged and middle-school students' views, attitudes, and intentions regarding CS",2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84860308875&doi=10.1145%2f2160547.2160551&partnerID=40&md5=cc88167250ccd01ae696deb8062cf3cc,"Many students hold incorrect ideas and negative attitudes about computer science (CS). In order to address these difficulties, a series of learning activities called Computer Science Unplugged was developed by Tim Bell and his colleagues. These activities expose young people to central concepts in CS in an entertaining way without requiring a computer. The CS Unplugged activities have become more and more popular among CS educators and several activities are recommended in the ACM K-12 curriculum for elementary schools. CS Unplugged is used worldwide and has been translated into many languages. We examined the effect of the CS Unplugged activities on middle-school students' ideas about CS and their desire to consider and study it in high school. The results indicate that following the activities the ideas of the students on what CS is about were partially improved, but their desire to study CS lessened. In order to provide possible explanations to these results, we analyzed the CS Unplugged activities to determine to what extent the objectives of CS Unplugged were addressed in the activities. In addition, we checked whether the activities were designed according to constructivist principles and whether they were explicitly linked to central concepts in CS. We found that only some of the objectives were addressed in the activities, that the activities do not engage with the students' prior knowledge and that most of the activities are not explicitly linked to central concepts in CS. We offer suggestions for modifying the CS Unplugged activities so that they will be more likely to achieve their objectives. © 2012 ACM 1946-6226/2012/04-ART8 $10.00.",Attitudes; Computer Science Unplugged; K-12 instruction; Views,Computer science; Curricula; Attitudes; Elementary schools; High school; K-12 curriculum; K-12 instruction; Learning Activity; Middle school students; Prior knowledge; Views; Students
Describing the what and why of students' difficulties in Boolean logic,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859417818&doi=10.1145%2f2133797.2133800&partnerID=40&md5=83af35c5a6d637caa411926f0faa8df0,"The ability to reason with formal logic is a foundational skill for computer scientists and computer engineers that scaffolds the abilities to design, debug, and optimize. By interviewing students about their understanding of propositional logic and their ability to translate from English specifications to Boolean expressions, we characterized common misconceptions and novice problem-solving processes of students who had recently completed a digital logic design class. We present these results and discuss their implications for instruction and the development of pedagogical assessment tools known as concept inventories. © 2012 ACM 1946-6226/2012/03-ART3 $10.00.",Human Factors; Languages; Verification,Formal logic; Human engineering; Logic design; Query languages; Scaffolds; Teaching; Verification; Assessment tool; Boolean expressions; Boolean logic; Computer engineers; Computer scientists; Concept inventories; Digital logic design; Propositional logic; Students
The teaching-research-industry-learning nexus in information and communications technology,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859387004&doi=10.1145%2f2133797.2133798&partnerID=40&md5=afc9a0a49ec88b902f0fcdcee44137af,"The teaching-research nexus concept has been extensively examined in the higher education literature, and the importance of industry linkages in information and communications technology (ICT) education has also been widely discussed. However, to date there has been little recognition of the full extent of relationships between aspects of teaching, learning, research, and industry, and of the synergy possible from exploiting these relationships. Koppi and Naghdy [2009] introduced the concept of the teaching-research-industry-learning (TRIL) nexus in ICT education and this article attempts to advance understanding of the concept by exploring the literature that underpins it. The article contributes to a clearer understanding of the nature of the relationships involved as they apply to ICT education, and makes comprehensive recommendations to support strengthening the TRIL nexus in ICT education. © 2012 ACM 1946-6226/2012/03-ART1 $10.00.",Human Factors,Education; Human engineering; Industry; Research; Higher education; ICT education; Information and communications technology; Information technology
Learning to program with personal robots: Influences on student motivation,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859416463&doi=10.1145%2f2133797.2133801&partnerID=40&md5=258b47aa99ce8f9cdd0ba299b84c5822,"One of the goals of using robots in introductory programming courses is to increase motivation among learners. There have been several types of robots that have been used extensively in the classroom to teach a variety of computer science concepts. A more recently introduced robot designed to teach programming to novice students is the Institute for Personal Robots in Education (IPRE) robot. The author chose to use this robot and study its motivational effects on non-computer science students in a CS0 course. The purpose of this study was to determine whether using the IPRE robots motivates students to learn programming in a CS0 course. After considering various motivational theories and instruments designed to measure motivation, the author used Keller's Instructional Materials Motivation Survey to measure four components of motivation: attention, relevance, confidence, and satisfaction. Additional items were added to the survey, including a set of open-ended questions. The results of this study indicate that the use of these robots had a positive influence on participants' attitudes towards learning to program in a CS0 course, but little or no effect on relevance, confidence, or satisfaction. Results also indicate that although gender and students interests may affect individual components of motivation, gender, technical self-perception, and interest in software development have no bearing on the overall motivational levels of students. © 2012 ACM 1946-6226/2012/03-ART4 $10.00.",Experimentation; Human Factors; Languages,Computer science; Human engineering; Motivation; Query languages; Robot programming; Robots; Students; Surveys; Experimentation; Individual components; Instructional materials; Introductory programming course; Open-ended questions; Personal robot; Student motivation; Teaching
AuDeNTES: Automatic detection of teNtative plagiarism according to a rEference solution,2012,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859407319&doi=10.1145%2f2133797.2133799&partnerID=40&md5=aaf70dd135bb5a66170c6ff1514a368c,"In academic courses, students frequently take advantage of someone else's work to improve their own evaluations or grades. This unethical behavior seriously threatens the integrity of the academic system, and teachers invest substantial effort in preventing and recognizing plagiarism. When students take examinations requiring the production of computer programs, plagiarism detection can be semiautomated using analysis techniques such as JPlag and Moss. These techniques are useful but lose effectiveness when the text of the exam suggests some of the elements that should be structurally part of the solution. A loss of effectiveness is caused by the many common parts that are shared between programs due to the suggestions in the text of the exam rather than plagiarism. In this article, we present the AuDeNTES anti-plagiarism technique. AuDeNTES detects plagiarism via the code fragments that better represent the individual students' contributions by filtering from students' submissions the parts thatmight be common tomany students due to the suggestions in the text of the exam. The filtered parts are identified by comparing students' submissions against a reference solution, which is a solution of the exam developed by the teachers. Specifically, AuDeNTES first produces tokenized versions of both the reference solution and the programs that must be analyzed. Then, AuDeNTES removes from the tokenized programs the tokens that are included in the tokenized reference solution. Finally, AuDeNTES computes the similarity among the filtered tokenized programs and produces a ranked list of program pairs suspected of plagiarism. An empirical comparison against multiple state-of-the-art plagiarism detection techniques using several sets of real students' programs collected in early programming courses demonstrated that AuDeNTES identifies more plagiarism cases than the other techniques at the cost of a small additional inspection effort. © 2012 ACM 1946-6226/2012/03-ART2 $10.00.",Algorithms,Algorithms; Students; Academic course; Academic system; Analysis techniques; Automatic Detection; Code fragments; Empirical comparison; Plagiarism detection; Programming course; Reference solution; Semi-automated; Intellectual property
When practice doesn't make perfect: Effects of task goals on learning computing concepts,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855250826&doi=10.1145%2f2048931.2048933&partnerID=40&md5=2eb88745ee22d8aeb1975629323df54e,"Specifying file references for hypertext links is an elementary competence that nevertheless draws upon core computational thinking concepts such as tree traversal and the distinction between relative and absolute references. In this article we explore the learning effects of different instructional strategies in the context of an introductory computing course. Results suggest that asking students to do targeted tasks, albeit supported with working examples, is not the best preparation. Instead, unstructured study of examples produces superior learning. Answering targeted conceptual questions can also yield comparably positive learning but only in qualified contexts. While perhaps unintuitive, these results are consistent with a long line of research on human cognition and learning. We discuss our results in the context of this previous research and recommend effective instructional strategies, which may apply to a broad range of computational concepts. © 2011 ACM.",Computational thinking; File referencing; Tree structures; Web Development,Computation; Education; Human Engineering; Research; Hypertext systems; Trees (mathematics); Computational thinkings; Conceptual questions; File referencing; Human cognition; Hypertext links; Instructional strategy; Introductory computing course; Learning effects; Long line; Tree structures; Tree traversal; Web development; Forestry
A motivation guided holistic rehabilitation of the first programming course,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855252934&doi=10.1145%2f2048931.2048935&partnerID=40&md5=ecef77da6ed3155c73b0f663d8c54681,"It has been estimated that more than two million students started computing studies in 1999 and 650,000 of them either dropped or failed their first programming course. For the individual student, dropping such a course can distract from the completion of later courses in a computing curriculum and may even result in changing their course of study to a curriculum without programming. In this article, we report on how we set out to rehabilitate a troubled first programming course, one for which the dropout statistic and repercussion was evident. The five-year longitudinal case study described in this article began by systematically tracking the pass rate of a first programming course, its throughput, as proposed by the Theory of Constraints. The analyses of these data indicated threemain problems in the course: programming discipline difficulty, course arrangement complexity, and limited student motivation. The motivation problem was approached from the Two-Factor Theory point of view. It investigated those factors that led to dissatisfaction among the students, the hygiene factors, and those factors that led to satisfaction, the intrinsic and extrinsic motivators. The course arrangement complexity was found to be a hygiene factor, while the lack of extrinsic and intrinsic motivators contributed to the high dropout rates. The course improvement effortsmade no attempt to change the inherent characteristics of the programming discipline, but introduced holistic changes in the course arrangements over a five-year period, from 2005 to 2009, to eliminate the hygiene factors and to increase motivational aspects of the course. This systems approach to course improvement resulted in an increase in the pass rate, from 44% prior to the changes to 68% thereafter, and the overall course atmosphere turned positive. This paper reports on the detailed changes that were made and the improvements that were achieved over this five-year period. © 2011 ACM.",Course redesign; CS1; Hygiene factors; Intrinsic and extrinsic motivators; Systems approach; Theory of Constraints; Two-Factor Theory,Curricula; Motivation; Course redesign; CS1; Hygiene factors; Intrinsic and extrinsic motivators; Systems approach; Theory of constraint; Two-Factor Theory; Students
Editorial: Computational tools for computing education,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855221281&doi=10.1145%2f2048931.2048932&partnerID=40&md5=ff2f612252d2b26489d4f343474e43d0,"The goal of this editorial is to both encourage authors to continue to submit articles describing computational tools for computing education to TOCE, and to make explicit our expectations as the editors of TOCE for what makes a good ""tools"" article. We elaborate three key criteria, and provide examples from previous TOCE papers that satisfy these criteria: 1) establish that the tool is related essentially to computing education, 2) make explicit claims about the impact of the tool on learning, and 3) evidence these claims through actual use. © 2011 ACM.",Computational tools; Evaluation,Computational tools; Computing education; Evaluation; Computational methods
Looking at secondary teacher preparation through the lens of computer science,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855229360&doi=10.1145%2f2048931.2048934&partnerID=40&md5=09118993251ab6cace1ef8271068a864,"Teaching computer science (CS) in high schools, rather than just programming or even computer literacy, is important as a means of introducing students to the true nature of CS, and enhancing their problem-solving skills. Since teachers are the key to the success of any high school educational initiative, any discussion of high school programs must consider the teachers, and specifically the teacher preparation needed to make the implementation of such programs possible. However, there is scant research on CS teacher education, probably because CS is a relatively young discipline. Very few of the publications in the area of CS teacher preparation are research-based. Most are descriptive papers, including recommendations for specific programs or courses. The purpose of this survey is to import from what is already known in other disciplines in this context. We therefore examine the body of research on teacher education in other disciplines, especially in mathematics and science, to shed light on important challenges for CS teacher education and draw some initial conclusions regarding CS teacher preparation programs. © 2011 ACM.",Computer science teachers; Pre-service Teachers; Secondary teacher preparation,Computer programming; Research; Students; Computer literacy; High school; Pre-service teacher; Problem solving skills; Teacher education; Teacher preparation; Through the lens; Teaching
"Orientation of undergraduates toward careers in the computer and information sciences: Gender, self-efficacy and social support",2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82455208813&doi=10.1145%2f2037276.2037278&partnerID=40&md5=f65405be02848ff70b43d10c6b9605b7,"Researchers have been working to understand the factors that may be contributing to low rates of participation by women and other minorities in the computer and information sciences (CIS). We describe a multivariate investigation of male and female university students' orientation to CIS careers. We focus on the roles of self-efficacy and peer-based social support as social-cognitive variables in the students' learning process. We explore these variables and their impact on career orientation through a set of overlapping regression models. In general, we find that strong social support and high self-efficacy are associated with strong orientation toward careers in CIS careers. However the influences of perceived self-efficacy and social support appear to differ for men and women: while low self-efficacy is tied to less social support for males, we see no similar tendency for females. In fact many females who report themselves as low in self-efficacy consider themselves to have high social support among their peers. We discuss the implications of our findings for programs aimed at outreach to both males and females regarding CIS education and careers. © 2011 ACM.",Self-efficacy; Social constructivist learning; Social networks; Women in computing,Information science; Regression analysis; Constructivist learning; Learning process; Low rates; Perceived self-efficacy; Regression model; Self efficacy; Social Networks; Social support; Strong orientation; University students; Women in computing; Education computing
The computing alliance of hispanic-serving institutions: Supporting hispanics at critical transition points,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82455167732&doi=10.1145%2f2037276.2037280&partnerID=40&md5=6b809ca216c76b96295090685d417a62,"Hispanics have the highest growth rates among all groups in the U.S., yet they remain considerably underrepresented in computing careers and in the numbers who obtain advanced degrees. Hispanics constituted about 7% of undergraduate computer science and computer engineering graduates and 1% of doctoral graduates in 2007-2008. The small number of Hispanic faculty, combined with the lack of Hispanic role models and mentors, perpetuates a troublesome cycle of underrepresentation in STEM fields. In 2004, seven Hispanic-Serving Institutions (HSIs) formed the Computing Alliance of Hispanic-Serving Institutions (CAHSI) to consolidate their strengths, resources, and concerns with the aim of increasing the number of Hispanics who pursue and complete baccalaureate and advanced degrees in computing areas. To address barriers that hinder students from advancing, CAHSI defined a number of initiatives, based on programs that produced promising results at one or more institutions. These included the following: a CS-0 course that focuses on adoption of a three-unit pre-CS course that uses graphics and animation to engage and prepare students who have no prior experience in computing; a peer mentoring strategy that provides an active, collaborative learning experience for students while creating leadership roles for undergraduates; an undergraduate and graduate student research model that emphasizes the deliberate and intentional development of technical, team, and professional skills and knowledge required for research and cooperative work; and a mentoring framework for engaging undergraduates in experiences and activities that prepare them for graduate studies and onto the professoriate. CAHSI plays a critical role in evaluating, documenting, and disseminating effective practices that achieve its mission. This paper provides an overview of CAHSI initiatives and describes how each addresses causes of underrepresentation of Hispanics in computing. In addition, it describes the evaluation and assessment of the initiatives and presents the results that support CAHSI's claim of their effectiveness. © 2011 ACM.",,Animation; Engineering research; Information dissemination; Societies and institutions; Teaching; Collaborative learning; Computer engineering; Cooperative works; Effective practices; Evaluation and assessment; Graduate students; Graduate studies; Hispanics; Peer-mentoring; Prior experience; Professional skills; Role model; STEM fields; Transition point; Students
The use of robotics to promote computing to pre-college students with visual impairments,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82455167730&doi=10.1145%2f2037276.2037284&partnerID=40&md5=5bda5859cbea184aed6e32dcaa069dd7,"This article describes an outreach program to broaden participation in computing to include more students with visual impairments. The precollege workshops target students in grades 7-12 and engage students with robotics programming. The use of robotics at the precollege level has become popular in part due to the availability of Lego Mindstorm NXT kits. The robotics programming tools and materials used in the workshops are designed with an accessibility focus for participants with different degrees of vision. Through the use of available assistive technology and open source software, robotics is accessible to the visually impaired. The quantitative and qualitative results from three robotics workshops conducted during the past three years will be discussed, including some initial long-term results. Strategies, based on our experiences, will also be shared to promote accessible outreach. While many of the participants are in middle and early high school, findings indicate that participant interest in computing is high regardless of whether their schools offer computer science courses or not. Increased interest and confidence with robotics persists throughout follow-up activities. © 2011 ACM.",Accessibility; Broadening participation in computing; Outreach; Robotics; Visually impaired,Open systems; Robot programming; Robotics; Robots; Accessibility; Assistive technology; Broadening participation in computing; Computer Science course; High school; Lego mindstorm; Open Source Software; Outreach; Outreach programs; Pre-college; Programming tools; Visual impairment; Visually impaired; Students
Berkeley foundation for opportunities in information technology: A decade of broadening participation,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82455162298&doi=10.1145%2f2037276.2037279&partnerID=40&md5=13189c543611dddc87b8e91edbc17663,"The Berkeley Foundation for Opportunities in Information Technology is a decade-old endeavor to expose pre-college young women and underrepresented racial and ethnicminorities to the fields of computer science and engineering, and prepare them for rigorous, university-level study. We have served more than 150 students, and graduated more than 65 seniors who have gone on to attend some of the top institutions in the country. Some of the lessons we have learned include the importance of sustained funding to support a continuing year-round program, world-class leaders and resources, and family and alumni involvement. In this article, we share the inner workings of our program, from its foundation during the dot-com heyday through today, in hopes that our best practices can be useful to others working toward the goal of broadening participation. © 2011 ACM.",Broadening participation; Computing education pipeline; CS0; Introductory programming courses; Outreach; Scratch; Summer camps,Professional aspects; Teaching; Broadening participation; Computing education; CS0; Introductory programming course; Outreach; Scratch; Summer camp; Information technology
Special issue on broadening participation in computing education (Part 2),2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82455167740&doi=10.1145%2f2037276.2037277&partnerID=40&md5=f01890e6d8a84f2f008069fa7038afe1,"This special issue includes the second set of articles addressing broadening participation in computing education. The articles span the stages of the pipeline, from introducing middle school children to computer science to retaining under-represented groups at the university level. The preface presented here outlines the need for increasing the participation of under-represented minorities, women, and people with disabilities in the development of technology. In addition, the preface summarizes the seven articles included in this second issue (of two) on broadening participation. © 2011 ACM.",Broadening participation; Disabilities; Education; Pipeline; Retention; Under-represented groups; Women,Education; Engineering education; Pipelines; Broadening participation; Disabilities; Retention; Under-represented groups; Women; Handicapped persons
Fractal simulations of African design in pre-college computing education,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82455162296&doi=10.1145%2f2037276.2037281&partnerID=40&md5=eabb213428f45b7289b73b4bd6127fda,"This article describes the use of fractal simulations of African design in a high school computing class. Fractal patterns-repetitions of shape at multiple scales-are a common feature in many aspects of African design. In African architecture we often see circular houses grouped in circular complexes, or rectangular houses in rectangular complexes. Typically the accompanying ceremonies, cosmologies, and other traditions make use of scaling and recursion in their conceptual models. African scaling designs include textiles, sculpture, adornment, and other forms; in many cases there are explicit geometric algorithms and other formal aspects (e.g., pseudorandom number generation in divination systems) embedded in the associated indigenous knowledge system. Thus African fractals provide a strong counter to stereotypes of African culture as primitive or simplistic. Following this fieldwork, we developed a Web site which uses Java simulations of these African designs to teach computational perspectives on fractals to high school students.1 We hypothesized that this combination of anti-primitivist ""ethnocomputing"" and design-based creative learning would enhance both the engagement and performance of under-represented students in computing. A quasi-experimental study used two 10th grade computing classes, both taught by the same instructor, and both including more than 50% under-represented students (Latino and African American). The control class received six days of instruction using a popular Web site (with Java applets but no cultural content or design activities) for high school fractal lessons; the experimental class received the same amount of instruction using our Web site. Pre/post differences on both achievement and attitude tests indicate statistically significant improvement for the students in the experimental class. Potential implications for improving participation and achievement of under-represented students in computing education are discussed. © 2011 ACM.",Arts; Broadening participation; Culture; Education; Ethnicity; Ethnocomputing; High school; Pedagogy; STEM,Arts computing; Cell culture; Computer software; Design; Education; Education computing; Embedded systems; Fractals; Teaching; Arts; Broadening participation; Ethnicity; Ethnocomputing; High school; Pedagogy; STEM; Students
Universal design: Implications for computing education,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82555189297&doi=10.1145%2f2037276.2037283&partnerID=40&md5=73294bc807acf17a37c7d1c749d49b56,"Universal design (UD), a concept that grew from the field of architecture, has recently emerged as a paradigm for designing instructional methods, curriculum, and assessments that are welcoming and accessible to students with a wide range of characteristics, including those related to race, ethnicity, native language, gender, age, and disability. This proactive approach holds promise for more fully including underrepresented groups in computing studies and for decreasing the need, and thus costs, for academic accommodations for students with disabilities. This article summarizes the history and development of UD, references research and practices that support the UD approach, provides examples of the strategies that apply UD to instruction and assessment, and recommends topics for future research. Although the application of UD to teaching and learning is in its infancy, the potential of UD to improve computing instruction should not be ignored. Further research could test the efficacy of specific UD practices in promoting learning in computing fields. © 2011 ACM.",Accessibility; Assessment; Disability; Instruction; Teaching; Universal design,Curricula; Design; Research; Teaching; Accessibility; Assessment; Disability; Instruction; Universal Design; Handicapped persons
The STARS alliance: Viable strategies for broadening participation in computing,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82455187831&doi=10.1145%2f2037276.2037282&partnerID=40&md5=d908601c2cd334ea049525a4f4cbc769,"The Students and Technology in Academia, Research, and Service (STARS) Alliance is a nationallyconnected system of regional partnerships among higher education, K-12 schools, industry and the community with a mission to broaden the participation of women, under-represented minorities and persons with disabilities in computing (BPC). Each regional partnership is led by a STARS member college or university with partners such as local chapters of the Girl Scouts, the Black Data Processors Association, public libraries, Citizen Schools, and companies that employ computing graduates. STARS goals include retaining and graduating undergraduates and recruiting and bridging undergraduates into graduate programs. The alliance works toward these goals through activities that advance the central values of Technical Excellence, Leadership, Community, and Service and Civic Engagement. In particular, all STARS college and university members implement the STARS Leadership Corps (SLC), an innovative model for enveloping a diverse set of BPC practices within a common framework for implementation within multiple organizations, common assessment, and sustainability through curricula integration. Herein, we describe the SLC model and its implementation in the STARS schools, including details of an SLC service-learning course that has been adopted by eight STARS schools. We report the results of our three-year study of the SLC in the 20 STARS schools. Our study found a positive effect of participation in the SLC on important student success variables, including self-efficacy, perceived social relevance of computing, grade point average, and commitment to remain in computing. Results indicate that the SLC model is effective for students under-represented in computing, as well as for those not from under-represented groups. © 2011 ACM.",BPC; Broadening participation in computing; Computing curricula; Education; Service-learning,Curricula; Education; Education computing; Libraries; Societies and institutions; Stars; Students; BPC; Broadening participation in computing; Civic engagement; Computing curricula; Data processors; Grade point average; Graduate program; Higher education; Innovative models; K-12 schools; Multiple organizations; Persons with disabilities; Positive effects; Public library; Regional partnership; Self efficacy; Service learning; Service-learning course; Student success; Technical excellence; Under-represented; Under-represented groups; Underrepresented minorities; Handicapped persons
The role of majority groups in diversity programs,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051984841&doi=10.1145%2f1993069.1993075&partnerID=40&md5=8aa092e0979909305d5cd9f1debc1104,"The underrepresentation of women in technical fields is a widely acknowledged national problem, limiting both the raw size of the talent pool and the diversity of experiences and perspectives of those who will design solutions to key problems facing society. Empowering women to succeed in these fields is clearly one important component of any solution. Because the population in those fields will likely continue to be overwhelmingly male for some time to come, men must also be a key component of the solution. Specifically, since the attitudes of the majority group are a strong determinant of climate, it is almost equally important to foster a population of men supportive of increasing the representation of women. As at most universities and technical companies, women are a minority in all majors in the University of Maryland Baltimore County (UMBC) College of Engineering and Information Technology (COEIT). In most majors, they are a small minority. The UMBC Center for Women and Information Technology (CWIT) is dedicated to increasing the representation of women in engineering and information technology fields. At the heart of these efforts is the CWIT Scholar Program, a selective merit scholarship program for undergraduates majoring in engineering and IT who are committed to increasing the representation of women in those fields. In addition to financial support, the CWIT Scholar Program provides a supportive community, academic and professional development programming, networking opportunities, and a residential Living Learning Community. Almost from the beginning, some CWIT scholars have been men. 28 percent of current CWIT scholars are men. Perhaps not surprisingly, female CWIT scholars have dramatically higher retention and completion rates than other women majoring in these fields. In this article, we look at a second effect of the CWIT Scholar Program, that of changing awareness and attitudes of the men who participate. We discuss programs and present results of a survey of attitudes regarding technical, academic, and gender issues in engineering and IT education. We disaggregate survey participants to show differences between the attitudes of women, scholar men, and men not participating in a diversity program. © 2011 ACM 1946-6226/2011/07-ART11.",Climate; Education; Gender; Retention,Engineering education; Lakes; Professional aspects; Surveys; Baltimore; Climate; Design solutions; Financial support; Gender; Gender issues; IT education; Key component; Learning community; Professional development; Retention; Scholarship program; Second effects; Technical fields; University of Maryland; Women in engineering; Information technology
Computational thinking and expository writing in the middle school,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051990655&doi=10.1145%2f1993069.1993073&partnerID=40&md5=7b16609ee5a6704d222aa19b2e89e6dc,"To broaden participation in computing we need to look beyond traditional domains of inquiry and expertise. We present results from a demonstration project in which interactive journalism was used to infuse computational thinking into the standard curriculum and regular classroom experience at a middle school with a diverse population. Outcomes indicate that we were able to develop positive attitudes about computational thinking and programming among students and teachers who did not necessarily view themselves as ""math types."" By partnering with language arts, technology and math teachers at Fisher Middle School, Ewing New Jersey, we introduced the isomorphism between the journalistic process and computational thinking to 7th and 8th graders. An intense summer institute, first with the teachers and then with students recruited from the school, immersed them in the ""newsroom of the future"" where they researched and wrote news stories, shot and edited video, and developed procedural animations in Scratch to support their storylines. An afterschool club sustained the experience. The teachers adapted interactive journalism and Scratch programming to enrich standard language arts curriculum and are infusing computational thinking in classroom experiences throughout the school. © 2011 ACM 1946-6226/2011/07-ART9.",Broadening participation in computing; Computational thinking; K-12 CS education; Scratch; Writing and computing,School buildings; Teaching; User interfaces; Broadening participation in computing; Computational thinkings; Demonstration project; Expository writing; K-12 CS education; Math teachers; Middle school; New Jersey; Positive attitude; Procedural animation; Scratch; Standard curriculum; Storylines; Curricula
Engaging women in computer science and engineering: Promising practices for promoting gender equity in undergraduate research experiences,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052016951&doi=10.1145%2f1993069.1993072&partnerID=40&md5=9962c17b1959b71213f1b89262b5d961,"Building on research that identifies and addresses issues of women's underrepresentation in computing, this article describes promising practices in undergraduate research experiences that promote women's longterm interest in computer science and engineering. Specifically, this article explores whether and how REU programs include programmatic elements designed to promote gender equity and identifies specific mechanisms that are seen as effective in supporting women in REU programs and in encouraging them to persist in computer science and engineering fields. The findings are drawn from a comprehensive study that includes a national survey of REU programs, follow-up interviews with REU program directors from across the country, and an in-depth evaluation of one REU program over four years. © 2011 ACM 1946-6226/2011/07-ART8.",Broadening participation in computing; Research experiences for undergraduates; Undergraduate research; Women in computing,Computer science; Engineering education; Research; Broadening participation in computing; Comprehensive studies; Computer science and engineerings; Gender equity; Research experiences for undergraduates; Undergraduate research; Women in computing; Professional aspects
Why Latino high school students select Computer Science as a major: Analysis of a success story,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051966790&doi=10.1145%2f1993069.1993074&partnerID=40&md5=1d5aea6c558ec9904eed63868728f7aa,"This article reports on a public school that is succeeding in encouraging Latino high school students to select Computer Science (CS) as a major. The students attend a charter high school designed to encourage low-income Latino students to attend college and attain proficiency in English, Spanish, and computers. Using data from surveys and by analyzing test scores, the authors quantify the characteristics of students who are likely to choose CS as a major. A survey of 139 tenth-through twelfth-grade Latino students is used to determine factors that influence CS major selection. The survey includes questions from a previous study (836 high school math students from 9 public and private schools) as a control. Additional questions measure student interest in 20 STEM, business, and humanities subjects. Standardized test scores are correlated with factors affecting choice of CS as a major. Environment and intervention programs in, after, and outside of school are examined to consider their impact on student development. The article provides a quantitative and qualitative analysis of the relationship among academic environment and performance, subject interests, gender, and teaching methods that influence the interest of Latino high school students in choosing CS as a major. © 2011 ACM 1946-6226/2011/07-ART10.",After-school programs; Constructivist learning; Hands-on projects; High school; Informal learning; Latino; Stem education,Computer science; Quality control; Surveys; Teaching; After-school programs; Constructivist learning; Hands-on projects; High school; Informal learning; Latino; STEM education; Students
Exploring Computer Science: A case study of school reform,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80052006503&doi=10.1145%2f1993069.1993076&partnerID=40&md5=8aa51c86842542b53414a788fa62bec7,"This article will detail efforts to broaden participation in computing in urban schools through a comprehensive reform effort of curricular development, teacher professional development, and policy changes. Beginning with an account of the curricular development of Exploring Computer Science, we will describe the inquiry-based research that underlies these learning materials. Next, we argue that accompanying professional development that supports the curriculum is essential for supporting this inquiry-based approach to computer science instruction. We then explain the policy strategies used to designate this course as a college-preparatory elective and place it in 17 Los Angeles high schools. Finally, we share the initial results of how students experience this course and ongoing challenges encountered when working in the public school system. The article concludes with a discussion of how longitudinal reform effort requires a strong foundation and deep roots to successfully democratize computer science education. © 2011 ACM 1946-6226/2011/07-ART12.",Broadening the participation in computing; Curriculum; Exploring Computer Science; Gender and ethnicity; Pedagogy,Computer science; Curricula; Education computing; Employment; Teaching; Broadening the participation in computing; Computer Science Education; Curricular development; Deep roots; Exploring Computer Science; Gender and ethnicity; High school; Learning materials; Los Angeles; Pedagogy; Policy changes; Policy strategies; Professional development; Public schools; Science instructions; Teacher professional development; Urban schools; Engineering education
Introduction to special issue (Part 1): Broadening participation in computing education,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051983067&doi=10.1145%2f1993069.1993070&partnerID=40&md5=74f8eb9aa40074966867f8f24592e6db,"This special issue includes the first set of articles addressing broadening participation in computing education. The articles span the stages of the pipeline, from introducing middle school children to computer science to retaining underrepresented groups at the university level. The preface presented here outlines the need for increasing the participation of underrepresented minorities, women, and people with disabilities in the development of technology. In addition, the preface summarizes the six articles included in this first (of two) issues on broadening participation. © 2011 ACM 1946-6226/2011/07-ART6.",Broadening participation; Disabilities; Education; Pipeline; Retention; Underrepresented groups; Women,Handicapped persons; Broadening participation; Disabilities; Retention; Under-represented groups; Women; Engineering education
Difficulties in learning inheritance and polymorphism,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960024750&doi=10.1145%2f1921607.1921611&partnerID=40&md5=813610943f9a501f245dea91d81c5faf,"This article reports on difficulties related to the concepts of inheritance and polymorphism, expressed by a group of 22 in-service CS teachers with an experience with the procedural paradigm, as they coped with a course on OOP. Our findings are based on the analysis of tests, questionnaires that the teachers completed in the course, as well as on observations made during the course. The article suggests that the difficulties are mostly caused by the learners' ignorance about a programming model for inheritance and polymorphism. Such a model is presented in the appendix. The article offers a classification of the difficulties into the following four clusters: (1) alternative (partial) models, (2) analogies to the use of inheritance and conversion in day-to-day life or in imperative programming, (3) lack of understanding of hierarchies and their role in inheritance, and (4) difficulties due to approaches to teaching, and their impact on the students understanding, as well as, with difficulties that arose in previous stages of learning OOP and have yet not been resolved. © 2011 ACM.",Analogies; In-service teachers; Misconceptions; Programming model,Computer programming; Surveys; Analogies; Imperative programming; In-service teachers; Misconceptions; Programming model; Programming models; Teaching
Editorial: Entry points for computing education research,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959954336&doi=10.1145%2f1921607.1921608&partnerID=40&md5=d70a86571992a495ae661e413920914f,"This is because making and verifying claims about human learning differ fundamentally from designing, building, and using computational artifacts. To study human learning in computing, we need not only disciplinary knowledge (to understand what the important questions and to interpret student behavior and artifacts), but we need knowledge about the teaching and learning processes: how students learn, how learning and teaching interact, and how the effectiveness of these might be evaluated. Researchers in the social and behavioral sciences in particular have already developed epistemic cultures of considerable subtlety and depth that can provide insight into many of the questions about teaching and learning that computing educators might ask [Tenenberg and McCartney 2010]. © 2011 ACM.",,Social sciences computing; Computing education; Entry point; Epistemic cultures; Human learning; Social and behavioral science; Student behavior; Teaching and learning; Behavioral research
On the quality of examples in introductory java textbooks,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960007936&doi=10.1145%2f1921607.1921610&partnerID=40&md5=5cffd91947d2a215e41b1adb1c9d0785,"Example programs play an important role in the teaching and learning of programming. Students as well as teachers rank examples as the most important resources for learning to program. Example programs work as role models and must therefore always be consistent with the principles and rules we are teaching. However, it is difficult to find or develop examples that are fully faithful to all principles and guidelines of the object-oriented paradigm and also follow general pedagogical principles and practices. Unless students are able to engage with good examples, they will not be able to tell desirable from undesirable properties in their own and others' programs. In this article we report on a study in which experienced educators evaluated the quality of object-oriented example programs for novices from popular Java textbooks. The evaluation was accomplished using an online checklist that elicited responses on the technical, object-oriented, and didactic quality of examples. In total 25 reviewers contributed 215 reviews to our dataset, based on 38 example programs from 13 common introductory programming textbooks. Results show that the evaluation instrument is reliable in terms of inter-rater agreement. Overall, example quality was not as good as one might expect from common textbooks, in particular regarding certain object-oriented properties. We conclude that educators should be careful when taking examples straight out of a textbook. © 2011 ACM.",Assessment; Checklist; Courseware; Example programs; Examples; Guidelines; Principles; Textbooks,Computer software; Java programming language; Quality control; Teaching; Textbooks; Assessment; Checklist; Courseware; Example programs; Examples; Guidelines; Principles; Object oriented programming
Extensive evaluation of using a game project in a software architecture course,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960019617&doi=10.1145%2f1921607.1921612&partnerID=40&md5=31b7e9c95de96faf6791ac4e981e32d8,"This article describes an extensive evaluation of introducing a game project to a software architecture course. In this project, university students have to construct and design a type of software architecture, evaluate the architecture, implement an application based on the architecture, and test this implementation. In previous years, the domain of the software architecture project has been a robot controller for navigating a maze. In 2008, the students on the software architecture course chose between the two domains: Khepera robot simulation in Java and XNA game development in C#. Independent of the domain chosen, the students had to go through the same phases, produce the same documents based on the same templates, and follow exactly the same process. This article describes an evaluation where we wanted to investigate if a game development project could successfully be used to teach software architecture. Specifically in the evaluation, the effect of the choice of COTS (Commercial Off-The-Shelf) and domain is compared in relation to popularity of the project type, how the students perceive the project, the complexity of the software architectures produced, the effort put into the project, and the grades achieved for the project and the written examination. The main conclusion is that game development projects can successfully be used to teach software architecture. Further, the results of the evaluation show among other things that students who chose the Game project produced software architecture with higher complexity, and put more effort into the project than the Robot project students. No significant statistical differences were found in final grades awarded to the Game project students vs. Robot project students. However, the Game project students obtained a higher grade in their project than in the written examination, whereas the Robot project students scored higher in the written examination than in their project. Finally compared to the Robot project students, those that chose the Game project had fewer problems with COTS hindering the architecture design and introducing technical challenges. © 2011 ACM.",Education; Evaluation; Game development; Robot simulation; Software engineering; XNA,Curricula; Machine design; Robots; Software design; Software testing; Students; Teaching; Architecture designs; Commercial off the shelves; Evaluation; Game development; Game projects; Khepera robots; Previous year; Robot controller; Robot simulation; Statistical differences; Technical challenges; Two domains; University students; XNA; Software architecture
The case for pair programming in the computer science classroom,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959506712&doi=10.1145%2f1921607.1921609&partnerID=40&md5=97360de70064c60f40bb3a58d96ede9c,"Previous studies indicate that the use of pair programming has beneficial effects on student learning. In this article, we present a controlled study that directly measured students' acquisition of individual programming skills using laboratory practica (in which students programmed individually under exam conditions). Additionally, we analyzed other measures of student performance, attitudes, and retention. Our results provide direct evidence that pair programming improves the individual programming skills of lower SAT students, and that students who pair program are more confident in their work and are more likely to successfully complete the course. Results from the four other major studies of the effects of pair programming are reviewed and compared with those presented here in order to draw broader conclusions. © 2011 ACM.",Collaborative learning; Pair programming,Students; Teaching; Beneficial effects; Collaborative learning; Pair-programming; Programming skills; Science classroom; Student learning; Student performance; Computer programming
INSPIRED high school computing academies,2011,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051984140&doi=10.1145%2f1993069.1993071&partnerID=40&md5=32212a6b6ec13e88117dd5780f3c04ab,"If we are to attract more women and minorities to computing we must engage students at an early age. As part of its mission to increase participation of women and underrepresented minorities in computing, the Increasing Student Participation in Research Development Program (INSPIRED) conducts computing academies for high school students. The academies are designed to increase students' knowledge of and interest in computing and to encourage females and minorities to participate in computing. INSPIRED academies differ from others in several ways. They are relatively easy to organize and require relatively few resources; they focus on computing concepts and object-oriented programming; they expose students to successful female and minority computer scientists; and they actively engage university students from underrepresented groups to organize, coordinate, teach, and help assess the academies. This not only provides role models for the high school students but also helps engage the university students and promote their professional development. Our assessment results show that high school student participants have gained significant knowledge and interest in computing through participation in the academies. This article describes the organization, coordination, content, and assessment of the academies, along with suggestions for those who would like to design academies like these. It also discusses how to prepare university students for their roles in the academies and how their participation has helped in their professional development. It includes pointers to sites from which the instructional and assessment materials can be downloaded for those who wish to replicate or adapt these materials. © 2011 ACM 1946-6226/2011/07-ART7.",Academy; Broadening participation; Camp; Computing; Diversity; Gender; High school camp; Minority; Outreach; Recruiting; Summer academy; Summer camp; Underrepresented,Education computing; Object oriented programming; Academy; Broadening participation; Camp; Computing; Diversity; Gender; High school camp; Higher School; Minority; Outreach; Recruiting; Summer academy; Summer camp; Underrepresented; Students
The greenfoot programming environment,2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650502293&doi=10.1145%2f1868358.1868361&partnerID=40&md5=77a029d8e94139dc6edb3b0f669d563a,"Greenfoot is an educational integrated development environment aimed at learning and teaching programming. It is aimed at a target audience of students from about 14 years old upwards, and is also suitable for college-and university-level education. Greenfoot combines graphical, interactive output with programming in Java, a standard, text-based object-oriented programming language. This article first describes Greenfoot and then goes on to discuss design goals and motivations, strengths and weaknesses of the system, and its relation to two environments with similar goals, Scratch and Alice. © 2010 ACM.",Greenfoot; Programming education; Programming environment,Java programming language; Students; Teaching; Web services; Design goal; Greenfoot; Integrated development environment; Object-oriented programming languages; Programming education; Programming environment; Target audience; Teaching programming; Object oriented programming
"Alice, Greenfoot, and Scratch - A discussion",2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650490609&doi=10.1145%2f1868358.1868364&partnerID=40&md5=b740506ccdbf74a4f7087052390dd40f,"This article distills a discussion about the goals, mechanisms, and effects of three environments which aim to support the acquisition and development of computing concepts (problem solving and programming) in pre-University and non-technical students: Alice, Greenfoot, and Scratch. The conversation started in a special session on the topic at the 2010 ACM SIGCSE Symposium on Computer Science Education and continued during the creation of the resulting Special Issue of the ACM Transactions on Computing Education. © 2010 ACM.",Alice; Greenfoot; Programming environment; Programming language; Scratch; Visual programming language,Ada (programming language); Computer programming; Education computing; Alice; Greenfoot; Programming environment; Programming language; Scratch; Visual programming languages; C (programming language)
Preface to special issue on initial learning environments,2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650488791&doi=10.1145%2f1868358.1868359&partnerID=40&md5=0d46f6924958f7db8752f51f4e3c9074,[No abstract available],,
The scratch programming language and environment,2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650495486&doi=10.1145%2f1868358.1868363&partnerID=40&md5=ee4242e05a2a07590b99d778056ab147,Scratch is a visual programming environment that allows users (primarily ages 8 to 16) to learn computer programming while working on personally meaningful projects such as animated stories and games. A key design goal of Scratch is to support self-directed learning through tinkering and collaboration with peers. This article explores how the Scratch programming language and environment support this goal. © 2010 ACM.,Programming environment; Programming language; Scratch; Visual programming language,Ada (programming language); C (programming language); Design goal; Programming environment; Programming language; Scratch; Self-directed learning; Visual programming environments; Visual programming languages; Computer programming
Machines for thinking,2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650476322&doi=10.1145%2f1868358.1868360&partnerID=40&md5=aa43054e484f557682867a43fdff3b21,"In this article we set a context for three Initial Learning Environments Alice, Greenfoot, and Scratch. We consider historical antecedents, technical comparators and design approaches. Categories and Subject Descriptors: K.3.2 [Computer and Information Science Education]: Computer Science Education General Terms: Design, Human Factors, Languages © 2010 ACM.",Alice; Greenfoot; Initial learning environments (ILE); Programming environments; Programming languages; Scratch,Human engineering; Alice; Greenfoot; Learning environments; Programming environment; Programming language; Scratch; Education computing
The design of alice,2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650467519&doi=10.1145%2f1868358.1868362&partnerID=40&md5=f5dd8b999077bf375bdb3da021720ccc,"This article explores the major design characteristics (both pedagogic as well as technical) that helped to shape Alice 2. It identifies several strengths of Alice as well as several weaknesses. An example problem is solved in Alice, covering many of the design characteristics. Finally, the effects and impacts of Alice instruction are presented, and the future directions of Alice development are provided. © 2010 ACM.",Alice; Design; Object-oriented; Program visualization; Programming,Design; Visualization; Alice; Design characteristics; Future directions; Object oriented; Program visualization; Programming; Object oriented programming
Algorithm Visualization: The state of the field,2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79551662207&doi=10.1145%2f1821996.1821997&partnerID=40&md5=45f6248ed9b8fb8c67a013fbe9f6117c,"We present findings regarding the state of the field of Algorithm Visualization (AV) based on our analysis of a collection of over 500 AVs. We examine how AVs are distributed among topics, who created them and when, their overall quality, and how they are disseminated. There does exist a cadre of good AVs and active developers. Unfortunately, we found that many AVs are of low quality, and coverage is skewed toward a few easier topics. This can make it hard for instructors to locate what they need. There are no effective repositories of AVs currently available, which puts many AVs at risk for being lost to the community over time. Thus, the field appears in need of improvement in disseminating materials, propagating known best practices, and informing developers about topic coverage. These concerns could be mitigated by building community and improving communication among AV users and developers.© 2010 ACM.",Algorithm animation; Algorithm Visualization; Algoviz wiki; Community; Data structure visualization; Free and open source software,Algorithms; Animation; Computer software; Data structures; Open systems; Visualization; Algorithm animation; Algorithm Visualization; Algoviz wiki; Community; Free and open source softwares; Data visualization
Identification of cognitive processes of effective and ineffective students during computer programming,2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79551679956&doi=10.1145%2f1821996.1821998&partnerID=40&md5=1cc6cf05ca5fe1b2dc3e0b3bb4d62643,"Identifying the set of cognitive processes (CPs) a student can go through during computer programming is an interesting research problem. It can provide a better understanding of the human aspects in computer programming process and can also contribute to the computer programming education in general. The study identified the presence of a set of 42 CPs in computer programming (C language). The study used Verbal Protocol Analysis (VPA) in identifying these CPs. It is a qualitative study on the Verbal Protocols (VPs) of 19 students. Some of the CPs have been inferred by referring to the literature and some have been additionally identified by this study. The additional CPs found are confusion, hypothesis, interrogation, iteration, monitoring, recollection, recurrence, and translation. It is observed that programming involves the interplay of lower and higher CPs and needs various cognitive skills, which increase the processing load on the brain and make the programming process difficult and complex to learn and practice. The same set of CPs was found in both the effective and ineffective subjects. The research results can provide deeper knowledge to teachers on cognitive aspects of programming and the cognitive behavior of students during the programming process.© 2010 ACM.",Cognitive processes; Cognitive psychology; Computer programming; Effective and ineffective students; Programming education; Verbal Protocol Analysis,Cognitive systems; Students; Teaching; Cognitive process; Cognitive psychology; Effective and ineffective students; Programming education; Verbal protocol analysis; Computer programming
MLeXAI: A project-based application-oriented model,2010,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79551658413&doi=10.1145%2f1821996.1821999&partnerID=40&md5=5fe02d2a3633f68500322e97e5dac35a,"Our approach to teaching introductory artificial intelligence (AI) unifies its diverse core topics through a theme of machine learning, and emphasizes how AI relates more broadly with computer science. Our work, funded by a grant from the National Science Foundation, involves the development, implementation, and testing of a suite of projects that can be closely integrated into a one-term AI course. Each project involves the development of a machine learning system in a specific application. These projects have been used in six different offerings over a three-year period at three different types of institutions. While we have presented a sample of the projects as well as limited preliminary experiences in other venues, this article presents the first assessment of our work over an extended period of three years. Results of assessment show that the projects were well received by the students. By using projects involving real-world applications we provided additional motivation for students. While illustrating core concepts, the projects introduced students to an important area in computer science, machine learning, thus motivating further study.© 2010 ACM.",Artificial intelligence; Projects,Artificial intelligence; Computer science; Curricula; Engineering education; Learning systems; Motivation; Students; AI course; Application-oriented; Machine learning systems; Machine-learning; National Science Foundations; Project-based; Projects; Real-world application; Teaching
Novice Use of the Java Programming Language,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147996710&doi=10.1145%2f3551393&partnerID=40&md5=90e2ea64014777ec20681bfbd1dfef9d,"Objectives. Java is a popular programming language for use in computing education, but it is difficult to get a wide picture of the issues that it presents for novices; most studies look only at the types or frequency of errors. In this observational study, we aim to learn how novices use different features of the Java language.Participants. Users of the BlueJ development environment have been invited to opt in to anonymously record their activity data for the past 8 years. This dataset is called Blackbox, which was used as the basis for this study. BlueJ users are mostly novice programmers, predominantly male, with a median age of 16 years. Our data subset featured approximately 225,000 participants from around the world.Study Methods. We performed a secondary data analysis that used data from the Blackbox dataset. We examined over 320,000 Java projects collected over the course of 8 years and used source code analysis to investigate the prevalence of various specifically selected Java programming usage patterns. As this was an observational study without specific hypotheses, we did not use significance tests. Instead, we present the results themselves with commentary, having applied seasonal trend decomposition to the data.Findings. We found many long-term trends in the data over the course of the 8 years, most of which were monotonic. There was a notable reduction in the use of the main method (common in Java but unnecessary in BlueJ) and a general reduction in the complexity of the projects. We find that there is only a small number of frequently used types: int, String, double, and Boolean, but also a wide range of other infrequently used types.Conclusions. We find that programming usage patterns gradually change over a long period of time (a period in which the Java language was not seeing major changes) once seasonal patterns are accounted for. Any changes are likely driven by instructors and the changing demographics of programming novices. The novices use a relatively restricted subset of Java, which implies that designers of languages specifically targeted at novices can satisfy their needs with a smaller set of language constructs and features. We provide detailed recommendations for the designers of educational programming languages and supporting development tools. © 2022 held by the owner/author(s). Publication rights licensed to ACM.",Blackbox; BlueJ; novice programmers; programming language usage,Ada (programming language); Curricula; % reductions; Black boxes; Bluej; Computing education; Frequency of error; Java language; Novice programmer; Observational study; Programming language usage; Usage patterns; Java programming language
Grand Theories or Design Guidelines? Perspectives on the Role of Theory in Computing Education Research,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148047816&doi=10.1145%2f3487049&partnerID=40&md5=5987e2ad7e50c333cdc584a2cfb71ede,"A rich body of empirically grounded results and a solid theory base have often been viewed as signs of a mature discipline. Many disciplines have frequently debated what they should accept as legitimate kinds of theories, the proper roles of theory, and appropriate reference disciplines. Computing education research (CER) in particular has seen a growing number of calls for the development of domain-specific theories for CER, an adaptation of theories from other fields, and engagement with theory-based experimental and predictive research in CER. Many of those calls share the same concerns and aims, yet they use very different vocabulary and lack a consensus over an essential concept: theory. This article presents sticking points and trouble spots in CER's theory debates and presents a number of suggestions and ways forward. Firstly, by slightly shifting towards a model-based view of science, CER can avoid centuries of conceptual baggage related to the concept of theory. Secondly, insofar as fields like design, engineering, and social science are considered to be legitimate parts of CER, the role of theory in many CER studies needs to be judged by the criteria of the philosophy of engineering, technology, and social science, not the philosophy of (natural) science. Thirdly, instead of force-fitting elements of ill-suited research paradigms from other disciplines, the philosophy of CER should focus on building a consensus on CER's own paradigm and describing the field's relationship with theory in CER's own terms. © 2022 held by the owner/author(s).",design; models; philosophy of CER; Philosophy of computing education research; philosophy of science; theory,Behavioral research; Computation theory; Education computing; Engineering education; Engineering research; Computing education; Domain specific; Education research; Philosophy of computing education research; Philosophy of science; Reference discipline; Theory; Social sciences computing
Learning Theories Use and Relationships in Computing Education Research,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148044650&doi=10.1145%2f3487056&partnerID=40&md5=fa6d63ee3d4d1ae86ec0aaba409b4c63,"The use of established and discipline-specific theories within research and practice is an indication of the maturity of a discipline. With computing education research as a relatively young discipline, there has been recent interest in investigating theories that may prove foundational to work in this area, with discipline-specific theories and many theories from other disciplines emerging as relevant. A challenge for the researcher is to identify and select the theories that provide the best foundation for their work. Learning is a complex and multi-faceted process and, as such, a plethora of theories are potentially applicable to a research problem. Knowing the possible candidate theories and understanding their relationships and potential applicability, both individually or as a community of theories, is important to provide a comprehensive grounding for researchers and practitioners alike. In this work, we investigate the fundamental connections between learning theories foundational to research and practice in computing education. We build a comprehensive list of 84 learning theories and their source and influential papers, which are the papers that introduce or propagate specific theories within the research community. Using Scopus, ACM Digital Library, and Google Scholar, we identify the papers that cite these learning theories. We subsequently consider all possible pairs of these theories and build the set of papers that cite each pair. On this weighted graph of learning theory connections, we perform a community analysis to identify groups of closely linked learning theories. We find that most of the computing education learning theories are closely linked with a number of broader learning theories, forming a separate cluster of 17 learning theories. We build a taxonomy of theory relationships to identify the depth of connections between learning theories. Of the 294 analysed links, we find deep connections in 32 links. This indicates that while the computing education research community is aware of a large number of learning theories, there is still a need to better understand how learning theories are connected and how they can be used together to benefit computing education research and practice. © 2022 Association for Computing Machinery.",computing education research; Learning theories,Cluster computing; Computation theory; Paper; Community analysis; Community IS; Computing education; Computing education research; Education research; Google scholar; Learning Theory; Research communities; Research problems; Weighted graph; Digital libraries
Analysis of Software Engineering Skills Gap in the Industry,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148003388&doi=10.1145%2f3567837&partnerID=40&md5=2bbbbbe10a804dc7b27751f408911f74,"Many practitioners might struggle with becoming productive in different software engineering (SE) roles due to misalignment of the skills learnt during the university time with what is expected in the industry. Companies spend significant resources to train the personnel, whose academic backgrounds are not only based on ""computing disciplines"". Hiring properly trained practitioners allows employers to spend less time while incorporating them more efficiently into the workforce; for employees, knowing the most important skillset is helpful to increase their chance of employability. On the other hand, for academia, understanding the necessary skillset is critical to make curriculum updates. To achieve these objectives, we conducted a survey, which was responded to by 628 software practitioners, who completed their undergraduate degree in Turkey, working in 13 countries. This paper sheds light on the most important (hard and soft) skills in the industry by presenting various cross-factor analyses as well as their coverage in the academic curriculum (mostly in Turkish universities). The results showed that the most important skills are related to various factors such as profiles of the practitioners (e.g., SE role(s), work experience) and the characteristics of the product developed by the practitioner. The findings revealed that both academia and industry should invest in skills improvement: academia can make necessary educational updates according to industrial needs; whereas industry can provide practical experiences to students. By creating the awareness of the expected skillset, both practitioners and academics will benefit from the results, which help close the gaps that can and should be achieved through more Industry Academia Collaborations (IACs). © 2022 Association for Computing Machinery.",Hard skills; industry-academia collaboration; knowledge area; practitioner survey; soft skills; software engineering education; software industry,Engineering education; Personnel; Software engineering; Students; Engineering skills; Hard skill; Industry-academia collaboration; Knowledge areas; Practitioner surveys; Skill sets; Skills gaps; Soft skills; Software engineering education; Software industry; Curricula
Toward a Competence Model for Graphical Modeling,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148035059&doi=10.1145%2f3567598&partnerID=40&md5=a0f393759757374e38753550a0508906,"Modeling is an integral part of many computing-related disciplines and thus also represents a curricular core component in computing education in tertiary education. Competence models in which modeling is integrated at least to some extent already exist in some of these disciplines. However, for the core component of graphical modeling, a competence model that illuminates the relevant competences in detail is still lacking. Therefore, we develop a competence model for graphical modeling with the aim to make teaching and especially assessments in the field more competence-oriented. This article reports on the first two studies conducted to develop and validate the competence model for graphical modeling. In the first study, the structure of the competence model was developed based on theories and approaches of educational science. Competences relevant for graphical modeling were deductively derived from literature and existing university course descriptions using techniques of qualitative content analysis. The result of the first study is a preliminary competence model. In the second study, the preliminary competence model was reviewed by means of an expert rating in the modeling community. The competence model was revised and refined based on these findings and subsequent expert discussions. The main result of the investigation represents the competence model for graphical modeling, which includes a total of 74 competence facets at different cognitive process levels in the five content areas of ""model understanding and interpreting,""""model building and modifying,""""values, attitudes, and beliefs,""""metacognitive knowledge and skills,""and ""social-communicative skills."" © 2022 Association for Computing Machinery.",competence model; computer science; conceptual modeling; Graphical modeling; higher education,Computation theory; Curricula; Education computing; Engineering education; Competence models; Computing education; Computing-related disciplines; Conceptual model; Core components; Educational science; GraphicaL model; High educations; Integral part; Tertiary education; Graphic methods
The Perception of Teachers on Usability and Accessibility of Programming Materials for Children with Visual Impairments,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148000425&doi=10.1145%2f3561391&partnerID=40&md5=2ab6e7e55ccac2f258eded7b2d3fbef7,"Programming education is strongly emerging in elementary and high school. Diversity and inclusion are important topics, however, insights on suited programming materials for younger learners with visual impairments are lacking. A wide range of programming materials for children exists, diverse in both what is being programmed (output) and how this is done (input), yet often relying on visual features. An understanding of the usability and accessibility aspects of these different materials is important to inform educational practice and to increase understanding of what makes programming materials suited for low vision and blind children. The aim of this study is to explore the usability and accessibility of programming materials currently used in education to low vision and blind children in the Netherlands. A focus group was conducted with six teachers or IT experts, all working with the target group in special education. The thematic analysis of the discussion of 25 materials (including unplugged lessons, robots and robotic kits, block-based and text-based languages) showed the potential of several materials, especially unplugged lessons, and the continuing search for suited materials and workforms specifically for the blind children. Furthermore, prioritizing ""fun""and close connections to children's daily life as well as careful explorations of usability at the cognitive level came forward as important factors for future research and development in programming materials for low vision and blind children. These insights can contribute to obtaining an inclusive approach to programming for young learners. © 2022 held by the owner/author(s).",Children's programming materials; usability and accessibility; visual impairments,Blind children; Child programming material; Elementary schools; Higher School; Low vision; Programming education; Teachers'; Usability and accessibility; Visual feature; Visual impairment; Usability engineering
"Development and Use of Domain-specific Learning Theories, Models, and Instruments in Computing Education",2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85140598214&doi=10.1145%2f3530221&partnerID=40&md5=f7bfa55cd8902a89595f3d883773f3ae,"Use of theory within a field of research provides the foundation for designing effective research programs and establishing a deeper understanding of the results obtained. This, together with the emergence of domain-specific theory, is often taken as an indicator of the maturity of any research area. This article explores the development and subsequent usage of domain-specific theories and theoretical constructs (TCs) in computing education research (CER). All TCs found in 878 papers published in three major CER publication venues over the period 2005-2020 were identified and assessed to determine the nature and purpose of the constructs found. We focused more closely on areas related to learning, studying, and progression, where our analysis found 80 new TCs that had been developed, based on multiple epistemological perspectives. Several existing frameworks were used to categorize the areas of CER focus in which TCs were found, the methodology by which they were developed, and the nature and purpose of the TCs. A citation analysis was undertaken, with 1,727 citing papers accessed to determine to what extent and in what ways TCs had been used and developed to inform subsequent work, also considering whether these aspects vary according to different focus areas within computing education. We noted which TCs were used most often and least often, and we present several brief case studies that demonstrate progressive development of domain-specific theory. The exploration provides insights into trends in theory development and suggests areas in which further work might be called for. Our findings indicate a general interest in the development of TCs during the period studied, and we show examples of how different approaches to theory development have been used. We present a framework suggesting how strategies for developing new TCs in CER might be structured and discuss the nature of theory development in relation to the field of CER. © 2022 Association for Computing Machinery.",Computing education; instrument; literature; research; theoretical construct; theory,Computing education; Domain specific; Education research; Learning Theory; Literature; Specific learning; Theoretical construct; Theory; Theory development; Theory model
Reflections on Theory,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148043535&doi=10.1145%2f3570728&partnerID=40&md5=a3dc3811d3423c7f28e394cf0d45e5b6,"In this paper, I reflect on how my personal conceptions on ""theory""have developed and become more diverse and elaborated during my career. I discuss early conceptions I learned in school and during my university studies, followed by the growing awareness of computing education research as a field that is distinct from many areas of computer science. Becoming aware of how research is carried out in social sciences and how theories are used in these contexts raised my interest in understanding what this implies for computing education research as a field, which has been building its own identity during the past 20+ years. © 2022 Association for Computing Machinery.",research community; research quality; Theory,Computation theory; Computing education; Education research; Research communities; Research quality; Theory; Education computing
Expert Perspectives on Student Errors in SQL,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147994325&doi=10.1145%2f3551392&partnerID=40&md5=63780bff697a8df52b99f52bc04a5382,"Prior studies in the Computer Science education literature have illustrated that novices make many mistakes in composing SQL queries. Query formulation proves to be difficult for students. Only recently, some headway was made towards understanding why SQL leads to so many mistakes, by uncovering student misconceptions. In this article, we shed new light on SQL misconceptions by analyzing the hypotheses of SQL experts on the causes of student errors. By examining the experts' perceptions, we draw on their understanding of students' misconceptions and on their experiences with studying and teaching SQL. For our analysis, we chose the Policy Delphi, a questionnaire instrument specifically designed for gathering opinions and evidence. Through a two-round process, our nineteen participants proposed and voted on underlying causes for SQL errors which resulted in a set of hypotheses per error. Our main contribution to this article is this new set of possible misconceptions. With them, we can design more complete educational approaches to address misconceptions underlying SQL errors made by students, leading to more effective SQL education. © 2022 held by the owner/author(s).",delphi study; Errors; misconceptions,Education computing; Students; Can design; Computer Science Education; DELPHI study; Educational approach; Misconception; Query formulation; SQL query; Student misconceptions; Underlying cause; Errors
Conceptualizing the Researcher-Theory Relation,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148040656&doi=10.1145%2f3570730&partnerID=40&md5=83768ed83ef36e51159a37e0dfa318e9,"In this article, I interrogate the relation between a researcher and the theories that the researcher gets involved with. I use my own trajectory as a computing education researcher as a way to make visible how different conceptions of this relation are shaped through prior encounters with different theories in the human sciences, particularly theories of mind, language, and knowledge. While modernist theories stemming from the Enlightenment that presuppose a disengaged researcher have predominated in CS and CER, theories of mind, language, and knowledge associated with pragmatist and phenomenological philosophical perspectives from the 20th Century challenge these modernist views. Under these newer theoretical perspectives, the researcher is always already involved with theory, even if such theory has withdrawn into the unnoticed background, a background that gives every research study its intelligibility. Recognizing that all researchers are caught in the grip of theory may help in both abandoning theories that no longer serve and staying open to adopt new and emergent theories. © 2022 held by the owner/author(s).",cognitivism; modernism; phenomenology; pragmatism; Theory,Philosophical aspects; 20th century; Cognitivism; Computing education; Human science; Modernism; Phenomenology; Pragmatism; Theories of knowledge; Theory; Theory of minds; Computation theory
A Review of Worked Examples in Programming Activities,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148034714&doi=10.1145%2f3560266&partnerID=40&md5=ae5fb1b2b54886afc53acfbb41767349,"This article reviews literature on worked examples in the context of programming activities. We focus on two types of examples, namely, code-tracing and code-generation, because there is sufficient research on these to warrant a review. We synthesize key results according to themes that emerged from the review. This synthesis aims to provide practical guidance for educators and shed light on future research opportunities. While there is established work in some areas (e.g., dynamic code-tracing examples in the form of program visualization tools, utility of subgoals in code-generation examples, and incomplete examples in the form of Parsons puzzles), there are also gaps. Thus, the article concludes with directions for future work on examples in computer science education. © 2022 Association for Computing Machinery.",code-generation examples; code-tracing examples; review; Worked examples,Engineering education; Code-generation example; Code-tracing example; Codegeneration; Parsons puzzles; Practical guidance; Program visualization tools; Programming activities; Research opportunities; Subgoals; Worked examples; Education computing
Practitioner Perspectives on COVID-19's Impact on Computer Science Education Among High Schools Serving Students from Lower and Higher Income Families,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148016583&doi=10.1145%2f3557047&partnerID=40&md5=29478052f48016cd7b29e43a5cb4eb63,"Research Problem. Computer science (CS) education researchers conducting studies that target high school students have likely seen their studies impacted by COVID-19. Interpreting research findings impacted by COVID-19 presents unique challenges that will require a deeper understanding as to how the pandemic has affected underserved and underrepresented students studying or unable to study computing.Research Question. Our research question for this study was: In what ways has the high school computer science educational ecosystem for students been impacted by COVID-19, particularly when comparing schools based on relative socioeconomic status of a majority of students?Methodology. We used an exploratory sequential mixed methods study to understand the types of impacts high school CS educators have seen in their practice over the past year using the CAPE theoretical dissaggregation framework to measure schools' Capacity to offer CS, student Access to CS education, student Participation in CS, and Experiences of students taking CS.Data Collection Procedure. We developed an instrument to collect qualitative data from open-ended questions, then collected data from CS high school educators (n = 21) and coded them across CAPE. We used the codes to create a quantitative instrument. We collected data from a wider set of CS high school educators (n = 185), analyzed the data, and considered how these findings shape research conducted over the last year.Findings. Overall, practitioner perspectives revealed that capacity for CS Funding, Policy & Curriculum in both types of schools grew during the pandemic, while the capacity to offer physical and human resources decreased. While access to extracurricular activities decreased, there was still a significant increase in the number of CS courses offered. Fewer girls took CS courses and attendance decreased. Student learning and engagement in CS courses were significantly impacted, while other noncognitive factors like interest in CS and relevance of technology saw increases.Practitioner perspectives also indicated that schools serving students from lower-income families had (1) a greater decrease in the number of students who received information about CS/CTE pathways; (2) a greater decrease in the number of girls enrolled in CS classes; (3) a greater decrease in the number of students receiving college credit for dual-credit CS courses; (4) a greater decrease in student attendance; and (5) a greater decrease in the number of students interested in taking additional CS courses. On the flip-side, schools serving students from higher income families had significantly higher increases in the number of students interested in taking additional CS courses. © 2022 Association for Computing Machinery.",Access; Capacity; CAPE framework; COVID-19; Experience; historically marginalized; Participation; underrepresented; underserved,Codes (symbols); Curricula; Data acquisition; Education computing; Engineering education; Students; Access; Capacity; CAPE framework; Computer Science course; Experience; Higher School; Historically marginalized; Participation; Underrepresented; Underserved; COVID-19
Using Discrimination Response Ideation to Uncover Student Attitudes about Diversity and Inclusion in Computer Science,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146452245&doi=10.1145%2f3550487&partnerID=40&md5=b76f1f1ec62f2f1b5158ef1922fc2a8d,"Helping students learn to identify and respond to situations involving discrimination is important, especially in fields like Computer Science where there is evidence of an unwelcoming climate that disproportionately drives underrepresented students out of the field. While students should not be considered responsible for fixing issues around discrimination in their institutions, they do have a role to play. In this paper, we present the results of a study in which 318 undergraduate computer science majors were presented with scenarios of discrimination and asked to identify the issues, rate the severity of the issues, and ideate 3-5 responses to address the described situations. They were also asked to identify which of their responses would likely be most effective in addressing discrimination and which of their responses they would be most likely to use if they were in the situation described in real life. Our results show that while students generally are able to identify various forms of discrimination (sexism, racism, religious discrimination, ethnic discrimination, etc.), any ambiguity in a scenario led to students describing the scenario as less severe and/or as an example of oversensitivity. We also show that students come up with many passive responses to scenarios of discrimination (such as ignoring the situation or wishing it had not happened in the first place). Students in our study were more likely to say they would deploy passive responses in real life, shying away from responses that involve direct confrontation. We observed some differences between student demographic subgroups. Women and BIPOC students in CS tend to think these issues are more severe than men and White and Asian students in CS. Women are more likely to ideate direct confrontation responses and report willingness to use direct confrontation responses in real situations. Our work contributes a methodology for examining student awareness and understanding of diversity issues as well as a demonstration that undergraduate computer science students need help in learning how to address common situations that involve either intentional or unintentional discrimination in an academic environment.  © 2022 Association for Computing Machinery.",Computing education; diversity; education climate; inclusion; microaggression; scenarios; vignettes,Education computing; Engineering education; Computing education; Diversity; Education climate; In-field; Learn+; Microaggression; Scenario; Student attitudes; Underrepresented students; Vignette; Students
Early Findings on the Impacts of Developing Evidence-Based Practice Briefs on Middle School Computer Science Teachers,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146473001&doi=10.1145%2f3543512&partnerID=40&md5=e2851420345ed2ebc50d6e6c3e765ffa,"Problem. K-12 teachers face many challenges when teaching a new subject like computer science (CS). They are often far removed from the research being conducted to identify evidence-driven solutions to these challenges. Likewise, researchers are also often removed from the challenges of classroom practices that teachers face when teaching CS.Research Questions. To create a collaborative process for teachers and researchers outside of a research practice partnership, we piloted a facilitated process in which CS middle school teachers and CS education researchers collaboratively created CS teacher practice briefs. Our research question for this study was: In what ways are teachers impacted by the process of creating teacher practice briefs in collaboration with researchers?Methodology. We conducted a qualitative study, using a semi-structured interview protocol to interview five teachers and three researchers to gain an understanding of how this process impacted the participants. We used thematic content analysis to identify several subthemes across our pre-established themes: motivation for teachers to participate, impacts on teachers, perceived impacts on students, and impacts on researchers.Findings. We found that the impact on teachers mirrored impacts found on teachers who engage in Research Practice Partnerships, including increased self-efficacy, expanded professional networks, and changed classroom practices.Implications. By bringing researchers and educators together with a clear focus on equity-based problems of practice in CS education, the results display a multitude of positive impacts. Teachers indicate that they are are positively impacted, researchers develop a clear understanding of realistic practices, and students are peripherally impacted through changed practices in the classroom. Therefore, the most significant contribution to advance the disciplinary understanding is the potential for this new process to decrease the gap between research and practice.  © 2022 Association for Computing Machinery.",challenges; computational thinking; computer science; impacts; middle school; practice; Qualitative; research and practice; researchers; teacher practice briefs; teachers,Education computing; Teaching; Challenge; Computational thinkings; Impact; Middle school; Practice; Qualitative; Research and practice; Researcher; Teacher practice brief; Teacher practices; Teachers'; Students
Interest Development Theory in Computing Education: A Framework and Toolkit for Researchers and Designers,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146439437&doi=10.1145%2f3487054&partnerID=40&md5=7f31116d58e555966d29e6239ab0c527,"Computing is rapidly becoming a critical literacy for succeeding in an increasingly technological world. While the proliferation of programs dedicated to broadening participation in computing increases access, computing education research can benefit from more directly drawing on current interest development theory to improve interventions that increase the desire to participate and persist in computing. In this article, we present an overview of current interest development theory and provide guidance to computing education researchers on ways to ground their conceptualization and measurement of interest in contemporary theory and inform ways of interweaving interest theory throughout intervention or curriculum design. The central contribution of this work is presenting the Integrated Interest Development for Computing Education Framework. This framework is organized around three central dimensions of interest: value, knowledge, and belonging. For each of these dimensions, the framework presents key factors that link the dimension to strategies that can be employed in computing education contexts to help develop interest. The article also describes methods of measuring interest in computing that are consistent with interest development theory, and provides examples and resources for validated measures of interest. We conclude with a discussion of the implications and potential for improving the conceptualization and measurement of interest development in computing education and future work needed to advance an understanding of how interest in computing develops that can lead to improving the design of computing educational programs to support interest development.  © 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.",broadening participation; Interest development; theory in computing education,Curricula; Broadening participation; Broadening participation in computing; Computing education; Directly drawing; Education research; Interest development; Measurements of; On-currents; Technological world; Theory in computing education; Computation theory
Editorial: Conceptualizing and Using Theory in Computing Education Research,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146465858&doi=10.1145%2f3542952&partnerID=40&md5=ae4caf8688f7bb2460cd8f859b7332d5,"There has been considerable recent interest in a number of questions related to theory within computing education research. In this editorial, we summarize some of this recent interest, discuss the process in which this special issue came to be, and how papers were selected for inclusion. We end with a brief summary of each of the six papers appearing in this special issue, highlighting the relevance of each to this issue's theme.  © 2022 Copyright held by the owner/author(s).",computing education research; Theory; theory definition; theory use,Computer programming; Computing education; Computing education research; Education research; Theory; Theory definition; Theory use; Computation theory
From One Language to the Next: Applications of Analogical Transfer for Programming Education,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146419335&doi=10.1145%2f3487051&partnerID=40&md5=e9fee989a27d2aa539a2ec46eaa7426e,"The 1980s and 1990s saw a robust connection between computer science education and cognitive psychology as researchers worked to understand how students learn to program. More recently, academic disciplines such as science and engineering have begun drawing on cognitive psychology research and theories of learning to create instructional materials and teacher professional development materials based on theories of learning, to some success. In this paper, we follow a similar approach by highlighting common areas of interest between computer science education and cognitive psychology-specifically theories of analogical transfer-and discuss how cross-pollination of theoretical constructs between disciplines can support research on the teaching and learning of multiple programming languages. We will also discuss areas where computing education research can adapt the existing theories from cognitive psychology to develop domain-specific theories of knowledge transfer in computing and feed back into cognitive psychology research to inform larger debates about the nature of cognition and learning.  © 2022 Association for Computing Machinery.",Cognitive psychology; computer science education; programming; transfer,Cognitive systems; Computation theory; Engineering education; Knowledge management; Cognitive psychology; Computer Science Education; Instructional materials; Learn+; Programming; Programming education; Science and engineering; Teacher professional development; Theories of learning; Transfer; Education computing
Equity and Inclusion through UDL in K-6 Computer Science Education: Perspectives of Teachers and Instructional Coaches,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85159691201&doi=10.1145%2f3513138&partnerID=40&md5=8f4a12105147ed5a8ed2fdd775f4fc15,"Through a mixed-methods approach that utilized teacher surveys and a focus group with computer science (CS) instructional coaches, this study examined elementary teachers' confidence in meeting the needs of students with disabilities, the extent to which the teachers could use the Universal Design for Learning (UDL) framework in CS education, and the strategies that their CS instructional coaches used with them to help meet the needs of all learners, including those with disabilities. Findings from a Wilcoxon signed-rank test and a general linear regression of the teacher surveys revealed that teachers' confidence in teaching CS and in meeting the needs of students with disabilities increased over the 5 month coaching study, but their understanding of UDL remained low throughout the study. A qualitative thematic analysis of open-response survey questions revealed that the teachers could identify instructional strategies that support the inclusion of students with disabilities in CS instruction. These strategies aligned with high leverage practices (HLPs) and included modeling, the use of explicit instruction, and opportunities for repeated instruction. When asked to identify UDL approaches, however, they had more difficulty. The focus group with coaches revealed that the coaches' primary aim related broadly to equity and specifically to access to and the quality of CS instruction. However, although they introduced UDL-based strategies, they struggled to systematically incorporate UDL into coaching activities and did not explicitly label these strategies as part of the UDL framework on a consistent basis. This finding explains, to a large extent, the teachers' limited understanding of UDL in the context of CS education.  © 2022 Association for Computing Machinery.",CS instructional coaching; Students with disabilities; universal design for learning,Design; Education computing; Engineering education; Computer Science Education; Computer science instructional coaching; Focus groups; Learning frameworks; Mixed method; Science instructions; Student with disability; Teachers'; Universal Design; Universal design for learning; Students
In the Black Mirror: Youth Investigations into Artificial Intelligence,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85140042675&doi=10.1145%2f3484495&partnerID=40&md5=bffa3e7da45505e41c9389928c45b8bb,"Over the past two decades, innovations powered by artificial intelligence (AI) have extended into nearly all facets of human experience. Our ethnographic research suggests that while young people sense they can't ""trust""AI, many are not sure how it works or how much control they have over its growing role in their lives. In this study, we attempt to answer the following questions: (1) What can we learn about young people's understanding of AI when they produce media with and about it? and (2) What are the design features of an ethics-centered pedagogy that promotes STEM engagement via AI? To answer these questions, we co-developed and documented three projects at YR Media, a national network of youth journalists and artists who create multimedia for public distribution. Participants are predominantly youth of color and those contending with economic and other barriers to full participation in STEM fields. Findings showed that by creating a learning ecology that centered the cultures and experiences of its learners while leveraging familiar tools for critical analysis, youth deepened their understanding of AI. Our study also showed that providing opportunities for youth to produce ethics-centered interactive stories interrogating invisibilized AI functionalities, and to release those stories to the public, empowered them to creatively express their understandings and apprehensions about AI. © 2022 Association for Computing Machinery.",agency; artificial intelligence; computational thinking; Critical pedagogy; engagement; ethics-centered; machine learning; media,Ethical technology; Agency; Computational thinkings; Critical pedagogies; Design features; Engagement; Ethic-centered; Learn+; Machine-learning; Medium; Young peoples; Machine learning
Next Steps for ACM TOCE,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85161707580&doi=10.1145%2f3530983&partnerID=40&md5=ba19e5725ffd6dd9d5c6b7d83d0a8b57,[No abstract available],,
"Examining the What, Why, and How of Multilingual Student Identity Development in Computer Science",2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85149532500&doi=10.1145%2f3500918&partnerID=40&md5=5a11a559fd00da18c047767076d62301,"Developing student interest is critical to supporting student learning in computer science. Research indicates that student interest is a key predictor of persistence and achievement. While there is a growing body of work on developing computing identities for diverse students, little research focuses on early exposure to develop multilingual students' interest in computing. These students represent one of the fastest growing populations in the US, yet they are dramatically underrepresented in computer science education. This study examines identity development of upper elementary multilingual students as they engage in a year-long computational thinking curriculum, and follows their engagement across multiple settings (i.e., school, club, home, community). Findings from pre- and post-surveys of identity showed significant differences favoring students' experiences with computer science, their perceptions of computer science, their perceptions of themselves as computer scientists, and their family support for computer science. Findings from follow-up interviews and prior research suggest that tailored instruction provides opportunities for connections to out-of-school learning environments with friends and family that may shift students' perceptions of their abilities to pursue computer science and persist when encountering challenges. © 2022 Copyright held by the owner/author(s).",computational thinking; Computer science; English learner; identity; multilingual,Computer aided instruction; Education computing; Engineering education; Computational thinkings; Computer Science Education; Computer scientists; English learner; Identity; Multilingual; Research focus; Student experiences; Student learning; Students' interests; Students
A Qualitative Study of Experienced Course Coordinators' Perspectives on Assessment in Introductory Programming Courses for Non-CS Majors,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146441570&doi=10.1145%2f3517134&partnerID=40&md5=538ecf9143b3c36e96ed96bd4bc6cf4f,"Assessment plays an important role in education and can both guide and motivate learning. Assessment can, however, be carried out with different aims: providing the students with feedback that supports the learning (formative assessment) and judging to which degree the students have fulfilled the intended learning outcomes (summative assessment). In this study, we explore the instructors' perspective on assessment within the context of introductory programming courses offered to non-computer-science majors at a public tuition-free state-funded university in a Nordic country. These courses are given to a large number of students and also employ several teaching assistants (TAs). We used constructivism as a basis for our study and investigated how instructors implement formative and summative assessments, how they view their role, and what expectations they have of their TAs in these assessments. We interviewed seven course coordinators (main instructors for introductory programming courses with additional administrative duties but without formal responsibility of the grading) and analyzed 205 course artifacts, such as syllabi, lab assignment instructions, and course material from the cross-department TA training course. The results showed that course coordinators use formative and summative assessments both separately and within the same activity. They view themselves as responsible for the assessments, as the planners and material developers, as the organizers and administrators, and as monitors of the assessments. However, the results also showed that these course coordinators delegate much of the responsibility for the assessments to their TAs and expect TAs to both grade the students and provide them with feedback and guidance. In addition, the TAs are also expected to act as informants about their students' performance. The course coordinators' role entails many different aspects, where communicating through instructions to both students and TAs is essential. We see that this implementation of assessment, with lots of responsibility distributed to the TAs, could be difficult to manage for a single faculty member who is not necessarily responsible for the grading. Based on the results, we outline some recommendations, such as offering TA training.  © 2022 Copyright held by the owner/author(s).",Assessment; CS1; instructors' perceptions,Computer programming; Education computing; Grading; Teaching; Assessment; Formative and summative assessments; Formative assessment; Instructor perceptions; Intended learning outcomes; Introductory programming course; Qualitative study; Summative assessments; Teaching Assistant trainings; Teaching assistants; Students
Metacognition and Self-Regulation in Programming Education: Theories and Exemplars of Use,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146220856&doi=10.1145%2f3487050&partnerID=40&md5=f3b4214b5ae962a665beefd10f454f32,"Metacognition and self-regulation are important skills for successful learning and have been discussed and researched extensively in the general education literature for several decades. More recently, there has been growing interest in understanding how metacognitive and self-regulatory skills contribute to student success in the context of computing education. This article presents a thorough systematic review of metacognition and self-regulation work in the context of computer programming and an in-depth discussion of the theories that have been leveraged in some way. We also discuss several prominent metacognitive and self-regulation theories from the literature outside of computing education - for example, from psychology and education - that have yet to be applied in the context of programming education.In our investigation, we built a comprehensive corpus of papers on metacognition and self-regulation in programming education, and then employed backward snowballing to provide a deeper examination of foundational theories from outside computing education, some of which have been explored in programming education, and others that have yet to be but hold much promise. In addition, we make new observations about the way these theories are used by the computing education community, and present recommendations on how metacognition and self-regulation can help inform programming education in the future. In particular, we discuss exemplars of studies that have used existing theories to support their design and discussion of results as well as studies that have proposed their own metacognitive theories in the context of programming education. Readers will also find the article a useful resource for helping students in programming courses develop effective strategies for metacognition and self-regulation.  © 2022 Copyright held by the owner/author(s).",Cognition; cognitive control; CS1; metacognition; metacognitive awareness; programming; self-regulation,Cognitive systems; Computation theory; Computer programming; Deregulation; Cognition; Cognitive control; Computing education; Education theories; Metacognition; Metacognitive awareness; Metacognitives; Programming; Programming education; Self regulation; Students
Coding with Purpose: Learning AI in Rural California,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85161653347&doi=10.1145%2f3513137&partnerID=40&md5=e51fa40afd0746d47a5bae60f121c640,"We use an autoethnographic case study of a Latinx high school student from a rural, agricultural community in California to highlight how AI is learned outside classrooms and how her personal background influenced her social-justice-oriented applications of AI technologies. Applying the concept of learning pathways from the learning sciences, we argue that redesigning AI education to be more inclusive with respect to socioeconomic status, ethnoracial identity, and gender is important in the development of computational projects that address social-injustice. We also learn about the role of institutions, power structures, and community as they relate to her journey of learning and applying AI. The future of AI, its potential to address issues of social injustice and limiting the negative consequences of its use, will depend on the participation and voice of students from the most vulnerable communities. © 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.",AI education; autoethnography; learning pathways; social justice and AI,Economic and social effects; AI education; AI Technologies; Applications of AI; Autoethnography; California; Case-studies; High school students; Learning pathway; Social AI; Social justice; Students
"""Go[ing] Hard...as a Woman of Color"": A Case Study Examining Identity Work within a Performative Dance and Computing Learning Environment",2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146472723&doi=10.1145%2f3531000&partnerID=40&md5=e8f1da601c64b9f8d5dba64393730a3b,"Performing arts computing environments have received little attention in the educational sphere; yet, they offer opportunities for learners to validate their efforts, ideas, and skills through showcasing their work in a public-facing performance. In this work, we explore an out-of-school dance and computing educational program run by the organization, STEM From Dance. The organizational mission is to create an equitable learning experience for young women of color to engage with computing while exposing them to STEM careers. Through an analysis of eleven interviews with youth participants, instructors, and the executive director, we examine how the social, cultural, and political dimensions of the learning environment facilitate identity work in computing and dance. Our findings point to three primary activities used by the organization to promote equity: (1) providing psychological safety through a supportive community environment, (2) meaningfully engaging with learners' social and cultural context through creative work with constructionist artifacts, and (3) actively promoting identity work as women of color in computing and STEM through both artifact work and community events. Applying the constructs of identity and psychological safety we explore the tensions and synergies of designing for equity in this performing arts and computing learning environment. We demonstrate how the seemingly contradictory elements of a high-stakes performance within a novice learning environment provides unique opportunities for supporting young women of color in computing, making them non-negotiable in the organization's efforts to promote equity and inclusion. Our work illustrates how attending closely to the sociocultural dimensions in a constructionist learning environment provides lenses for navigating equity, identity work, and support for inclusive computing.  © 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.",computing education; dance; Equity; identity work,Arts computing; Computer aided instruction; Case-studies; Computing education; Computing environments; Dance; Equity; Identity work; Learning environments; Performance; Performing arts; Psychological safety; Color
"Alignment among Normative, Prescriptive, and Descriptive Models of Computer Science Curriculum: The Effect of ABET Accreditation on CS Education",2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85149883867&doi=10.1145%2f3513141&partnerID=40&md5=eec69eac9493a9c67c0e94c72d923d0a,"In May and June 2021, the author conducted a survey of the computing and mathematical graduation requirements of 500 Bachelor of Science in Computer Science (BSCS) programs in the U.S. to determine alignment among these requirements and those recommended by ACM/IEEE-CS's Computer Science Curricula 2013 guidelines and ABET's Criteria for Accrediting Computing Programs 2021-2022 curricular criterion. Specifically, computing and mathematics credit-hour and course graduation requirements were determined for ABET-accredited and non-accredited BSCS programs within public and private universities. As (i) curricular guidelines are recommendations that do not have to be followed, (ii) curricular accreditation criteria are minimal constraints that may be exceeded, and (iii) non-accredited programs may choose to meet or exceed curricular accreditation criterion, it is possible that graduating computer science students are exposed to similar, or a wide variety, of coursework and associated topics. The survey results presented in this article provide broad answers to these three curricular possibilities. In turn, these results can contribute to future discussions concerning the perceived value of accreditation to students and industry stakeholders, allow educators in computer science departments to compare their curriculum to a large sample of other universities, and provide curricular committees additional insight into how various curricular guidelines are realistically being used.  © 2022 Association for Computing Machinery.",ABET accreditation; Computer Science Curriculum; Curricular survey,Curricula; Education computing; Engineering education; Students; ABET accreditation; Accreditation criteria; Bachelor of science; Computer science curricula; Computer science programs; Curricular guidelines; Curricular survey; Descriptive Model; Normative models; Prescriptive models; Accreditation
Impact of UX Internships on Human-computer Interaction Graduate Students: A Qualitative Analysis of Internship Reports,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85138365104&doi=10.1145%2f3517132&partnerID=40&md5=7517dd85328ce46dc757cbcdf77ea57e,"Objectives. Internships can bring a host of professional and academic benefits to students. Then, how do User Experience (UX) internships influence Human-Computer Interaction (HCI) graduate students' professional and academic growth? What are the challenges experienced by HCI graduate students during internships? We explored these two research questions.Participants. Our study participants were 42 HCI graduate students who completed UX internships. They came from computing and related disciplines, including computer science, information technology, psychology, and design. Some of the participants' internship titles were Interaction Designer, Design Researcher, UX Programmer, and Business Intelligence Analyst.Study Method. We conducted a thematic analysis on 42 graduate students' UX internship reports that were collected over 6 years to uncover themes in relation to our two research questions.Findings. As for UX internship benefits, we found that students learned about the workplace culture (e.g., academia vs. industry/government on research design processes) and core UX technical (e.g., research, design, programming) and people skills (e.g., teamwork, empathy toward end-users); they also realized what they wanted in future careers after completing their internships. We also found internship challenges that were related to the internship program (e.g., the availability of internship opportunities), the host organizations (e.g., the quality of mentorship received), and remote working (e.g., difficulty over conducting remote usability testing).Conclusions. We make practical recommendations for HCI educators, UX practitioners, and HCI graduate students on how they can work collaboratively to create a meaningful UX internship experience. These recommendations include researching the host organization prior to internships, providing comprehensive onboarding, and being transparent with internship constraints.  © 2022 Association for Computing Machinery.",computing education; experiential learning; HCI education; UX internship,Software testing; Students; Academic benefit; Computing education; Experiential learning; Graduate students; Human computer interaction education; Qualitative analysis; Research designs; Research questions; Users' experiences; UX internship; Human computer interaction
Dual Process Theories: Computing Cognition in Context,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146427617&doi=10.1145%2f3487055&partnerID=40&md5=456700bab33ad456283bca6cc8858972,"This paper explores a major theoretical framework from psychology, Dual Process Theory (DPT), which has received surprisingly little attention in the computing education literature. DPT postulates the existence of two qualitatively different kinds of cognitive systems, a fast, intuitive ""System 1""and a slow, reflective ""System 2"". System 1 is associated with cognitive factors such as crystallized intelligence, long-term memory and associative learning; System 2 with fluid intelligence, working memory, and rule learning. This paper summarizes DPT and the way it has been expressed and explored in literatures relating to intelligence, memory, learning, attention, cognitive load, and more. It proposes a summary model, the Dual Process Cycle (DPC). It then considers example concepts from computing education within the context of this model. Examples include programming expertise, mental models of programs, the notional machine, code reading and code writing, and the theory of Learning Edge Momentum (LEM). In conclusion, it is argued that the DPC (and the framework of DPTs in general) provides a useful context for defining such concepts more richly and exactly, and for generating interesting questions about them.  © 2022 Association for Computing Machinery.",computing cognition; Dual Process Cycle; Dual process theories; Psychology of programming,Associative processing; Codes (symbols); Computation theory; Education computing; Learning systems; Computing cognition; Computing education; Dual process; Dual process cycle; Dual-process theories; In contexts; Memory learning; Process cycles; Psychology of programming; Theoretical framework; Cognitive systems
"Assessment of Code, Which Aspects Do Teachers Consider and How Are They Valued?",2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146423148&doi=10.1145%2f3517133&partnerID=40&md5=cfc6b600586c238e148dcab3f6d663cd,"In many countries, computer programming is becoming an integral part of the secondary school curriculum. However, many teachers, especially in the first years of Flemish secondary school, have limited experience with teaching programming. To improve their knowledge about programming, many different types of professional development programs have been proposed. Nevertheless, these programs mostly focus on technical skills and less on pedagogical skills. One aspect that is often overlooked in these programs is how teachers can assess code. To get insight into what teachers currently value when assessing code, we designed an experiment that analyzes the different aspects teachers consider during the assessment of code. During the experiment, the teachers (N=13) assess a set of programs from five different fictional learners. After the assessment, they participated in a semi-structured interview, giving us insight into the assessment process. We evaluated the transcripts of the interviews using deductive thematic analysis using a coding schema defining the different aspects of code that can be assessed. Additionally, we linked the assessment strategies of teachers to their teaching experience. Our results indicate that many teachers are unaware of the different concepts that can be part of the assessment of code, which might lead to inaccurate or invalid feedback. Moreover, although our experimental group was too small to draw hard conclusions about the inter-case results, our results indicate that the number of concepts considered by teachers seems to increase with experience. These results provide an initial insight into the code assessment practices of teachers and reveals interesting pathways for future research into the assessment of code.  © 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.",assessment; K12; programming; teachers; thematic analysis,Curricula; Education computing; Assessment; First year; Integral part; Professional development programme; Programming; Secondary schools; Teachers'; Teaching programming; Technical skills; Thematic analysis; Computer programming
Forging a Path: Faculty Interviews on the Present and Future of Computer Science Education in the United States,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146484219&doi=10.1145%2f3546581&partnerID=40&md5=88548bd88a7267c54bc3408390885243,"Computer science education (CSEd) is a growing interdisciplinary area that continues to gain momentum from students, researchers, and educators. Yet, there are few formal programs or degree options for students interested in pursuing graduate work in CSEd. This article explores the existing state of CSEd in the United States (U.S.) through semi-structured interviews with (n = 15) faculty engaged in CSEd research. Thematic coding of the transcripts revealed the complexities involved in the development of formal programs, the distinct considerations for faculty, and the value of having strong ties to both computer science and education. The themes described positive aspects of support and cohesion within the larger community and opportunities to expand knowledge across fields. Applying Cornell and Parker's principles of interdisciplinary science to the field of CSEd, we provide recommendations for ways forward and discuss the potential impact on institutional structures, research capacity, individual and group identities, and teaching and learning. The findings from this investigation not only inform on the present state of CSEd in the U.S., but also offer guidance for CSEd-focused graduate programs.  © 2022 Copyright held by the owner/author(s).",Computer science education; Computing education; CSEd research,Education computing; Engineering education; Computer Science Education; Computer science education research; Computing education; Formal programs; Group identities; Institutional structure; Potential impacts; Research capacities; Research groups; Semi structured interviews; Students
Disrupting Computing Education: Teen-Led Participatory Design in Libraries,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85143704209&doi=10.1145%2f3484494&partnerID=40&md5=afe2f17f003f30a2d75354691b3b685a,"Large-scale disparities in computing exist for many youth of color. Learning in informal settings can increase the participation of youth in computing; however, computing education programs have typically been developed by adults for youth. We argue computing education can contribute toward decolonization by directly involving youth from nondominant communities as design partners. When we directly involve youth voices, we can move away from focusing solely on the structural barriers faced by youth of color toward an assets-based approach. We examine a 10-week case study within KidsTeam Libraries, an intergenerational digital design program where local youth conceptualize what digital learning could look like in libraries. Our qualitative dataset includes over 15 hours of video recordings from participatory design sessions, six interviews with participants, 10 researcher jottings, and a corpus of 25 researcher memos written by researchers, librarians, and teens. Throughout our investigation, our knowledge claims are co-constructed with the two teenagers who led the design and implementation of a three-dimensional printing curriculum in their local library with 10 children. Our findings emphasize (1) the ways in which the involvement of teen leaders can foster and sustain community-level relationships for computing education; (2) how we noticed, enforced, and disrupted power within our computing education program; and (3) the systemic challenges we confronted in our process toward disrupting computing education. We provide empirical evidence of teen-led participatory design approaches for computing education in their community through detailed vignettes from sessions and through quotes from key participants. We contribute to the computing education community a novel approach in which youth are positioned as design partners for reimagining a computing education experience in libraries that centers and serves community members. © 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.",decolonizing imaginaries; Participatory design; teen-led,3D printing; Digital libraries; Video recording; Case-studies; Computing education; Decolonizing imaginarie; Design programs; Digital designs; Education programmes; Imaginaries; Large-scales; Participatory design; Teen-lead; Libraries
Cognitive Load Theory in Computing Education Research: A Review,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85137122957&doi=10.1145%2f3483843&partnerID=40&md5=b10fca2384b83998da278cf1203fd524,"One of the most commonly cited theories in computing education research is cognitive load theory (CLT), which explains how learning is affected by the bottleneck of human working memory and how teaching may work around that limitation. The theory has evolved over a number of decades, addressing shortcomings in earlier versions; other issues remain and are being debated by the CLT community. We conduct a systematic mapping review of how CLT has been used across a number of leading computing education research (CER) forums since 2010. We find that the most common reason to cite CLT is to mention it briefly as a design influence; authors predominantly cite old versions of the theory; hypotheses phrased in terms of cognitive load components are rare; and only a small selection of cognitive load measures have been applied, sparsely. Overall, the theory's evolution and recent themes in CLT appear to have had limited impact on CER so far. We recommend that studies in CER explain which version of the theory they use and why; clearly distinguish between load components (e.g., intrinsic and extraneous load); phrase hypotheses in terms of load components a priori; look further into validating different measures of cognitive load; accompany cognitive load measures with complementary constructs, such as motivation; and explore themes such as collaborative CLT and individual differences in working-memory capacity.  © 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Cognitive load theory; computing education; literature review,Computer programming; Cognitive load theory; Cognitive loads; Computing education; Design influences; Education research; Individual Differences; Literature reviews; Load components; Systematic mapping; Working memory; Computation theory
"Introduction to the Special Issue on Justice-Centered Computing Education, Part 2",2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85161701290&doi=10.1145%2f3530982&partnerID=40&md5=52f8277a08550c9eaa24825d4eeea2f8,"This introduction welcomes readers to the second volume of an ACM TOCE special issue on justice-centered computing education. Here we reflect on the ways both the first volume and this current volume expand our notions of justice. More specifically, the first volume explored topics such as intersectionality, transformational justice, intercultural computing, ethnocomputing, translanguaging, socially responsible computing, and institutional theory. This volume continues the conversation with its focus on decolonization, racial literacy with white computing educators, youth agency and voice in computing and media production, learning pathways focused on justice issues for a rural Mexican American youth, and Universal Design for Learning in CS education. We end with discussing the important issues, topics, and voices that are missing from these two volumes, and potential future directions for dialogue in our community. © 2022 Copyright held by the owner/author(s).",broadening participation; Computer science education; equity; justice-centered computing,Education computing; 'current; Broadening participation; Computer Science Education; Computing education; Computing theory; Equity; Institutional theory; Justice-centered computing; Learning pathway; Media production; Computation theory
A Sociocultural Perspective on Computer Science Capital and Its Pedagogical Implications in Computer Science Education,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146496279&doi=10.1145%2f3487052&partnerID=40&md5=996049f49cd174756122bb44583e5701,"The aim of this conceptual article is to provide a framework and a lens for educators in diversifying and making CS education more inclusive. In this article, we conceptualize the notion of computer science capital (CSC), which extends Bourdieu's sociological theory of capital and Archer et al.'s work on ""science capital.""The CSC concept was developed by contrasting the concept of science capital with a literature review on key factors affecting students' aspirations in CS. We argue that there is a need to distinguish between science capital and CSC, because the types of capital that are considered legitimate vary between the field of natural science and computer science. The CSC concept uses a sociocultural perspective on learning and can be understood as a form of symbolic capital that is influential in facilitating students' possibility to fully participate in, engage with, and form aspirations in CS. The CSC concept consists of three main components, each with associated subcomponents. We believe our CSC framework, along with the self-reflection prompts included in this article, will offer support for reflections for educators in their daily pedagogical work. By taking students' various levels of social and cultural capital into consideration, educators can plan didactic activities with a focus to strengthen students' various types of capital. This includes reflection on how implicit and explicit norms, beliefs, thoughts, expectations, values, and ideas can affect the pedagogical practices and ultimately the students. Only when we are reflective about our teaching practices can we be better positioned to construct a more inclusive teaching and learning environment. © 2022 Association for Computing Machinery.",Bourdieu; Computer science capital; computing capital; inclusive CS education; sociocultural theory; sociology in computing education,Computation theory; Computer aided instruction; Education computing; Engineering education; Bourdieu; Computer science capital; Computer Science Education; Computing capital; Computing education; CS education; Inclusive CS education; Sociocultural theory; Sociological theories; Sociology in computing education; Students
Responsible Computing: A Longitudinal Study of a Peer-led Ethics Learning Framework,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85146430080&doi=10.1145%2f3469130&partnerID=40&md5=ac258d241b31c3d6836a6b07a0a4eb8e,"We studied the impact of introducing first-year computer science (CS) students to ethical thinking about the social justice impacts of data collection, tracking, bias, internet privacy, and competitive ""real world""system design and critique activities. While basic content was consistent for all, one group was involved throughout the course in peer discussions designed to foster greater engagement, with the anticipation that this would enable students to reach new levels of sensitivity through peer-to-peer interaction. This article reports on our observation of this design, interview, and project data collected throughout the course as well interviews conducted eight months later to learn about how students were retaining and applying what they learned. We found that students are sensitive to the technology-related risks and vulnerabilities encountered by individuals based on race, gender, and, to some extent, age, but they struggle to assess who is responsible for these risks, what to do about bias in technology design, and how to mitigate harms for individuals whom they perceive to be vulnerable, furthering the argument for an integrated ethics curriculum. We explore the value of formal peer-led discussion to evolve social justice thinking with a focus on identity, though note that opportunities for any group discussion are meaningful to students' thinking about social justice. Over the longer term, students tend to recall and apply ethics that is closely related to their identity, suggesting that empathy has limits.  © 2022 Association for Computing Machinery.",computer science; Ethics; pedagogy; social justice,Curricula; Data privacy; Education computing; Engineering education; Ethical technology; Risk assessment; Computer science students; Data collection; First year; Internet privacy; Learning frameworks; Longitudinal study; Pedagogy; Peer discussions; Real-world system; Social justice; Students
A Qualitative Study of Emotions Experienced by First-year Engineering Students during Programming Tasks,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85161664796&doi=10.1145%2f3507696&partnerID=40&md5=7d45f51b1a81313e79b4ec58502e9183,"In introductory computer programming courses, students experience a range of emotions. Students often experience anxiety and frustration when they encounter difficulties in writing programs. Continued frustration can discourage students from pursuing engineering and computing careers. Although prior research has shown how emotions affect students' motivation and learning, little is known about students' emotions in programming courses. In this qualitative study of first-year engineering students taking an introductory programming course, we examined the emotions that these students experienced during programming tasks and the reasons for experiencing those emotions. Our study was grounded in the control-value theory of achievement emotions. Each research participant came to two laboratory sessions: a programming session and a retrospective think-aloud interview session. In the programming session, each participant worked individually on programming problems. We collected screen capture, biometrics, and survey responses. In the interview session, each participant watched a video of their actions during the programming session. After every 2 minutes of viewing, the participants reported the emotions that they had experienced during this 2-minute period. We performed a thematic analysis of the interview data. Our results indicate that the participants experienced frustration most frequently. Sometimes they experienced multiple emotions. For example, one participant felt annoyed because she had made a mistake, but she felt joy and pride when she fixed the mistake. To promote student learning, educators should take students' emotions into account in the design of curriculum and pedagogy for introductory programming courses. © 2022 Copyright held by the owner/author(s).",computer programming; control-value theory of achievement emotions; Emotions; engineering,Computation theory; Computer programming; Curricula; Professional aspects; Control values; Control-value theory of achievement emotion; Emotion; First-year engineering; Introductory programming course; Programming tasks; Qualitative study; Student emotions; Student learning; Value theory; Students
Automated Assessment in Computer Science Education: A State-of-the-Art Review,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85134593940&doi=10.1145%2f3513140&partnerID=40&md5=dda8d6981b024cdbc124ef6bc059a719,"Practical programming competencies are critical to the success in computer science (CS) education and go-to-market of fresh graduates. Acquiring the required level of skills is a long journey of discovery, trial and error, and optimization seeking through a broad range of programming activities that learners must perform themselves. It is not reasonable to consider that teachers could evaluate all attempts that the average learner should develop multiplied by the number of students enrolled in a course, much less in a timely, deep, and fair fashion. Unsurprisingly, exploring the formal structure of programs to automate the assessment of certain features has long been a hot topic among CS education practitioners. Assessing a program is considerably more complex than asserting its functional correctness, as the proliferation of tools and techniques in the literature over the past decades indicates. Program efficiency, behavior, and readability, among many other features, assessed either statically or dynamically, are now also relevant for automatic evaluation. The outcome of an evaluation evolved from the primordial Boolean values to information about errors and tips on how to advance, possibly taking into account similar solutions. This work surveys the state of the art in the automated assessment of CS assignments, focusing on the supported types of exercises, security measures adopted, testing techniques used, type of feedback produced, and the information they offer the teacher to understand and optimize learning. A new era of automated assessment, capitalizing on static analysis techniques and containerization, has been identified. Furthermore, this review presents several other findings from the conducted review, discusses the current challenges of the field, and proposes some future research directions. © 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Automated assessment; computer science; feedback; learning analytics; programming,Automation; Education computing; Engineering education; Automated assessment; Computer Science Education; Learning analytic; Long journey; Optimisations; Programming; State-of-the art reviews; Success in Computer Science; Teachers'; Trial and error; Static analysis
Adaptive Assessment and Content Recommendation in Online Programming Courses: On the Use of Elo-rating,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85138288093&doi=10.1145%2f3511886&partnerID=40&md5=bef30a1051008a71f92798e3915d39e7,"Online learning systems should support students preparedness for professional practice by equipping them with the necessary skills while keeping them engaged and active. In that regard, the development of online learning systems that support students' development and engagement with programming is a challenging process. Early career computer science professionals are required not only to understand and master numerous programming concepts but also to efficiently learn how to apply them in different contexts. A prerequisite for an effective and engaging learning process is the existence of adaptive and flexible learning environments that are beneficial for both students and teachers. Students can benefit from personalized content adapted to their individual goals, knowledge, and needs; while teachers can be relieved from the pressure to uniformly and promptly evaluate hundreds of student assignments. This study proposes and puts into practice a method for evaluating learning content difficulty and students' knowledge proficiency utilizing a modified Elo-rating method. The proposed method effectively pairs learning content difficulty with students' proficiency, and creates personalized recommendations based on the generated ratings. The method was implemented in a programming tutoring system and tested with interactive learning content for object oriented-programming. By collecting quantitative and qualitative data from students who used the system for one semester, the findings reveal that the proposed method can generate recommendations that are relevant to students and has the potential to assist teachers in grading students by providing a more holistic understanding of their progress over time. © 2022 Association for Computing Machinery.",E-learning; intelligent tutoring systems; personalisation; programming; ranking students,Computer aided instruction; Curricula; E-learning; Education computing; Grading; Learning systems; Object oriented programming; Online systems; Teaching; E - learning; Elo ratings; Intelligent tutoring; Intelligent tutoring system; Learning contents; Personalizations; Programming; Ranking student; Teachers'; Tutoring system; Students
Equity-based CS Case Study: An Approach to Exploring White Teachers' Conceptions of Race and Racism in a Professional Development Setting,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85161631364&doi=10.1145%2f3487332&partnerID=40&md5=386cfc668cd67a3ed64e82a4e9c3054e,"Here, we present the results of a study of in-service teachers' responses to equity-based case study vignettes focused on racialized classroom incidents. This study was conducted in the context of an ongoing research practice partnership aimed at integrating computer science concepts in elementary grades. Our work took place in a public school district that enrolls primarily students of color, while largely employing White teachers and administrators. Using a racial literacy framework [Guinier 2004], we conceptualized a continuum and developed codes to analyze teachers' responses from racially liberal to racially literate. Our results describe a range of positions across the continuum, including those consistent with the racial liberalism viewpoint that expresses individualistic views of meritocracy and colorblindness that sometimes supports a deficit view of students, those that reside in the middle who validate equity work through minimal acknowledgment yet find ways to resist further engagement with race or equity, and those who express views consistent with racial literacy practices including student-centered perspectives, asset-orientations, and the willingness to engage race directly. Further, our results indicate that teachers may express contradictory views or views across the continuum. These findings point to the developmental nature of racial literacy and the difficulty of unlearning racist mindsets. We discuss the efficacy of our case study design: anonymized, locally derived vignettes, and our case study learning activity design: written reflections, small group dialogues, and whole group share-outs in supporting teacher reflection and learning. Finally, we demonstrate the special leadership role of teachers who are moving toward racial literacy. © 2022 Association for Computing Machinery.",Equity; K12 CS for All; race; teacher professional development,Case-studies; Equity; K12 CS for all; Professional development; Public school districts; Race; Student-centred; Teacher professional development; Teachers conception; Teachers'; Students
Educating Students about Programming Plagiarism and Collusion via Formative Feedback,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148644184&doi=10.1145%2f3506717&partnerID=40&md5=134dcaf0d7dea6bb3681394357e79116,"To help address programming plagiarism and collusion, students should be informed about acceptable practices and about program similarity, both coincidental and non-coincidental. However, current approaches are usually manual, brief, and delivered well before students are in a situation where they might commit academic misconduct. This article presents an assessment submission system with automated, personalized, and timely formative feedback that can be used in institutions that apply some leniency in early instances of plagiarism and collusion. If a student's submission shares coincidental or non-coincidental similarity with other submissions, then personalized similarity reports are generated for the involved submissions and the students are expected to explain the similarity and resubmit the work. Otherwise, a report simulating similarities is sent just to the author of the submitted program to enhance their knowledge. Results from two quasi-experiments involving two academic semesters suggest that students with our approach are more aware of programming plagiarism and collusion, including the futility of some program disguises. Further, their submitted programs have lower similarity even at the level of program flow, suggesting that they are less likely to have engaged in programming plagiarism and collusion. Student behavior while using the system is also analyzed based on the statistics of the generated reports and student justifications for the reported similarities. © 2022 Association for Computing Machinery.",code similarity; collusion; computing education; Formative feedback; plagiarism; programming,Education computing; Intellectual property; 'current; Academic misconducts; Code similarities; Collusion; Computing education; Formative feedbacks; Plagiarism; Program similarity; Programming; Quasi-experiments; Students
How do Computer Science Students Make Decisions in Ethical Situations? Implications for Teaching Computing Ethics based on a Grounded Theory Study,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85149810076&doi=10.1145%2f3483841&partnerID=40&md5=d0f75ab046fbb6e41057f9b5e6936b70,"The daily influence of new technologies on shaping and reshaping human lives necessitates attention to the ethical development of the future computing workforce. To improve computer science students' ethical decision-making, it is important to know how they make decisions when they face ethical issues. This article contributes to the research and practice of computer ethics education by identifying the factors that influence ethical decision-making of computer science students and providing implications to improve the process. Using a constructivist grounded theory approach, the data from the text of the students' discussion postings on three ethical scenarios in computer science and the follow-up interviews were analyzed. Based on the analysis, relating to real-life stories, thoughtfulness about responsibilities that come from the technical knowledge of developers, showing care for users or others who might be affected, and recognition of fallacies, contributed to better ethical decision-making. On the other hand, falling for fallacies and empathy for developers negatively influenced students' ethical decision-making process. Based on the findings, this study presents a model of factors that influence the ethical decision-making process of computer science students, along with implications for future researchers and computer ethics educators. © 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.",computer science education; computing ethics; Ethical decision-making; ethics education,Computation theory; Decision making; Education computing; Engineering education; Ethical technology; Technology transfer; Computer ethics; Computer Science Education; Computer science students; Computing ethic; Computing workforce; Decision-making process; Ethical decision making; Ethics education; Grounded theory; Human lives; Students
Are They Learning or Playing? Moderator Conditions of Gamification's Success in Programming Classrooms,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85136100069&doi=10.1145%2f3485732&partnerID=40&md5=2ef93902d20fca6d67d4497c00b94695,"Students face several difficulties in introductory programming courses (CS1), often leading to high dropout rates, student demotivation, and lack of interest. The literature has indicated that the adequate use of gamification might improve learning in several domains, including CS1. However, the understanding of which (and how) factors influence gamification's success, especially for CS1 education, is lacking. Thus, there is a clear need to shed light on pre-determinants of gamification's impact. To tackle this gap, we investigate how user and contextual factors influence gamification's effect on CS1 students through a quasi-experimental retrospective study (), based on a between-subject design (conditions: gamified or non-gamified) in terms of final grade (academic achievement) and the number of programming assignments completed in an educational system (i.e., how much they practiced). Then, we evaluate whether and how user and contextual characteristics (e.g., age, gender, major, programming experience, working situation, internet access, and computer access/sharing) moderate that effect. Our findings indicate that gamification amplified to some extent the impact of practicing. Overall, students practicing in the gamified version presented higher academic achievement than those practicing the same amount in the non-gamified version. Intriguingly, those in the gamified version that practiced much more extensively than the average showed lower academic achievements than those who practiced comparable amounts in the non-gamified version. Furthermore, our results reveal gender as the only statistically significant moderator of gamification's effect: in our data, it was positive for females but non-significant for males. These findings suggest which (and how) personal and contextual factors moderate gamification's effects, indicate the need to further understand and examine context's role, and show that gamification must be cautiously designed to prevent students from playing instead of learning. © 2022 Association for Computing Machinery.",context; Gamified learning; gaming the system; moderation; testing effect,Computer programming; Education computing; Learning systems; Moderators; Academic achievements; Condition; Context; Contextual factors; Gamification; Gamified learning; Gaming the system; Introductory programming course; Moderation; Testing effects; Students
Teaching and Learning Domain Modeling through Collaboration Patterns: A Controlled Experiment,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85161696917&doi=10.1145%2f3513139&partnerID=40&md5=640ddc9aa881b5e9727cd675b9e0eda3,"Domain models in software engineering - often represented as class diagrams - depict relevant classes in a given problem domain along with necessary relationships among those classes. These models are important because they establish links between the requirements of a given system under development and the subsequent phases of the systems development life cycle. Although the teaching of basic concepts related to domain modeling takes only about 1 or 2 hours, proper application of these concepts to a given problem situation is difficult for students studying software engineering. Due to their insufficient domain knowledge of the problem situation and modeling experience, they often produce domain models that may not adequately represent necessary elements as part of the domain models. Analysis patterns can help them by encoding expert knowledge and offering guidance in the modeling process. This article reports the findings from a controlled experiment conducted to study the effects of collaboration patterns on the domain modeling process by students. Specifically, the study investigated the differences in students' perceptions of the ease of the domain modeling process and quality of models produced, perceived difficulties, and how collaboration patterns help address domain modeling difficulties and the quality of domain models produced. Findings from this experimental study involving students from a software engineering course indicate that although there is no significant difference in subjects' perceptions between the control and treatment groups, the subjects from the treatment group produced better-quality domain models. Additionally, the qualitative analysis of the feedback collected from the subjects from the control and treatment groups reveals that that having knowledge of patterns is beneficial, as it addresses the difficulties in domain modeling. © 2022 Association for Computing Machinery.",Collaboration patterns; controlled experiment; domain modeling; domain models,Application programs; Domain Knowledge; Life cycle; Quality control; Class diagrams; Collaboration patterns; Control groups; Controlled experiment; Domain model; Modeling process; Problem domain; Teaching and learning; Treatment group; Students
Creativity in CS1: A Literature Review,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127216274&doi=10.1145%2f3459995&partnerID=40&md5=e6cc16dd36dd68b03cf007e07f7e2513,"Computer science is a fast-growing field in today's digitized age, and working in this industry often requires creativity and innovative thought. An issue within computer science education, however, is that large introductory programming courses often involve little opportunity for creative thinking within coursework. The undergraduate introductory programming course (CS1) is notorious for its poor student performance and retention rates across multiple institutions. Integrating opportunities for creative thinking may help combat this issue by adding a personal touch to course content, which could allow beginner CS students to better relate to the abstract world of programming. Research on the role of creativity in computer science education (CSE) is an interesting area with a lot of room for exploration due to the complexity of the phenomenon of creativity as well as the CSE research field being fairly new compared to some other education fields where this topic has been more closely explored.To contribute to this area of research, this article provides a literature review exploring the concept of creativity as relevant to computer science education and CS1 in particular. Based on the review of the literature, we conclude creativity is an essential component to computer science, and the type of creativity that computer science requires is in fact, a teachable skill through the use of various tools and strategies. These strategies include the integration of open-ended assignments, large collaborative projects, learning by teaching, multimedia projects, small creative computational exercises, game development projects, digitally produced art, robotics, digital story-telling, music manipulation, and project-based learning. Research on each of these strategies and their effects on student experiences within CS1 is discussed in this review. Last, six main components of creativity-enhancing activities are identified based on the studies about incorporating creativity into CS1. These components are as follows: Collaboration, Relevance, Autonomy, Ownership, Hands-On Learning, and Visual Feedback. The purpose of this article is to contribute to computer science educators' understanding of how creativity is best understood in the context of computer science education and explore practical applications of creativity theory in CS1 classrooms. This is an important collection of information for restructuring aspects of future introductory programming courses in creative, innovative ways that benefit student learning.  © 2021 held by the owner/author(s). Publication rights licensed to ACM.",Creativity; Literature review,Computer programming; Curricula; Education computing; Engineering education; Software design; Students; Teaching; Visual communication; Computer Science Education; Courseworks; Creative thinking; Creatives; Creativity; Introductory programming course; Literature reviews; Retention rate; Student performance; Student retention; Abstracting
Gender Diversity in Computer Science at a Large Public R1 Research University: Reporting on a Self-study,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127199623&doi=10.1145%2f3471572&partnerID=40&md5=2582bd18d382cbf394353b50e4eb7c4a,"With the number of jobs in computer occupations on the rise, there is a greater need for computer science (CS) graduates than ever. At the same time, most CS departments across the country are only seeing 25-30% of women students in their classes, meaning that we are failing to draw interest from a large portion of the population. In this work, we explore the gender gap in CS at Rutgers University-New Brunswick, a large public R1 research university, using three data sets that span thousands of students across six academic years. Specifically, we combine these data sets to study the gender gaps in four core CS courses and explore the correlation of several factors with retention and the impact of these factors on changes to the gender gap as students proceed through the CS courses toward completing the CS major. For example, we find that a significant percentage of women students taking the introductory CS1 course for majors do not intend to major in CS, which may be a contributing factor to a large increase in the gender gap immediately after CS1. This finding implies that part of the retention task is attracting these women students to further explore the major. Results from our study include both novel findings and findings that are consistent with known challenges for increasing gender diversity in CS. In both cases, we provide extensive quantitative data in support of the findings.  © 2021 Association for Computing Machinery.",CS1; CS2; Gender diversity; Student retention,Education computing; Computer Science course; Contributing factor; Data set; Four-core; Gender diversity; Quantitative data; Research universities; Rutgers University; Science graduates; Student retention; Students
Designing for Student-Directedness: How K-12 Teachers Utilize Peers to Support Projects,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127200079&doi=10.1145%2f3476515&partnerID=40&md5=991730a3c1d9d60f6713fa49c3d754e2,"Student-directed projects-projects in which students have individual control over what they create and how to create it-are a promising practice for supporting the development of conceptual understanding and personal interest in K-12 computer science classrooms. In this article, we explore a central (and perhaps counterintuitive) design principle identified by a group of K-12 computer science teachers who support student-directed projects in their classrooms: in order for students to develop their own ideas and determine how to pursue them, students must have opportunities to engage with other students' work. In this qualitative study, we investigated the instructional practices of 25 K-12 teachers using a series of in-depth, semi-structured interviews to develop understandings of how they used peer work to support student-directed projects in their classrooms. Teachers described supporting their students in navigating three stages of project development: generating ideas, pursuing ideas, and presenting ideas. For each of these three stages, teachers considered multiple factors to encourage engagement with peer work in their classrooms, including the quality and completeness of shared work and the modes of interaction with the work. We discuss how this pedagogical approach offers students new relationships to their own learning, to their peers, and to their teachers and communicates important messages to students about their own competence and agency, potentially contributing to aims within computer science for broadening participation.  © 2021 Association for Computing Machinery.",Instructional strategies; K-12 classrooms; Peers; Student-directed projects,Education computing; Conceptual understanding; Design Principles; Individual control; Instructional strategy; K-12 classroom; K-12 teachers; Peer; Science classroom; Student-directed project; Teachers'; Students
Elementary Computational Thinking Instruction and Assessment: A Learning Trajectory Perspective,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127093754&doi=10.1145%2f3494579&partnerID=40&md5=395327b4019945969b140f6b0a4aa836,"There is little empirical research related to how elementary students develop computational thinking (CT) and how they apply CT in problem-solving. To address this gap in knowledge, this study made use of learning trajectories (LTs; hypothesized learning goals, progressions, and activities) in CT concept areas such as sequence, repetition, conditionals, and decomposition to better understand students' CT. This study implemented eight math-CT integrated lessons aligned to U.S. national mathematics education standards and the LTs with third-and fourth-grade students. This basic interpretive qualitative study aimed at gaining a deeper understanding of elementary students' CT by having students express and articulate their CT in cognitive interviews. Participants' (n = 22) CT articulation was examined using a priori codes translated verbatim from the learning goals in the LTs and was mapped to the learning goals in the LTs. Results revealed a range of students' CT in problem-solving, such as using precise and complete problem-solving instructions, recognizing repeating patterns, and decomposing arithmetic problems. By collecting empirical data on how students expressed and articulated their CT, this study makes theoretical contributions by generating initial empirical evidence to support the hypothesized learning goals and progressions in the LTs. This article also discusses the implications for integrated CT instruction and assessments at the elementary level.  © 2022 Association for Computing Machinery.",Assessment; Computational thinking instruction; Elementary education; Learning trajectory,Decomposition; Trajectories; Assessment; Computational thinking instruction; Computational thinkings; Elementary education; Elementary students; Empirical research; Learning goals; Learning progressions; Learning trajectories; Problem-solving; Students
Shifting Beliefs in Computer Science: Change in CS Student Mindsets,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127178570&doi=10.1145%2f3471574&partnerID=40&md5=598df32feb8c32fcca1645cef34dc7b9,"Two studies investigated change in computer science (CS) students' implicit intelligence beliefs. Across both studies, we found that the strength of incremental and entity beliefs changed across time. In Study 1, we found that incremental beliefs decreased and entity beliefs increased across the semester. Change in implicit intelligence beliefs was similar for students taking introductory and upper-division courses. In Study 2, growth curve analysis revealed a small linear change in incremental beliefs across time but no change in entity beliefs-these trends were similar for students enrolled in introductory and upper-division CS courses. Across both studies, change in implicit intelligence beliefs was not associated with academic achievement in CS. Findings provide preliminary evidence that shifts in implicit intelligence beliefs occur as students progress through the CS curriculum. Finally, findings support that mindset interventions may be more effective if delivered at the beginning of the semester before shifts in beliefs occur.  © 2022 Association for Computing Machinery.",Academic motivation; Implicit intelligence beliefs; Undergraduates,Education computing; Academic achievements; Academic motivations; Across time; Computer Science course; Computer science students; Curve analysis; Growth curves; Implicit intelligence belief; Student progress; Undergraduate; Students
Combining Learning and Engagement Strategies in a Software Testing Learning Environment,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127104234&doi=10.1145%2f3469131&partnerID=40&md5=00bda05488f50a427eaf94a94fb14e01,"There continues to be an increase in enrollments in various computing programs at academic institutions due to many job opportunities available in the information, communication, and technology sectors. This enrollment surge has presented several challenges in many Computer Science (CS), Information Technology (IT), and Software Engineering (SE) programs at universities and colleges. One such challenge is that many instructors in CS/IT/SE programs continue to use learning approaches that are not learner centered and therefore are not adequately preparing students to be proficient in the ever-changing computing industry. To mitigate this challenge, instructors need to use evidence-based pedagogical approaches, e.g., active learning, to improve student learning and engagement in the classroom and equip students with the skills necessary to be lifelong learners.This article presents an approach that combines learning and engagement strategies (LESs) in learning environments using different teaching modalities to improve student learning and engagement. We describe how LESs are integrated into face-to-face (F2F) and online class activities. The LESs currently used are collaborative learning, gamification, problem-based learning, and social interaction. We describe an approach used to quantify each LES used during class activities based on a set of characteristics for LESs and the traditional lecture-style pedagogical approaches. To demonstrate the impact of using LESs in F2F class activities, we report on a study conducted over seven semesters in a software testing class at a large urban minority serving institution. The study uses a posttest-only study design, the scores of two midterm exams, and approximate class times dedicated to each LES and traditional lecture style to quantify their usage in a face-to-face software testing class. The study results showed that increasing the time dedicated to collaborative learning, gamification, and social interaction and decreasing the traditional lecture-style approach resulted in a statistically significant improvement in student learning, as reflected in the exam scores.  © 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Active learning; Gamification; Problem-based learning; Social interaction,Artificial intelligence; Computer aided instruction; Engineering education; Students; Active Learning; Gamification; Learning environments; Lecture style; Pedagogical approach; Problem based learning; Social interactions; Software engineering projects; Software testings; Student learning; Software testing
How Do Educational Experiences Predict Computing Identity?,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127199892&doi=10.1145%2f3470653&partnerID=40&md5=89e7d106f171f5f10fb5a661a4f568f2,"Despite increasing demands for skilled workers within the technological domain, there is still a deficit in the number of graduates in computing fields (computer science, information technology, and computer engineering). Understanding the factors that contribute to students' motivation and persistence is critical to helping educators, administrators, and industry professionals better focus efforts to improve academic outcomes and job placement. This article examines how experiences contribute to a student's computing identity, which we define by their interest, recognition, sense of belonging, and competence/performance beliefs. In particular, we consider groups underrepresented in these disciplines, women and minoritized racial/ethnic groups (Black/African American and Hispanic/Latinx). To delve into these relationships, a survey of more than 1,600 students in computing fields was conducted at three metropolitan public universities in Florida. Regression was used to elucidate which experiences predict computing identity and how social identification (i.e., as female, Black/African American, and/or Hispanic/Latinx) may interact with these experiences. Our results suggest that several types of experiences positively predict a student's computing identity, such as mentoring others, having a job, or having friends in computing. Moreover, certain experiences have a different effect on computing identity for female and Hispanic/Latinx students. More specifically, receiving academic advice from teaching assistants was more positive for female students, receiving advice from industry professionals was more negative for Hispanic/Latinx students, and receiving help on classwork from students in their class was more positive for Hispanic/Latinx students. Other experiences, while having the same effect on computing identity across students, were experienced at significantly different rates by females, Black/African American students, and Hispanic/Latinx students. The findings highlight experiential ways in which computing programs can foster computing identity development, particularly for underrepresented and marginalized groups in computing.  © 2021 held by the owner/author(s). Publication rights licensed to ACM.",Computer engineering education; Computer science education; Computing identity; Educational experiences; Information technology education,Education computing; Engineering education; Forecasting; African American; Computer engineering education; Computer Science Education; Computing identity; Educational experiences; Field computer; Hispanics; Industry professionals; Information technology education; Skilled workers; Students
Through (Tracking) Their Eyes: Abstraction and Complexity in Program Comprehension,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127197118&doi=10.1145%2f3480171&partnerID=40&md5=29e657f874f906f5bd00884e0e55f0d6,"Previous studies on writing and understanding programs presented evidence that programmers beyond a novice stage utilize plans or plan-like structures. Other studies on code composition showed that learners have difficulties with writing, reading, and debugging code where interacting plans are merged into a short piece of code. In this article, we focus on the question of how different code-composition strategies and the familiarity with code affect program comprehension on a more abstract, i.e., algorithmic level. Using an eye-tracking setup, we explored how advanced students comprehend programs and their underlying algorithms written in either a merged or abutted (sequenced) composition of code blocks of varying familiarity. The effects of familiarity and code composition were studied both isolated and in combination. Our analysis of the quantitative data adds to our understanding of the behavior reported in previous studies and the effects of plans and their composition on the programs' difficulty. Using this data along with retrospective interviews, we analyze students' reading patterns and provide support that subjects were able to form mental models of program execution during task performance. Furthermore, our results suggest that subjects are able to retrieve and create schemata when the program is composed of familiar templates, which may improve their performance; we found indicators for a higher element-interactivity for programs with a merged code composition compared to abutted code composition.  © 2021 Copyright held by the owner/author(s).",Eye tracking; Plan-composition Strategies; Plans; Program comprehension; Qualitative content analysis,Abstracting; Codes (symbols); Computer programming; Algorithmic levels; Code blocks; Content analysis; Eye-tracking; Plan; Plan-composition strategy; Program comprehension; Qualitative content analyse; Quantitative data; Reading patterns; Eye tracking
Beyond Programming: A Computer-Based Assessment of Computational Thinking Competency,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127215718&doi=10.1145%2f3486598&partnerID=40&md5=63acab7be38567bd78a980e273e620ed,"Computational Thinking (CT), entailing both domain-general and domain-specific skills, is a competency fundamental to computing education and beyond. However, as a cross-domain competency, appropriate assessment design and method remain equivocal. Indeed, the majority of the existing assessments have a predominant focus on measuring programming proficiency and neglecting other contexts in which CT can also be manifested. To broaden the promotion and practice of CT, it is necessary to integrate diverse problem types and item formats using a competency-based assessment method to measure CT. Taking a psychometric approach, this article evaluates a novel computer-based assessment of CT competency, Computational Thinking Challenge. The assessment was administered to 119 British upper secondary school students (M = 16.11; SD = 1.19) with a range of prior programming experiences. Results from several reliability analyses, a convergent validity analysis, and a Rasch analysis, provided evidence to support the quality of the assessment. Taken together, the study demonstrated the feasibility to expand from traditional assessment methods to integrating multiple contexts, problem types, and item formats in measuring CT competency in a comprehensive manner.  © 2021 Copyright held by the owner/author(s).",Computational thinking competency; Computer-based assessment; Computing education; Problem-solving,Computer programming; E-learning; Quality control; Computational thinking competency; Computational thinkings; Computer-based assessments; Computing education; Cross-domain; Domain specific; Problem-solving; Programming proficiency; School students; Secondary schools; Reliability analysis
Coding with Minecraft: The Development of Middle School Students' Computational Thinking,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127117445&doi=10.1145%2f3471573&partnerID=40&md5=481b2b3aa378e01d1266daacd1c540d4,"The purpose of this study is to examine the role of Minecraft-based coding activities on computational thinking (CT) of middle school students. In the study, CT was conceptualized so that it encapsulates not only the knowledge of computational concepts (e.g., loops and conditionals) but also the use of CT practices (e.g., testing and debugging). Data were collected using a combination of knowledge of computational concepts tests, the Minecraft-based coding artifacts, and one-on-one student interviews focusing on the processes of developing computational artifacts. The participants were 20 fifth-grade middle school students from a low-income public school with very limited (if none) formal computer programming experiences before the study. The Minecraft-based coding activities were designed and implemented as an instructional program to last 6 weeks. The results of the study showed a statistically significant increase in students' knowledge of computational concepts. Based on the analysis of the students' final coding artifacts, we identified that students mostly used the concepts of sequences, events, loops, and parallelism correctly, whereas variables, operators, and conditionals appeared to be the least successfully used concepts. The qualitative analysis of the artifact-based interviews showed that students employed the CT practices of testing and debugging most of the time while developing an artifact through coding. In contrast, the least resorted CT practice appeared to be reusing and remixing.  © 2022 Association for Computing Machinery.",Coding; Computational thinking practices; Knowledge of computational concepts; Low-income; Middle school; Minecraft,Computer programming; Education computing; Coding; Coding artefacts; Computational thinking practice; Computational thinkings; Knowledge of computational concept; Low incomes; Middle school; Middle school students; Minecraft; Testing and debugging; Students
"Can Computing Be Diversified on ""principles"" Alone? Exploring the Role of AP Computer Science Courses in Students' Major and Career Intentions",2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127112733&doi=10.1145%2f3479431&partnerID=40&md5=b600166644acb5c63b5f95706630c995,"The Advanced Placement Computer Science Principles (APCSP) course was introduced in 2016 to address long-standing gender and racial/ethnic disparities in the United States among students taking Advanced Placement Computer Science (APCS) in high school, as well as among those who pursued computing majors in college. Although APCSP has drawn a more diverse population of course takers than the traditional Advanced Placement Computer Science A (APCSA) course, questions remain about whether the new course portends students' longer-term interest in computing and technology. This study used data from more than 120,000 first-year college students in the United States to understand the relationship between taking APCSA, APCSP, or both APCS courses and students' aspirations to major in computing or to pursue a computing or technology career. Our results indicated that taking APCSA or taking both APCS courses positively predicted students' major or career aspirations in computing and technology, but that taking only APCSP did not predict long-term computing interest (although positive associations were identified for women). The findings identify a possible tension in the function of APCSP, as it appears to broaden access to computing knowledge, but may not necessarily encourage longer-term computing aspirations for all groups of underrepresented students.  © 2022 Copyright held by the owner/author(s).",AP Computer Science A course/exam; AP Computer Science Principles course/exam; Gender and race/ethnicity,Education computing; Engineering education; Advanced Placement Computer Science; AP computer science A course/exam; AP computer science principle course/exam; Career intentions; Computer Science course; Computing majors; First year; Gender and race/ethnicity; Higher School; Long-term interests; Students
Toward a Framework for Teaching Artificial Intelligence to a Higher Education Audience,2022,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85127170244&doi=10.1145%2f3485062&partnerID=40&md5=458c822cc4c17114fbb627bccbd085b6,"Artificial Intelligence and its sub-disciplines are becoming increasingly relevant in numerous areas of academia as well as industry and can now be considered a core area of Computer Science [84]. The Higher Education sector are offering more courses in Machine Learning and Artificial Intelligence than ever before. However, there is a lack of research pertaining to best practices for teaching in this complex domain that heavily relies on both computing and mathematical knowledge. We conducted a literature review and qualitative study with students and Higher Education lecturers from a range of educational institutions, with an aim to determine what might constitute best practices in this area in Higher Education. We hypothesised that confidence, mathematics anxiety, and differences in student educational background were key factors here. We then investigated the issues surrounding these and whether they inhibit the acquisition of knowledge and skills pertaining to the theoretical basis of artificial intelligence and machine learning. This article shares the insights from both students and lecturers with experience in the field of AI and machine learning education, with the aim to inform prospective pedagogies and studies within this domain and move toward a framework for best practice in teaching and learning of these topics.  © 2021 Association for Computing Machinery.",Artificial intelligence; Pedagogy; Self-efficacy,Education computing; Machine learning; Teaching; Best practices; Complex domains; Core area; Education sectors; High educations; Machine-learning; Mathematical knowledge; Pedagogy; Self efficacy; Sub-disciplines; Students
Intercultural Computing Education: Toward Justice across Difference,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121144357&doi=10.1145%2f3458037&partnerID=40&md5=7335e128bbaaee671a26dcb8dd832d29,"Even in the turn toward justice-oriented pedagogy, computing education tends to overlook the quality of intergroup relationships, which risks entrenching division. In this article, we establish an intercultural approach to computing education, informed by intercultural and peace education, prejudice reduction, and the sociology of racism and ethnicity. We outline three major concerns of intercultural computing: shifting from content toward relationships, from cultural responsiveness to cultural reflexivity, and from identity to identification. For the last, we complicate discourses of race and identity widespread in U.S. education. Drawing from studies of youth programming classes in East Africa and U.S. contexts, we then reflect on our attempts to address the first shift of fostering relationships across difference. We highlight three promising design tactics: intergroup pairing, interdependent programming, and making relational goals explicit. Overall, we find that computing can indeed be a site of intergroup bonding across difference, but that bonding can carry complications and tensions with other equity goals and tactics. Rather than framing justice-oriented CS primarily as changes to the aims of computational learning, we argue that future work should explore making relational goals explicit and teach students how to attend to friction.  © 2021 Association for Computing Machinery.",Culture; equity; intercultural education; intergroup contact; race,Computer programming; % reductions; Computing education; Culture; Design tactics; East Africa; Equity; Intercultural education; Intergroup contacts; Programming class; Race; Education computing
Promoting Privacy Considerations in Real-World Projects in Capstone Courses with Ideation Cards,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121142331&doi=10.1145%2f3458038&partnerID=40&md5=a3d1ac68ed22366d6efd8faf32667efb,"Nearly all software built today impinges upon end-user privacy and needs to comply with relevant regulations. Therefore, there have been increasing calls for integrating considerations of compliance with privacy regulations throughout the software engineering lifecycle. However, software engineers are typically trained in the technical fields and lack sufficient knowledge and support for sociotechnical considerations of privacy. Privacy ideation cards attempt to address this issue by making privacy compliance understandable and actionable for software developers. However, the application of privacy ideation cards in real-world software projects has not yet been systemically investigated. The effectiveness of ideation cards as a pedagogical tool has not yet been examined either. We address these gaps by studying how teams of undergraduate students applied privacy ideation cards in capstone projects that involved building real-world software for industry sponsors. We found that privacy ideation cards fostered greater consideration and understanding of the extent to which the projects aligned with privacy regulations. We identified three main themes from student discussions of privacy compliance: (i) defining personal data; (ii) assigning responsibility for privacy compliance; and (iii) determining and exercising autonomy. The results suggest that application of the cards for real-world projects requires careful consideration of intersecting factors such as the stage at which the cards are used and the autonomy available to the developers. Pedagogically, ideation cards can facilitate low-level cognitive engagement (especially the cognitive processes of meaning construction and interpretation) for specific components within a project. Higher-level cognitive processes were comparatively rare in ideation sessions. These findings provide important insight to help enhance capstone instruction and to improve privacy ideation cards to increase their impact on the privacy properties of the developed software.  © 2021 Copyright held by the owner/author(s).",compliance; ideation cards; Privacy; privacy laws; privacy regulation; reflective design; software design,Application programs; Cognitive systems; Curricula; Data privacy; Laws and legislation; Life cycle; Students; Cognitive process; Compliance; Ideation card; Privacy; Privacy compliance; Privacy law; Privacy regulation; Real world projects; Real-world; Reflective designs; Software design
"""Los Programadores Debieron Pensarse Como Dos Veces"": Exploring the Intersections of Language, Power, and Technology with Bi/Multilingual Students",2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121122263&doi=10.1145%2f3447379&partnerID=40&md5=f905b60b8958d3550c0c55d5fe1c0061,"Critical computing approaches to K-12 computer science education aim to promote justice in computing and the wider world. Despite being intertwined with inequitable power dynamics in computing, issues of linguistic (in)justice have received less attention in critical computing. In this article, I draw on theoretical ideas from sociolinguistics and critical computing to analyze qualitative data collected in computing and technology-integrated language and humanities classes serving emergent bi/multilingual middle school students. Conversations about language, technology, and power were close at hand in focal classrooms, and surfaced in moments when students acted as users and critics of, and tinkerers with, digital tools. Students exercised agency in relation to both technology and language-using their budding understandings of language to question digital tools, and their engagements with tools to challenge traditional language ideologies. I build on past scholarship and the findings of this analysis to argue for the development of critical translingual computing education-an approach that would engage especially language-minoritized students in critical computing to build on and affirm their language practices and promote linguistic justice in computer science education, fields, and tools.  © 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Bilingual students; critical computing education; equity; K-12 education; translanguaging,Digital devices; Education computing; Students; Translation (languages); Bilingual student; Bilinguals; Computer Science Education; Computing education; Critical computing education; Digital tools; Equity; K-12 education; Power; Translanguaging; Linguistics
"Black Women Speak: Examining Power, Privilege, and Identity in CS Education",2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121120165&doi=10.1145%2f3451344&partnerID=40&md5=3ed96e8b811bbc6c0e89e232bad3bfc9,"Despite the increasing number of women receiving bachelor's degrees in computing (i.e., Computer Science, Computer Engineering, Information Technology, etc.), a closer look reveals that the percentage of Black women in computing has significantly dropped in recent years, highlighting the underrepresentation of Black women and its negative impact on broadening participation in the field of computing. The literature reveals that several K-16 interventions have been designed to increase the representation of Black women and girls in computing. Despite these best efforts, the needle seems to have barely moved in increasing the representation or the retention of Black women in computing. Instead, the primary goals have been to recruit and retain women in the CS pipeline using gender-focused efforts intended to increase the number of women who also identify as members of racialized groups. However, these gender-focused efforts have fallen short of increasing the number of Black women in computing because they fail to acknowledge or appreciate how intersectionality (the overlapping social constructs of gender, race, ethnicity, class, etc.) has shaped the lived experiences of Black women navigating the computing pipeline. Without honest dialogue about how power operates in the field of computing, the push for racial equality and social justice in CS education remains an elusive goal. Leveraging intersectionality as a critical framework to address systemic oppression (i.e., racism, gender discrimination, power, and privilege), we interview 24 Black women in different phases of the computing pipeline about their experiences navigating the field of computing. An intersectional analysis of Black women's experiences reveals that CS education consists of saturated sites of violence in which interconnected systems of power converge to enact oppression. Findings reveal three primary saturated sites of violence within CS education: (1) traditional K-12 classrooms; (2) predominantly White institutions; and (3) internships as supplementary learning experiences. We conclude the article with implications for how the field of CS education can begin to address racial inequality that negatively impacts Black girls and women, thus contributing to a more equitable and socially just field of study that benefits all students.  © 2021 Copyright held by the owner/author(s).",Black feminism; black women; CS education; intersectionality; racism,Education computing; Engineering education; Professional aspects; Bachelor's degree; Black feminism; Black woman; Computer engineering; CS education; Engineering information; Intersectionality; Power; Racism; Women in computing; Pipelines
Rules of Program Behavior,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121119944&doi=10.1145%2f3469128&partnerID=40&md5=79295672ae37c692e0f546016b19417b,"We propose a framework for identifying, organizing, and communicating learning objectives that involve program semantics. In this framework, detailed learning objectives are written down as rules of program behavior (RPBs). RPBs are teacher-facing statements that describe what needs to be learned about the behavior of a specific sort of programs. Different programming languages, student cohorts, and contexts call for different RPBs. Instructional designers may define progressions of RPB rulesets for different stages of a programming course or curriculum; we identify evaluation criteria for RPBs and discuss tradeoffs in RPB design. As a proof-of-concept example, we present a progression of rulesets designed for teaching beginners how expressions, variables, and functions work in Python. We submit that the RPB framework is valuable to practitioners and researchers as a tool for design and communication. Within computing education research, the framework can inform, among other things, the ongoing exploration of ""notional machines""and the design of assessments and visualizations. The theoretical work that we report here lays a foundation for future empirical research that compares the effectiveness of RPB rulesets as well as different methods for teaching a particular ruleset.  © 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.",instructional design; introductory programming; learning objectives; model of program behavior; notional machines; Programming education; rules of program behavior; semantics,Curricula; Education computing; Python; Teaching; Instructional designs; Introductory programming; Learning objectives; Model of program behavior; Notional machine; Program behavior; Program semantics; Programming education; Rule of program behavior; Semantics
"Introduction to the Special Section on Justice-Centered Computing Education, Part 1",2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121117091&doi=10.1145%2f3477981&partnerID=40&md5=73be414b85ffb9e6a19b21477bd9ebef,"The ideas we offer below for considering justice-centered computing education point to a broad array of problem-spaces, contexts, and communities that scholars, educators, technologists, and activists might engage with. In exploring and deepening the conversation around this project, the seven articles included in the first volume of this special issue employ diverse theoretical perspectives, methodologies, and frameworks, including but not limited to intersectionality, transformational justice, intercultural computing, ethnocomputing, translanguaging, socially responsible computing, and institutional theory. Across them, rather than consensus on a narrow set of issues, we see the possibilities of a pluralistic and wide-ranging conversation about how we might constitute the meanings of ""justice-centered""within computing education, the tools that might be used to produce such meanings, and the actions that might address them.  © 2021 Copyright held by the owner/author(s).",broadening participation; Computer science education; equity; justice-centered computing,Education computing; Broadening participation; Computer Science Education; Computing education; Computing theory; Equity; Institutional theory; Justice-centered computing; Problem space; Special sections; Computation theory
Applying a Transformative Justice Approach to Encourage the Participation of Black and Latina Girls in Computing,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121104840&doi=10.1145%2f3451345&partnerID=40&md5=03f4114a366ecf50b9857f1fee171958,"Global protests and civil unrest in 2020 has renewed the world's interest in addressing injustice due to structural racism and oppression toward Black and Latinx people in all aspects of society, including computing. In this article, we argue that to address and repair the harm created by institutions, policies, and practices that have systematically excluded Black and Latina girls from computer science, an intersectional, transformative justice approach must be taken. Leveraging testimonial authority, we share our past 8 years of experience designing, implementing, and studying Digital Youth Divas, a programmatic and systemic approach to encouraging middle school Black and Latina girls to participate in STEM. Specifically, we propose three principles to counter structural racism and oppression embedded in society and computing education: computing education must (1) address local histories of injustice by engaging community members; (2) counter negative stereotypes perpetuated in computer science by creating inclusive safe spaces and counter-narratives; and (3) build sustainable, computational capacity in communities. To illustrate each principle, we provide specific examples of the harm created by racist policies and systems and their effect on a specific community. We then describe our attempt to create counter structures and the subsequent outcomes for the girls, their families, and the community. This work contributes a framework for STEM and computing educators to integrate transformative justice as a method of repairing the harm that both society and the field of computing has and continues to cause Black and Latinx communities. We charge policy makers, educators, researchers, and community leaders to examine histories of oppression in their communities and to adopt holistic, transformative approaches that counter structural oppression at the individual and system level.  © 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Black; computing; girls; intersectionality; Latina; STEM; transformative justice; women,Engineering education; Repair; Black; Computing; Computing education; Digital youths; Girl; Intersectionality; Latina; STEM; Transformative justice; Woman; Education computing
Counter-hegemonic Computing: Toward Computer Science Education for Value Generation and Emancipation,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121108904&doi=10.1145%2f3449024&partnerID=40&md5=507eac20311649bfaa2a84cf32508cca,"Students' lives, both in and out of school, are full of different forms of value. Wealthy students enjoy value in the form of financial capital; their fit to hegemonic social practices; excellent health care and so on. Low-income students, especially those from African American, Native American, and Latinx communities, often lack access to those resources. But there are other forms of value that low-income students do possess. Most examples of what we will call Counter-Hegemonic Practice (CHP) in the African American community involve some mixture of Indigenous African heritage, contemporary innovation in the Black community, and other influences. Moving between these value forms and the computing classroom is a non-trivial task, especially if we are to avoid merely using the appearance of culture to attract students. Our objective in this paper is to provide a framework for deeper investigations into the computational potentials for CHP; its potential as a link between education and community development; and a more dignified role for its utilization in the CS classroom. We report on a series of collaborative engagements with CHP, largely focused on African American communities.  © 2021 Association for Computing Machinery.",counter-hegemonic; Justice-centered computing; making; music; video games,Computer games; Education computing; African American; Computer Science Education; Counter-hegemonic; Financial capital; Justice-centered computing; Low incomes; Making; Native Americans; Social practices; Video-games; Students
"Student Leadership, Systems Change: Opportunities and Tensions for Youth Impact on District-Wide Computer Science Initiatives",2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121115290&doi=10.1145%2f3461716&partnerID=40&md5=88c6b5e55fcf17c5c15ffcf024d401a9,"Computer Science education (CSed) often aims to position youth as designers, creators, and those with a voice in their world. But do youth have opportunities to design, create, and have voice around the shape of their CSed learning experiences? In this study, we explore ways that school districts engage youth to contribute to the shaping and enactment of their CS instructional systems, efforts districts make to have these leadership roles create impact within these systems, and the tensions associated with these processes. Through in depth analysis of five district case studies, our findings highlight variance around the nature of leadership roles, how access to leadership roles is structured, student autonomy within and ownership over leadership roles, how roles reach into and index differential power over instructional systems, and how district processes of scaffolding and infrastructuring mediate the ultimate impact that students in these roles are able to have on CS instructional systems. Findings also surfaced ways that district actors dealt with a number of tensions associated with student leadership within CS instructional systems. This study provides educators, administrators, and researchers with an expansive view of the potential for students to play legitimate roles within the context of system-wide instructional efforts around CS, and aims to expand conceptions of equitable computer science'-up to this point largely conceived of through the lenses of access to, participation in, and experiences of CS learning-to focus on equity as also being about who has a seat at the table' when it comes to CS.  © 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.",broadening participation; district policy implementation; K-12; leadership; Student leadership,Education computing; Engineering education; Scaffolds; Broadening participation; Computer Science Education; District policy implementation; Instructional system; K-12; Leadership; Learning experiences; Policy implementations; Student leadership; System change; Students
"""What Happens to the Raspado man in a Cash-free Society?"": Teaching and Learning Socially Responsible Computing",2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85121102533&doi=10.1145%2f3453653&partnerID=40&md5=ce590e9a4f1d177accc41a50f22f7b96,"The Computer Science for All movement is bringing CS to K-12 classrooms across the nation. At the same time, new technologies created by computer scientists have been reproducing existing inequities that directly impact today's youth, while being ""promoted and perceived as more objective or progressive than the discriminatory systems of a previous era""[1, p. 5-6]. Current efforts are being made to expose students to the social impact and ethics of computing at both the K-12 and university-level-which we refer to as ""socially responsible computing""(SRC) in this paper. Yet there is a lack of research describing what such SRC teaching and learning actively involve and look like, particularly in K-12 classrooms. This paper fills this gap with findings from a research-practice partnership, through a qualitative study in an Advanced Placement Computer Science Principles classroom enrolling low-income Latino/a/x students from a large urban community. The findings illustrate 1) details of teaching practice and student learning during discussions about SRC; 2) the impact these SRC experiences have on student engagement with CS; 3) a teacher's reflections on key considerations for effective SRC pedagogy; and 4) why students' perspectives and agency must be centered through SRC in computing education.  © 2021 Association for Computing Machinery.",instructional pedagogy; Research-practice partnership; socially responsible computing; student agency,Economic and social effects; Teaching; 'current; Computer scientists; Instructional pedagogy; Qualitative study; Research-practice partnership; Social impact; Socially responsible computing; Student agency; Teaching and learning; University levels; Students
"Characterizing Student Proficiency in Software Modeling in Terms of Functions, Structures, and Behaviors",2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85111152468&doi=10.1145%2f3458039&partnerID=40&md5=68b285af7b35ef240abf5d638063dc0a,"Software modeling is an integral practice for software engineers, especially as the complexity of software solutions increases. Unified Modeling Language (UML) is the industry standard for software modeling. however, it is often used incorrectly and misunderstood by novice software designers. This study is centered around understanding patterns of student proficiency of abstraction and systems thinking within a software modeling context. The participants of this study (n = 97) belonged to a systems analysis and design course that is primarily taken by second-year university students. The exam solutions to a case study from the course were evaluated for modeling proficiency. As evidence of proficiency in abstract thinking and systems thinking, we evaluated UML activity diagrams, class diagrams, and sequence diagrams and the alignment between these representations in terms of functions, structures, and behaviors. The results suggest students being proficient in modeling the functional aspects of an information system while facing some difficulty in capturing the structural and behavioral aspects of an information system. Clustering analysis revealed two groups within the sample, with one group displaying a significantly higher abstraction and systems thinking ability. Statistically significant correlations were also found between student proficiency of abstraction and their modeling proficiency in terms of functions, structures, and behaviors.  © 2021 Association for Computing Machinery.",Abstract thinking; software modeling; systems analysis and design; systems thinking,Curricula; Information systems; Information use; Management information systems; Students; System theory; Systems analysis; Clustering analysis; Functional aspects; Industry standards; Software designers; Software solution; Systems analysis and design; UML activity diagrams; University students; Unified Modeling Language
"The Impact of Pair Programming on College Students' Interest, Perceptions, and Achievement in Computer Science",2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85122638999&doi=10.1145%2f3440759&partnerID=40&md5=151de1cc5e33e02dd2f2d268eabb3e97,"Active and collaborative learning has shown considerable promise for improving student outcomes and reducing group disparities. As one common form of collaborative learning, pair programming is an adapted work practice implemented widely in higher education computing programs. In the classroom setting, it typically involves two computer science students working together on the same programming assignment. The present study examined a cluster-randomized trial of 1,198 undergraduates in 96 lab sections. Overall, pair programming had no significant effect on students' course performance; subject matter interest; plans for future coursework; or their confidence, comfort, and anxiety with computer science. These findings were consistent across various student characteristics, except that students with favorable pretest scores exhibited negative effects from pair programming. © 2021 Association for Computing Machinery.",collaborative learning; college students; experimental design; Pair programming,Computer programming; Education computing; Engineering education; Active and collaborative learning; Collaborative learning; College students; High educations; Pair-programming; Student achievement; Student outcomes; Student perceptions; Students' interests; Work practices; Students
Exploration of Intersectionality and Computer Science Demographics: Understanding the Historical Context of Shifs in Participation,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107987849&doi=10.1145%2f3445985&partnerID=40&md5=ecf3b1f693c64b3cd4a06680d4ec80e6,"Although computing occupations have some of the greatest projected growth rates, there remains a deficit of graduates in these fields. The struggle to engage enough students to meet demands is particularly pronounced for groups already underrepresented in computing, specifically, individuals that self-identify as a woman, or as Black, Hispanic/Latinx, or Native American. Prior studies have begun to examine issues surrounding engagement and retention, but more understanding is needed to close the gap, and to broaden participation. In this research, we provide quantitative evidence from the Multiple-Institution Database for Investigating Engineering Longitudinal Development-a longitudinal, multi-institutional database to describe participation trends of marginalized groups in computer science. Using descriptive statistics, we present the enrollment and graduation rates for those situated at the intersection of race/ethnicity and gender between 1987 and 2018. In this work, we observed periods of significant flux for Black men and women, and White women in particular, and consistently low participation of Hispanic/Latinx and Native American men and women, and Asian women. To provide framing for the evident peaks and valleys in participation, we applied historical context analysis to describe the political, economic, and social factors and events that may have impacted each group. These results put a spotlight on populations largely overlooked in statistical work and have the potential to inform educators, administrators, and researchers about how enrollments and graduation rates have changed over time in computing fields. In addition, they offer insight into potential causes for the vicissitudes, to encourage more equal access for all students going forward.  © 2021 ACM.",computing demographics; computing history; diversity; ethnicity; gender; historical context analysis; intersectionality; race; Women in computing,Computer programming; Computer science; Access for all; Context analysis; Descriptive statistics; Graduation rates; Hispanics; Native Americans; Social factor; Statistical works; Population statistics
After-Hours Learning: Workshops for Professional Women to Learn Web Development,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108018831&doi=10.1145%2f3446964&partnerID=40&md5=ddf11fcae4222abb43022f4b7f056b6a,"Many initiatives have focused on attracting girls and young women (K-12 or college) to computer science education. However, professional women who never learned to program have been largely ignored, despite the fact that such individuals may have many opportunities to benefit from enhanced skills and attitudes about computer programming. To provide a convenient learning space for this population, we created and evaluated the impacts of a nine-week web development workshop that was carefully designed to be both comfortable and engaging for this population. In this article, we report how the professionals' attitudes and skills grew over the course of the workshop and how they now expect to integrate these skills and attitudes into their everyday lives.  © 2021 ACM.",Adult education; computer science education; novice programmer; web development workshop,Education computing; Software design; Computer Science Education; Web development; Computer programming
Gender Differences in Hackathons as a Non-traditional Educational Experience,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107959541&doi=10.1145%2f3433168&partnerID=40&md5=e9abaa8d71ff9b761e2734816433f187,"Hackathons, the time-bound collaborative project-based computer science competitions increasingly popular with computer science students, are one of the largest-scale innovations in computing education of the past decade. This research examined three hackathons and 46,500 surveys to find that educational benefits were unequal between genders in ways that would especially impact women returning to the workforce.  © 2021 ACM.",computer science education; gender; Hackathons; returning to workforce,Education computing; Collaborative projects; Computer science students; Computing education; Educational benefits; Educational experiences; Gender differences; Non-traditional; Time bound; Engineering education
Arising of Informal Women's Learn-to-code Communities,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107979579&doi=10.1145%2f3433167&partnerID=40&md5=53b4dc672f98c7d310a8e419530d764d,"Female-focused, grassroots communities purporting to help women learn to code are popping up in a variety of settings, indicating the motivation on the part of the participants to evade male-dominated settings while learning. However, little is known about how these groups function as an activity system. With current technology enabling the forming of virtual communities and the meteoric rise in use of the Salesforce CRM (customer relationship management) platform, a group of women have formed a coaching and learning community designed to help women move from Salesforce administrators to software developers through learning to code. We used activity systems analysis (ASA) to investigate this real-world instance of the larger phenomenon using an ethnographic approach. We used ASA to organize and make sense of the data by first creating a table listing the points on the activity system triangle (subject, rules, object, etc.) and filling in the points of the triangle based on the design of the coaching and learning group as described by participants; this gave us a high-level view of the activity system. To understand the subjects' point of view of the system, we then created a new column in the table to fill in themes that emerged from our qualitative data analysis organized by dimension of the activity system. This process enabled us to capture the activity and the voices of participants as well as tensions that had emerged in the system. Findings show a range of outcomes, from participants crediting the group as a kickstart to the journey to successfully landing a job as a developer to members stalling in their progress after involvement. Results also show that purposeful tensions of welcoming novice questions and offering unsolicited verbal encouragement built into the activity system create a welcoming, safe environment for women learning to code.  © 2021 ACM.",activity system; Informal learning; software development; women; workplace,Public relations; Systems analysis; Activity Systems; Current technology; Customer relationship management; Ethnographic approaches; Learning community; Qualitative data analysis; Software developer; Virtual community; Learning systems
Crossing the Bridge to STEM: Retaining Women Students in an Online CS Conversion Program,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107975769&doi=10.1145%2f3440892&partnerID=40&md5=e09a7585cae2049108d90cb64af096a9,"The necessity for a steady STEM workforce has prompted academia to develop strategies to encourage people of diverse backgrounds to enter the STEM fields. A bridge program, also known as a conversion program, offers alternative pathways for individuals who have no prior computing education to receive the education that can help in developing their careers or acquiring a graduate-level degree in the computer science fields. This mixed-methods study consisted of two parts. First, an online post-baccalaureate bridge program was evaluated, with a focus on students' performance. Factors for analysis included gender, prior major, and the length of the program, any or all of which might play a role in students' unsuccessful attempts to complete the program. The results indicated that female students have a higher tendency to not complete the program. However, female students who completed the program and enrolled in a graduate school have as much potential to do well in the MS program as their male cohorts do. The second part of the study comprised a survey of students who completed or did not complete the program and interviews with women students. Grounded in self-determination theory (SDT), the results showed that strategies are needed to enhance women students' perceived competence and relatedness in the program.  © 2021 ACM.",Gender; non-majors; online curriculum initiative; self-determination theory,"Computation theory; Education computing; STEM (science, technology, engineering and mathematics); Computing education; Conversion programs; Female students; Graduate levels; Graduate schools; Mixed method; Perceived competence; Self-determination theories; Students"
Informal Technology Education for Women Transitioning from Incarceration,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107952943&doi=10.1145%2f3425711&partnerID=40&md5=795df3fd193ff0aac3ee4053a2457c46,"As society increasingly relies on digital technologies in many different aspects, those who lack relevant access and skills are lagging increasingly behind. Among the underserved groups disproportionately affected by the digital divide are women who are transitioning from incarceration and seeking to reenter the workforce outside the carceral system (women-in-transition). Women-in-transition rarely have been exposed to sound technology education, as they have generally been isolated from the digital environment while in incarceration. Furthermore, while women have become the fastest-growing segment of the incarcerated population in the United States in recent decades, prison education and reentry programs are still not well adjusted for them. Most programs are mainly designed for the dominant male population. Consequently, women-in-transition face significant post-incarceration challenges in accessing and using relevant digital technologies and thus have added difficulties in entering or reentering the workforce. Against this backdrop, our multi-disciplinary research team has conducted empirical research as part of technology education offered to women-in-transition in the Midwest. In this article, we report results from our interviews with 75 women-in-transition in the Midwest that were conducted to develop a tailored technology education program for the women. More than half of the participants in our study are women of color and face precarious housing and financial situations. Then, we discuss principles that we adopted in developing our education program for the marginalized women and participants' feedback on the program. Our team launched in-person sessions with women-in-reentry at public libraries in February 2020 and had to move the sessions online in March due to COVID-19. Our research-informed educational program is designed primarily to support the women in enhancing their knowledge and comfort with technology and nurturing computational thinking. Our study shows that low self-efficacy and mental health challenges, as well as lack of resources for technology access and use, are some of the major issues that need to be addressed in supporting technology learning among women-in-transition. This research offers scholarly and practical implications for computing education for women-in-transition and other marginalized populations.  © 2021 Owner/Author.",Informal technology education; reentry,Libraries; Personnel; Computational thinkings; Computing education; Digital environment; Digital technologies; Educational program; Multi-disciplinary research; Supporting technology; Technology education; Engineering education
Re-Entering Computing through Emerging Technology: Current State and Special Issue Introduction,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107966264&doi=10.1145%2f3446840&partnerID=40&md5=0ce7e593bb9589ccc197228cb0b649b0,"Recruitment, retention, and graduation of women in the computing disciplines are critical needs in the US. Research suggests that women drop out of academic programs and leave the workforce to care for their immediate or extended families, to address financial setbacks, to meet personal obligations, and to respond to active-duty calls. Returning women remain one of the largest untapped talent pools in the nation to fulfill the growing demand of computing jobs. The special issue of ACM Transactions on Computing Education presents original research results that evaluate educational interventions and new pathways that have positively impacted women’s re-entry into computing education and careers and that appeal to a broad audience interested in exploring, designing, and developing re-entry initiatives related to computing education.",bootcamps; Computing education; formal and informal learning; nontraditional learners; re-entry programs; women in computing,Academic program; Computing disciplines; Computing education; Drop-out; Educational intervention; Emerging technologies; Growing demand; Research results
Coding Boot Camps: Enabling Women to Enter Computing Professions,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85107904413&doi=10.1145%2f3440891&partnerID=40&md5=246f14f0af730b7c295da4e5259e94a4,"College-educated women in the workforce are discovering a latent interest in and aptitude for computing motivated by the prevalence of computing as an integral part of jobs in many fields as well as continued headlines about the number of unfilled, highly paid computing jobs. One of these women's choices for retraining are the so-called coding boot camps that teach programming skills through intensive multi-week courses. This article reports on a qualitative research study focused on the Silicon Valley area of California. We used social cognitive career theory (SCCT) to investigate the larger context surrounding women entering computing professions through boot camp learning sites, including: the environment of a booming technology workforce, boot camps as learning settings, the characteristics of women who attend boot camps, how retraining at a coding boot camp influence women's computing self-efficacy and outcome expectations, and the performance attainments of women at boot camps. Interview data was collected from 14 women who had attended boot camps-first before graduating from the boot camp and again after six months in the workforce. To contextualize the computing ecosystem, we conducted single interviews with 6 boot camp organizers/curriculum developers, 7 industry hiring managers, and 14 university computer science faculty. To provide a contrast with women at boot camps, we interviewed 5 women who majored in computer science at the university and with 17 men who had attended boot camps. Structural data coding and analysis was done focused on the SCCT mechanisms of environment, person inputs, learning experiences, self-efficacy, outcome expectations, and performance attainments. Findings here demonstrate that training at a boot camp can be the catalyst for college-educated women to attain computing jobs and careers, although these entry-level jobs may be a compromise to the goal of a software development job and are unlikely to lead to a job at large, well-known, established technology companies.  © 2021 ACM.",Coding boot camp; qualitative research; women; workplace,Personnel training; Software design; Computing ecosystems; Hiring managers; Learning experiences; Learning settings; Programming skills; Qualitative research; Social cognitive career theory; Technology companies; Computation theory
Gamification and SQL: An Empirical Study on Student Performance in a Database Course,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102981164&doi=10.1145%2f3427597&partnerID=40&md5=8a9d051feb40785f8b01044800f6f996,"Gamification, defined as the integration of game elements into non-gaming environments, is a promising approach to increase student engagement, motivation, and performance in Computer Science and Software Engineering education. This viewpoint encouraged the creation of QueryCompetition, a web system that allows students to practice SQL in a competitive environment. Our goal was to obtain empirical evidence on how gamifying elements, such as challenges, points, and leaderboards, integrated into QueryCompetition, affect student performance, motivation, and user experience. We carried out a quasi-experimental study with two groups in a Database course. One group used a gamified version of QueryCompetition having access to points and leaderboards, while the other used a non-gamified version with no access to the above mentioned elements. Quantitative and qualitative data were collected through tests and a survey. The results showed that there was a statistically significant improvement in student performance in the gamified group as compared to the non-gamified group. In addition, a higher motivation was observed in the gamified group. The empirical evidence presented in this article supports the claim that inclusion of challenges, points, and leaderboards, together with the competitive nature of QueryCompetition, impacts positively on student performance and motivation to practice SQL. © 2020 ACM.",computer science; empirical study; game-related method; Gamification; software engineering; SQL,Computer games; Education computing; Engineering education; Motivation; Software engineering; Students; User experience; Competitive environment; Computer science and software engineerings; Database course; Empirical studies; Game elements; Qualitative data; Student engagement; Student performance; Gamification
Event-driven Programming in Programming Education: A Mapping Review,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102980633&doi=10.1145%2f3423956&partnerID=40&md5=20061a366169741be8ccac874772b1f8,"During the past two decades, event-driven programming (EDP) has emerged as a central and almost ubiquitous concept in modern software development: Graphical user interfaces are self-evident in most mobile and web-based applications, as well as in many embedded systems, and they are most often based on reacting to events. To facilitate both teaching practice and research in programming education, this mapping review seeks to give an overview of the related knowledge that is already available in conference papers and journal articles. Starting from early works of the 1990s, we identified 105 papers that address teaching practices, present learning resources, software tools or libraries to support learning, and empirical studies related to EDP. We summarize the publications, their main content, and findings. While most studies focus on bachelor's level education in universities, there has been substantial work in K-12 level, as well. Few courses address EDP as their main content-rather it is most often integrated with CS1, CS2, or computer graphics courses. The most common programming languages and environments addressed are Java, App Inventor, and Scratch. Moreover, very little of deliberate experimental scientific research has been carried out to explicitly address teaching and learning EDP. Consequently, while so-called experience reports, tool papers, and anecdotal evidence have been published, this theme offers a wide arena for empirical research in the future. At the end of the article, we suggest a number of directions for future research. © 2021 ACM.",computer science education; CS0; CS1; CS1.5; CS2; CS3; event-based; Event-oriented; K-12; programming education,Application programs; Computer graphics; Curricula; Embedded systems; Graphical user interfaces; Mapping; Software design; Teaching; Anecdotal evidences; Empirical research; Event-driven programming; Programming education; Scientific researches; Teaching and learning; Teaching practices; Web-based applications; Computer systems programming
On the Role of Design in K-12 Computing Education,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102982105&doi=10.1145%2f3427594&partnerID=40&md5=b8e9f392d85b24b7fc34eb3e614f75f9,"Design is a distinct discipline with its own practices, tools, professions, and areas of scholarship. However, practitioners from other fields often leverage aspects of design in their own work, leading to subfields like engineering design and architecture design that are neither wholly design nor wholly the intersecting discipline. Similarly, design and computing are known to intersect in educational contexts. Unfortunately, we do not yet have a clear understanding of how to characterize the kinds of design that may accompany computing topics, resulting in challenges to teaching and learning. This gap is particularly prevalent in K-12 computing education, where design is often used to promote student engagement but rarely studied as its own disciplinary phenomenon. Toward the goal of better understanding the nature and role of design in computing education, this article motivates and describes two qualitative, exploratory analyses of how design skills manifest in popular K-12 computing education curricula and activities. We find evidence to suggest two types of design within existing computing education curricula and standards: Nondisciplinary problem-space design, which deals with defining software requirements, and disciplinary program-space design, which deals with choosing how best to meet those requirements. We find that these two types of computing design may exist independently, but they often overlap, creating an intriguing intersection of discipline-specific computing design educational activity. Finally, we discuss the practical implications of proceeding with research and educational practice in light of these results, highlighting the need for further exploration into the unique overlap of design and computing education. © 2020 ACM.",Computing education; design; design education; K-12 education,Computer programming; Computer science; Architecture designs; Computing education; Educational activities; Educational context; Exploratory analysis; K-12 computing education; Software requirements; Teaching and learning; Curricula
A Theory of Robust API Knowledge,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102983170&doi=10.1145%2f3444945&partnerID=40&md5=7a4b71c8892ce530e66e562d17f95a12,"Creating modern software inevitably requires using application programming interfaces (APIs). While software developers can sometimes use APIs by simply copying and pasting code examples, a lack of robust knowledge of how an API works can lead to defects, complicate software maintenance, and limit what someone can express with an API. Prior work has uncovered the many ways that API documentation fails to be helpful, though rarely describes precisely why. We present a theory of robust API knowledge that attempts to explain why, arguing that effective understanding and use of APIs depends on three components of knowledge: (1) the domain concepts the API models along with terminology, (2) the usage patterns of APIs along with rationale, and (3) facts about an API's execution to support reasoning about its runtime behavior. We derive five hypotheses from this theory and present a study to test them. Our study investigated the effect of having access to these components of knowledge, finding that while learners requested these three components of knowledge when they were not available, whether the knowledge helped the learner use or understand the API depended on the tasks and likely the relevance and quality of the specific information provided. The theory and our evidence in support of its claims have implications for what content API documentation, tutorials, and instruction should contain and the importance of giving the right information at the right time, as well as what information API tools should compute, and even how APIs should be designed. Future work is necessary to both further test and refine the theory, as well as exploit its ideas for better instructional design. © 2021 ACM.",API documentation; computing education; Software engineering,Application programs; Domain concepts; Instructional designs; Runtime behaviors; Software developer; Specific information; Three component; Usage patterns; Application programming interfaces (API)
A Script-based Approach for Teaching and Assessing Android Application Development,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102980851&doi=10.1145%2f3427593&partnerID=40&md5=01ee4bc4e600d4417bfc960c6b25e281,"Mobile applications are extremely popular with many higher education institutions offering courses to prepare new developers sought by the software industry. However, teaching and assessing mobile application development poses specific challenges due to the complexity of real-world programming languages and environments. In this work, we present a script-based approach for teaching and assessing Android application development that addresses shortcomings of existing tools that impact negatively on the learning experience. Our evaluation, which covers pedagogical and technical aspects, provides possible evidence that the scripts have been beneficial in helping students to work more efficiently and achieve better results. Additionally, the scripts have been effective in streamlining the grading process and keeping the tutorial material up to date with the evolution of the Android platform. © 2021 ACM.",Android; command-line scripting; mobile application development; semi-automatic grading; teaching and assessment,Application programs; Grading; Mobile computing; Android applications; Android platforms; Higher education institutions; Learning experiences; Mobile application development; Mobile applications; Software industry; Technical aspects; Android (operating system)
High School Calculus and Computer Science Course Taking as Predictors of Success in Introductory College Computer Science,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102983259&doi=10.1145%2f3433169&partnerID=40&md5=3b54ae9958f2712261d09342fc450dc6,"Success in an introductory college computer science (CS) course encourages students to major and pursue careers in computer science and many other STEM fields, whereas weak performance is often a powerful deterrent. This article examines the role of high school course taking (AP, regular, or none) in mathematics and in CS as predictors of later success in college introductory computer science courses, measured by students' final grades. Using a sample of 9,418 students from a stratified random sample of 118 U.S. colleges and universities, we found that the observed advantage of taking AP calculus over taking AP CS, seen in an uncontrolled model, was largely confounded by students' background characteristics. After applying multinomial propensity score weighting, we estimated that the effects of taking AP calculus and AP CS on college CS grades were similar. Interestingly, enrollment in both AP calculus and AP CS did not have any additional positive effect, suggesting that both AP calculus and AP CS strengthened similar skills that are important for long-term CS achievement. Taking regular CS did not have a significant effect; taking regular calculus had a positive effect, about half the size of taking AP calculus or AP CS. Thus, the study showed that simply exposing students to any kind of CS course before college does not appear to be sufficient for improving college CS performance; and that advanced CS and advanced calculus in high school may substitute for each other in the preparation of college CS. © 2020 Owner/Author.",advanced placement Introduction; Computer science education; post-secondary education; secondary education,Calculations; Colleges and universities; Computer Science course; High school; Introductory computer science; Multinomials; Propensity score; STEM fields; Stratified random sample; Students
What Do CS Students Value in Industry Internships?,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102981752&doi=10.1145%2f3427595&partnerID=40&md5=c9a2ab6cbd9df6674e7d7eaed7ac8841,"Summer internships present an opportunity for Computer Science (CS) students to expand and test their skills in ""the real world.""These multi-faceted experiences call on students to use technical tools and critical thinking in collaboration with others to solve problems. There are many opportunities for learning and growth: Which of these do students find most valuable? In this project, we collect and analyze open-ended reflections by undergraduate CS students at the conclusion of a summer internship. We see that students focus on technical skills, expanding professional networks, and the satisfaction of completing a product that will be of use to others. These insights help inform academic programs that support Computer Science students engaging in these internships and strengthen their connection to on-campus education. © 2021 ACM.",computer science identity; Internships; personal and professional skills; professional identity; skills gap,Education computing; Academic program; Computer science students; Critical thinking; Real-world; Technical skills; Technical tools; Students
Extending Computational Thinking into Information and Communication Technology Literacy Measurement,2021,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85102983366&doi=10.1145%2f3427596&partnerID=40&md5=047206cb069b2a88c5acb139d1355368,"As Information and Communication Technology (ICT) literacy education has recently shifted to fostering computing thinking ability as well as ICT use, many countries are conducting research on national curriculum and evaluation. In this study, we measured Korean students' ICT literacy levels by using the national measurement tool that assesses abilities of the IT (Information Technology) area and the CT (Computational Thinking) area. A research team revised an existing ICT literacy assessment tool for the IT test and developed a new CT test environment in which students could perform actual coding through a web-based programming tool such as Scratch. Additionally, after assessing ICT literacy levels, differences in ICT literacy levels by gender and grade were analyzed to provide evidence for national education policies. Approximately 23,000 elementary and middle school students participated in the 2018 national assessment of ICT literacy, accounting for 1% of the national population of students. The findings demonstrated that female students had higher literacy levels in most sub-factors of IT and CT areas. Additionally, in the areas of strengths and weaknesses, the ratio of below-basic achievement among male students was at least two times greater than that of female students. Nonetheless, male students scored higher on CT automation, a coding item that involved problem solving using Scratch. Looking at the difference according to grade level, the level improved as the school year increased in elementary school, but there was no difference in middle school. When analyzing the detailed elements of middle school students, the automation factor of seventh grade students was found to be higher than eighth and ninth grade students. Based on these results, this study discussed some implications for ICT and computing education in elementary and middle schools. © 2021 ACM.",21st century abilities; computational thinking; elementary education; ICT literacy; secondary education,Petroleum reservoir evaluation; Computational thinkings; Computing education; Elementary and middle schools; Information and Communication Technologies; Middle school students; National assessment; National measurements; Web-based programming; Students
Making apps: An approach to recruiting youth to computer science,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097248921&doi=10.1145%2f3425710&partnerID=40&md5=55a70078aa24e36e89a54167e9536a8b,"In response to the need to broaden participation in computer science, we designed a summer camp to teach middle-school-aged youth to code apps with MIT App Inventor. For the past four summers, we have observed significant gains in youth's interest and self-efficacy in computer science, after attending our camps. The majority of these youth, however, were youth from our local community. To provide equal access across the state and secure more diversity, we were interested in examining the effect of the camp on a broader population of youth. Thus, we partnered with an outreach program to reach and test our camps on youth from low-income high-poverty areas in the Intermountain West. During the summer of 2019, we conducted two sets of camps: locally advertised app camps that attracted youth from our local community and a second set of camps as part of a larger outreach program for youth from low-income high-poverty areas. The camps for both populations followed the same design of personnel, camp activities, structure, and curriculum. However, the background of the participants was slightly different. Using survey data, we found that the local sample experienced significant gains in both self-efficacy and interest, while the outreach group only reported significant gains in self-efficacy after attending the camp. However, the qualitative data collected from the outreach participants indicated that they had a positive experience both with the camp and their mentors. In this article, we discuss the camp design and findings in relation to strategies for broadening participation in Computer Science education. © 2020 ACM.",access; diversity; high school youth; interest; Middle school youth; near-peer mentor; self-efficacy,Application programs; Software testing; Broadening participation; Computer Science Education; Local community; Middle school; Outreach programs; Positive experiences; Qualitative data; Self efficacy; Education computing
GPU programming productivity in different abstraction paradigms,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097254529&doi=10.1145%2f3418301&partnerID=40&md5=135628a9816d59d81e9bad147a679a66,"Coprocessor architectures in High Performance Computing are prevalent in today's scientific computing clusters and require specialized knowledge for proper utilization. Various alternative paradigms for parallel and offload computation exist, but little is known about the human factors impacts of using the different paradigms. With computer science student participants from the University of Nevada, Las Vegas with no previous exposure to Graphics Processing Unit programming, our study compared NVIDIA CUDA C/C++ as a control group and the Thrust library. The designers of Thrust claim their higher level of abstraction enhances programmer productivity. The trial was conducted on 91 participants and was administered through our computerized testing platform. Although the study was narrowly focused on the basic steps of an offloaded computation problem and was not intended to be a comprehensive evaluation of the superiority of one approach or the other, we found evidence that although Thrust was designed for ease of use, the abstractions tended to be confusing to students and in several cases diminished productivity. Specifically, abstractions in Thrust for (i) memory allocation through a C++ Standard Template Library-style vector library call, (ii) memory transfers between the host and Graphics Processing Unit coprocessor through an overloaded assignment operator, and (iii) execution of an offloaded routine through a generic transform library call instead of a CUDA kernel routine all performed either equal to or worse than CUDA. © 2020 ACM.",Computer science education; empirical studies; evaluation; GPU programming; human factors evidence; parallel programming; threads,C++ (programming language); Computer graphics; Computer graphics equipment; Memory architecture; Productivity; Program processors; Co-processor architecture; Comprehensive evaluation; Computer science students; Computerized testing; High performance computing; Programmer productivity; Specialized knowledge; Standard template library; Graphics processing unit
"Interactive stitch sampler: A synthesis of a decade of research on using electronic textiles to answer the who, where, how, and what for K-12 computer science education",2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097252551&doi=10.1145%2f3418299&partnerID=40&md5=a4be97c1953d387cfe4fb2d224812a0f,"Electronic textiles, which integrate computation with fabrics through a redesigned interface of microcontrollers, sensors, and actuators, have expanded possibilities not only for engineering, fashion, and human-computer interaction but also for computer science education itself. While individual studies involving electronic textiles have shown promise to diversify participation, raise interest, and deepen learning in computing, especially for female students, we recognized a need to synthesize findings across studies to understand the overall contribution of electronic textiles to computing education. In this article, we report our findings from a meta-synthesis of 64 educational electronic textiles studies to answer the following questions in computing: (1) Did electronic textiles broaden access and participation? (2) How did electronic textiles support learners' interests and sustain participation? (3) What and how did students learn from electronic textile projects? Our meta-synthesis revealed that although electronic textiles successfully broadened access, supported learners' interests, and introduced basic computational concepts to novice learners, questions around equitable participation and deeper disciplinary engagement persist. We discuss directions for future design and research efforts to explore the full potential of e-textiles in computer science education. © 2020 ACM.",diversity; Electronic textiles; novice programming; physical computing systems,E-learning; Education computing; Engineering education; Fabrics; Human computer interaction; Smart textiles; Students; Computer Science Education; Computing education; Female students; Future designs; Meta-synthesis; Research efforts; Electronic document exchange
"""CodePlus""-Measuring short-term efficacy in a non-formal, all-female CS outreach programme",2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097238693&doi=10.1145%2f3411510&partnerID=40&md5=8c39819cac3231834f7b14d502dab555,"The provision of all-female computer science outreach programmes is a common strategy used to foster greater interest in the subject for high school aged girls. Based on key factors that affect girls' interest in computer science (CS), outreach programmes often share much in their approach. Nonetheless, there is criticism from a research perspective concerning how programmes evaluate their efficacy, and how the role of pedagogy is under-explored. This article describes the design of CodePlus, a non-formal CS outreach programme based in an Irish University, Trinity College Dublin, and the methods by which the programme is evaluated. This article aims to contribute to this area by reporting on a social constructivist pedagogical model for all-female CS outreach activities, evaluated with a structured research approach. The results from the large sample size (n=856) are positive, with participants showing statistically significant changes in key attitudinal and intentional variables concerning girls' interest in studying computer science. © 2020 ACM.",CS outreach; gender; Non-formal education,Computer programming; Common strategy; High school; Outreach activity; Pedagogical model; Research approach; Sample sizes; Short term; Trinity College; Computer science
Effect of implementing subgoals in code.org's intro to programming unit in computer science principles,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097217489&doi=10.1145%2f3415594&partnerID=40&md5=5334e04c9a6506dc1228847f0c857e33,"The subgoal learning framework has improved performance for novice programmers in higher education, but it has only started to be applied and studied in K-12 (primary/secondary). Programming education in K-12 is growing, and many international initiatives are attempting to increase participation, including curricular initiatives like Computer Science Principles and non-profit organizations like Code.org. Given that subgoal learning is designed to help students with no prior knowledge, we designed and implemented subgoals in the introduction to programming unit in Code.org's Computer Science Principles course. The redesigned unit includes subgoal-oriented instruction and subgoal-themed pre-written comments that students could add to their programming activities. To evaluate efficacy, we compared behaviors and performance of students who received the redesigned subgoal unit to those receiving the original unit. We found that students who learned with subgoals performed better on problem-solving questions but not knowledge-based questions and wrote more in open-ended response questions, including a practice Performance Task for the AP exam. Moreover, at least one-third of subgoal students continued to use the subgoal comments after the subgoal-oriented instruction had been faded, suggesting that they found them useful. Survey data from the teachers suggested that students who struggled with the concepts found the subgoals most useful. Implications for future designs are discussed. © 2020 ACM.",Code.org; Computer Science Principles; instructional design; K-12; Subgoal learning,Computer programming; Education computing; Knowledge based systems; Nonprofit organization; Curricular initiatives; Implications for futures; Introduction to programming; Non profit organizations; Novice programmer; Open-ended response; Programming activities; Programming education; Students
"Knowledge, Skills, and Abilities for Specialized Curricula in Cyber Defense",2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097218373&doi=10.1145%2f3421254&partnerID=40&md5=acc91a03063f45938b7b52645305ba7a,"More specialized cybersecurity education programs are needed to address workforce needs, but it is unclear which knowledge, skills, and abilities (KSAs) fulfil industry needs. We interviewed 48 professionals within four cyber defense specialty areas: (1) Cyber Network Defense Analysis, (2) Cyber Network Defense Infrastructure Support, (3) Incident Response, and (4) Vulnerability Assessment and Management. The professionals rated a number of specialized KSAs along two dimensions: how important the KSA was to their job and how difficult the KSA was to learn. Overall, communication and other non-technical skills were rated as being very important for all cyber defense jobs. Findings indicated that, for some specialty areas, technical knowledge and skills vary considerably between jobs and so the ability to teach oneself is more valuable than proficiency in any one KSA. Findings may be used to inform the development of general cybersecurity curricula, as well as curricula that focus on Cyber Network Defense Analysis, Cyber Network Defense Infrastructure Support, or Vulnerability Assessment and Management. © 2020 ACM.",curricula development; Cyber-defense; cybersecurity education; NICE cybersecurity workforce framework,Curricula; Cyber security; Cyber-security educations; Incident response; Industry needs; Network defense; Non-technical skills; Two-dimension; Vulnerability assessments; Network security
A Review of Peer Code Review in Higher Education,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092300960&doi=10.1145%2f3403935&partnerID=40&md5=d4df98d280686b52ecf6ae778085f14f,"Peer review is the standard process within academia for maintaining publication quality, but it is also widely employed in other settings, such as education and industry, for improving work quality and for generating actionable feedback to content authors. For example, in the software industry peer review of program source code - or peer code review - is a key technique for detecting bugs and maintaining coding standards. In a programming education context, although peer code review offers potential benefits to both code reviewers and code authors, individuals are typically less experienced, which presents a number of challenges. Some of these challenges are similar to those reported in the educational literature on peer review in other academic disciplines, but reviewing code presents unique difficulties. Better understanding these challenges and the conditions under which code review can be taught and implemented successfully in computer science courses is of value to the computing education community. In this work, we conduct a systematic review of the literature on peer code review in higher education to examine instructor motivations for conducting peer code review activities, how such activities have been implemented in practice, and the primary benefits and difficulties that have been reported. We initially identified 187 potential studies and analyzed 51 empirical studies pertinent to our goals. We report the most commonly cited benefits (e.g., the development of programming-related skills) and barriers (e.g., low student engagement), and we identify a wide variety of tools that have been used to facilitate the peer code review process. While we argue that more empirical work is needed to validate currently reported results related to learning outcomes, there is also a clear need to address the challenges around student motivation, which we believe could be an important avenue for future research.  © 2020 ACM.",code review; higher education; peer code review; Peer review; programming course; systematic literature review; systematic review,Education computing; Motivation; Program debugging; Software engineering; Students; Computer Science course; Computing education; Potential benefits; Program source codes; Programming education; Software industry; Student engagement; Student motivation; Codes (symbols)
Methods in Teaching Computer Networks: A Literature Review,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092310343&doi=10.1145%2f3394963&partnerID=40&md5=0919574df5ee18da6e4c10ad056d668d,"This article provides a survey of methods and paradigms for teaching Computer Networks (CN). Since the theoretical concepts are rather abstract in this subject, and students often find them too technical and difficult to understand, many authors attempt to answer the question on how to improve students' motivation and interest for the complex teaching material of CN. In this work, we follow a rigorous paper collection methodology and extract a large number of previous studies that relate to the stated research questions. Also, we find that there is no review article in the current literature that would provide a clear systematization or a guided study on this topic. Hence, this work provides a literature overview by binding all the previously used methods for teaching CN in one place, and brings contribution by classifying the existing approaches into four basic classes: methods based on using visualization objects such as network simulators, multimedia applications, packet-tracing tools or visual analogies; methods based on using the virtualization techniques; methods precipitating active learning paradigm and methods based on the practical hands-on laboratory exercises. Moreover, the research in this article goes beyond the proposed classification. The classes of methods and tools are compared and contrasted based on the findings from the literature. Methods are evaluated by a detailed cross-comparison based on their advantages, disadvantages and challenges in the perspective of both teachers and students. The review is additionally strengthened by comparing the educational effectiveness of the classified methods. We examine, classify, and contrast the usual approaches used in teaching CN, provide useful insights on how appropriate they are in achieving specific educational goals and determine the future research directions.  © 2020 ACM.",Computer networks; literature survey; network simulators; teaching methods,Computer networks; Educational effectiveness; Future research directions; Hands-on laboratory exercise; Literature overview; Multimedia applications; Teaching computer network; Virtualization Techniques; Visualization objects; Students
Analysis of a Randomized Controlled Trial of Student Performance in Parallel Programming using a New Measurement Technique,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092318105&doi=10.1145%2f3401892&partnerID=40&md5=35619ba88b6460780b3d613e3eade546,"There are many paradigms available to address the unique and complex problems introduced with parallel programming. These complexities have implications for computer science education as ubiquitous multi-core computers drive the need for programmers to understand parallelism. One major obstacle to student learning of parallel programming is that there is very little human factors evidence comparing the different techniques to one another, so there is no clear direction on which techniques should be taught and how. We performed a randomized controlled trial using 88 university-level computer science student participants performing three identical tasks to examine the question of whether or not there are measurable differences in programming performance between two paradigms for concurrent programming: threads compared to process-oriented programming based on Communicating Sequential Processes. We measured both time on task and programming accuracy using an automated token accuracy map (TAM) technique. Our results showed trade-offs between the paradigms using both metrics and the TAMs provided further insight about specific areas of difficulty in comprehension.  © 2020 ACM.",communicating sequential processes; evaluation; human factors evidence; Parallel programming; threads,Economic and social effects; Education computing; Students; Communicating sequential process; Computer Science Education; Computer science students; Concurrent programming; Measurement techniques; Process-oriented programming; Programming performance; Randomized controlled trial; Parallel programming
Elementary Students' Understanding of CS Terms,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092271200&doi=10.1145%2f3386364&partnerID=40&md5=b07f1b86d917953a59ae7c5cd9084d17,"The language and concepts used by curriculum designers are not always interpreted by children as designers intended. This can be problematic when researchers use self-reported survey instruments in concert with curricula, which often rely on the implicit belief that students' understanding aligns with their own. We report on our refinement of a validated survey to measure upper elementary students' attitudes and perspectives about computer science (CS), using an iterative, design-based research approach informed by educational and psychological cognitive interview processes. We interviewed six groups of students over three iterations of the instrument on their understanding of CS concepts and attitudes toward coding. Our findings indicated that students could not explain the terms computer programs nor computer science as expected. Furthermore, they struggled to understand how coding may support their learning in other domains. These results may guide the development of appropriate CS-related survey instruments and curricular materials for K-6 students.  © 2020 ACM.",Cognitive interviewing; computer science; elementary; instrument development,Curricula; Surveys; Curricular materials; Design-based research; Elementary students; Survey instruments; Students
Teacher Perceptions of Equity in High School Computer Science Classrooms,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092302454&doi=10.1145%2f3410633&partnerID=40&md5=1f6f750a3f3e378b8971f9a897012f3c,"Effective and equitable CS teaching is contingent on teachers' robust understanding of equity issues in CS classrooms. To this end, this study examined high school teachers' perceptions of equity during their participation in a CS teacher certificate program over two years. The participants are from various disciplines and from schools that serve under-represented students. Using a qualitative approach, we conducted content analysis of the teachers' written reflections and responses to semi-structured interviews. Based on the justice-centered framework, we analyzed the major themes that emerged from the content analysis. The findings provide insights into high school CS teachers' understanding of equity, the strategies that teachers use to address equity issues, and how teachers interpret the causes of inequities in CS classrooms. This research presents frameworks for examining teachers' conceptualizations of equity and can inform the implementation of future professional development programs for CS teachers.  © 2020 ACM.",Computer science; equity; secondary education; teacher professional development,Computer programming; Certificate programs; Content analysis; High school teachers; Professional development program; Qualitative approach; Science classroom; Semi structured interviews; Under-represented; Computer science
The Effects of Computer Science Stereotypes and Interest on Middle School Boys' Career Intentions,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092320404&doi=10.1145%2f3394964&partnerID=40&md5=4de587e0761f7f406acf0bb6f2ab341a,"Like other STEM fields, computer science (CS) lacks representation of minorities, such as Black and Hispanic individuals, both in the number of bachelor's degrees obtained and the number of individuals in the CS workforce. Out-of-school CS programs are often designed with the intent to inspire young people to pursue careers in CS. Much of this programming focuses on developing student interest in CS and CS careers. Nevertheless, it is not well understood how the stereotypes that children hold about computer scientists contribute to CS interest and career choice. In this study, we set out to examine the complex relationships between CS interest, held stereotypes, and CS career choice. We surveyed participants in an after-school CS program offered to middle school boys who identified with racial and ethnic minority groups (N = 110). We tested three linear regression models and confirmed that CS interest and socially divergent stereotypes - those that diverged from societal norms - of computer scientists play unique and contrary roles in young boys' career decision-making process even when controlling for home and school factors. These models suggest educational CS programs should include curriculum to dispel participants' socially divergent stereotypes about computer scientists rather than targeting CS interest alone, particularly if a goal is to inspire diverse young people to pursue careers in CS.  © 2020 ACM.",Computer science; interest; middle school; stereotypes,Decision making; Regression analysis; Bachelor's degree; Career decision makings; Career intentions; Complex relationships; Computer scientists; Ethnic minorities; Linear regression models; Middle school; Behavioral research
SQL Education: A Systematic Mapping Study and Future Research Agenda,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092274932&doi=10.1145%2f3398377&partnerID=40&md5=8138c5dde2b14a06d727481beae2a5c9,"Structured Query Language (SQL) skills are crucial in software engineering and computer science. However, teaching SQL effectively requires both pedagogical skill and considerable knowledge of the language. Educators and scholars have proposed numerous considerations for the betterment of SQL education, yet these considerations may be too numerous and scattered among different fora for educators to find and internalize, as no systematic mappings or literature reviews regarding SQL education have been conducted. The two main goals of this mapping study are to provide an overview of educational SQL research topics, research types, and publication fora, and to collect and propagate SQL teaching practices for educators to utilize. Additionally, we present a short future research agenda based on insights from the mapping process. We conducted a systematic mapping study complemented by snowballing techniques to identify applicable primary studies. We classified the primary studies according to research type and utilized directed content analysis to classify the primary studies by their topic. Out of our selected 89 primary studies, we identified six recurring topics: (i) student errors in query formulation; (ii) characteristics and presentation of the exercise database; (iii) specific and (iv) non-specific teaching approach suggestions; (v) patterns and visualization; and (vi) easing teacher workload. We list 66 teaching approaches the primary studies argued for (and in some cases against). For researchers, we provide a systematic map of educational SQL research and future research agenda. For educators, we present an aggregated body of knowledge on teaching practices in SQL education over a time frame of 30 years. In conclusion, we suggest that replication studies, studies on advanced SQL concepts, and studies on aspects other than data retrieval are needed to further educational SQL research.  © 2020 ACM.",database; education; query language; Structured Query Language (SQL); student,Facsimile; Query languages; Query processing; Software engineering; Body of knowledge; Engineering and computer science; Literature reviews; Structured query languages; Systematic mapping; Systematic mapping studies; Teaching approaches; Teaching practices; Mapping
High School Teachers' Self-efficacy in Teaching Computer Science,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092298287&doi=10.1145%2f3410631&partnerID=40&md5=c6dc54d66ddd92cb1513422a15827ad2,"Self-efficacy is an important construct for CS teachers' professional development, because it can predict both teaching behaviors as well as student outcomes. Research has shown that teachers' self-efficacy can be as influential as their actual level of knowledge and abilities. However, there has been very limited research on CS teachers' self-efficacy. This study describes the development and implementation of an instrument that measures secondary school teachers' self-efficacy in teaching computer science. Teachers attended a nine-week hybrid professional development program and completed the computer science teaching self-efficacy instrument. Confirmatory factor analysis validated the self-efficacy instrument, which can be potentially used in other CS education settings. The results also indicated that teachers' self-efficacy in the content knowledge and pedagogical content knowledge dimensions of teaching computer science significantly increased from participating in the professional development program.  © 2020 ACM.",computer science education; computer science teacher education; distributed learning environments; secondary education; Self-efficacy,Factor analysis; Professional aspects; Computer science teaching; Confirmatory factor analysis; Content knowledge; High school teachers; Pedagogical content knowledge; Professional development; Professional development program; Secondary schools; Teaching
Understanding the Motivations of Final-year Computing Undergraduates for Considering Accessibility,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085251196&doi=10.1145%2f3381911&partnerID=40&md5=241f34cdeec19a3dad0e743a09fd0162,"We investigate the degree to which undergraduate computing students in a United States university consider accessibility several years after instruction. Prior work has found that cultural and ethical norms become ingrained early in STEM professionals' careers; so, we focus on students approaching graduation and after an internship experience, who are just getting started in their career. In semi-structured interviews, a majority of these final-year computing students (14 of 16) indicated that they were not motivated to improve their skills in accessibility, attributing this to not being required to consider accessibility in subsequent work or classes, not seeing accessibility as an essential skill in their profession, and challenges due to a learn-it-on-your-own approach in computing. Participants suggested instructional methods and topics that they believed would have better prepared them for considering accessibility. A survey of 114 additional final-year students revealed similar themes, including that students did not personally view accessibility training as essential career preparation. Prior research has largely focused on evaluating short-term changes in students' knowledge after an educational intervention. Therefore, by focusing on students several years after an intervention, this work highlights lingering barriers for university programs in promoting accessibility among rising computing professionals. © 2020 ACM.",Accessibility; computing; education; pedagogy,Computer programming; Computer science; Career preparations; Educational intervention; Instructional methods; Semi structured interviews; Short term; University programs; Students
The Association of High School Computer Science Content and Pedagogy with Students' Success in College Computer Science,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085259414&doi=10.1145%2f3381995&partnerID=40&md5=2332d927584bb737d54dbb4bee2f6ab4,"The number of computer science (CS) courses has been dramatically expanding in U.S. high schools (HS). In comparison with well-established courses in mathematics and science, little is known about how the decisions made by HS CS teachers regarding how and what to teach impact student performance later in introductory college CS courses. Drawing on a large sample of 2,871 introductory college CS students at 115 U.S. institutions who had taken a CS course in HS, we examined the topic coverage and prevailing instructional methods in the HS course and investigated how these experiences influenced student performance in college CS. Controlling for differences in student background, we find two predictors of higher grades in college CS: greater frequency of coding-related activities in HS (programming, debugging, studying algorithms) and lower frequency of ""non-coding"" computer use (e.g., data analysis, computer security). Interaction models revealed a more complex story. Coding-related activity more heavily benefited students who did not have coding help available at home. In the 28% of college CS courses in which instructors employed innovative pedagogies, students with higher ACT or SAT mathematics scores had a greater advantage than in traditionally taught courses. Finally, in the innovative college courses, students whose HS CS exams had typically included testing on vocabulary did worse than students whose exams had not included such tests. © 2020 ACM.",computational thinking; curricula; instructional practices; Introductory programming; K-12 education; programming,Computer debugging; Computer programming; Security of data; Teaching; College course; Computer use; High school; Instructional methods; Interaction model; Lower frequencies; Mathematics scores; Student performance; Students
The Impact of Gamification on Learning Outcomes of Computer Science Majors,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085248397&doi=10.1145%2f3383456&partnerID=40&md5=b6f5e8781c28ce329e74c9c7b363bab1,"Gamification is the use of game elements in domains other than games. Gamification use is often suggested for difficult activities because it enhances users' engagement and motivation level. Due to such benefits, the use of gamification is also proposed in education environments to improve students' performance, engagement, and satisfaction. Computer science in higher education is a tough area of study and thus needs to utilize various already explored benefits of gamification. This research develops an empirical study to evaluate the effectiveness of gamification in teaching computer science in higher education. Along with the learning outcomes, the effect of group size on students' satisfaction level is also measured. Furthermore, the impact of gamification over time is analyzed throughout a semester to observe its effectiveness as a long-term learning technique. The analysis, covering both learning outcome and students' satisfaction, suggests that gamification is an effective tool to teach tough courses at higher education level; however, group size should be taken into account for optimal classroom size and better learning experience. © 2020 ACM.",Computer science education; gamification; group size; higher education studies; longitudinal effect,Education computing; Gamification; Effective tool; Empirical studies; Game elements; Higher education; Learning experiences; Learning outcome; Long-term learning; Students' satisfaction; Students
Factors Considered in the Assessment of Computer Science Engineering Capstone Projects and Their Influence on Discrepancies between Assessors,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085240653&doi=10.1145%2f3381836&partnerID=40&md5=d9c41f642dd61b15612aec616a9748ed,"A capstone project is an extensive learning experience traditionally developed during a student's final academic year. Assessing such a complex assignment involves several challenges and is usually based upon the evaluations of at least two different people: the capstone project advisor, and one or more other assessors. Quantitative studies comparing only different assessors' grades and qualitative studies investigating the origin of possible discrepancies have been conducted. In both cases, contradictory conclusions were reached. The objective of this study is to analyze the factors that are given consideration by assessors of engineering capstone projects and the influence of these factors on the discrepancies between different assessors' opinions of the same project. This study quantitatively examined 162 computer science engineering capstone projects developed by one student and supervised by one advisor. Each project was assessed by the project advisor and a committee. For each project, the advisor and the committee were asked to complete an additional questionnaire on product characteristics, student competences, and project supervision. Competences demonstrated by the student were found to be the most relevant element when a capstone project was evaluated by the advisor and the committee; product characteristics were found to be second in influence. Furthermore, advisors grant minor significance to the advisor-involvement component. Discrepancies between grades seem to be associated with those aspects to which one assessor has access, while the other does not, such as student skills demonstrated during project development or their performance in the oral defense. Both the advisor's and the committee's perspectives are important in the assessment of this complex task and they complement one another. © 2020 ACM.",assessment; Capstone project; computer science,Computer programming; Computer science; Computer science engineerings; Engineering capstones; Learning experiences; Product characteristics; Project development; Project supervision; Qualitative study; Quantitative study; Students
The Intersection of Being Black and Being a Woman,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85085249600&doi=10.1145%2f3377426&partnerID=40&md5=5aac17be185ad2d8f692f30496af460d,"Computer science (CS) has been identified as one of the fastest-growing professions, with demand for CS professionals far outpacing the supply of CS graduates. The necessity for a trained CS workforce has compelled industry and academia to evaluate strategies for broadening participation in CS. The current literature in CS education emphasizes the importance of social relationships and supports for individuals from underrepresented groups. Unfortunately, this literature has largely been limited to either the exploration of issues of women or that of underrepresented racial/ethnic groups. These limited views generalize characteristics of specific underrepresented groups without considering intersections between these groups. This quantitative study (n = 3,206) addressed that shortcoming by leveraging inferential statistical methods to examine (i) the similarities and differences between the social CS-related experiences of Black women, Black men, and non-Black women in the United States; (ii) the relationship between these experiences and CS career choices; and (iii) the activities during which significant social experiences might occur. The results indicate that Black women's social experiences are often different from the experiences of both Black men and non-Black women. In particular, both Black men and non-Black women had more CS friends than Black women, whereas having these friends was more significant for the CS career choice for Black women. Introductions to CS in school, before college, were negatively related to career choice for all groups, whereas home support was positive for both Black women and men. This work suggests that considering intersectionality is important to understanding the needs of different individuals, as well as the importance of social supports for persistence in CS. © 2020 ACM.",ethnicity; gender; intersectionality; Race,Computer programming; Broadening participation; CS education; Quantitative study; Social relationships; Social support; Under-represented groups; Computer science
Small but powerful: A learning study to address secondary students' conceptions of everyday computing technology,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079826035&doi=10.1145%2f3377880&partnerID=40&md5=546637a5438a9740e1cfde7c83d5151e,"Enabling students to recognize and evaluate the ubiquitous impact of computing technology on society is an internationally proclaimed goal of a K-12 computing education. To that end, students need to actually engage with their computing knowledge in concrete everyday situations. From the perspectives of learning transfer and variation theory, we conducted three iterations of a classroom intervention and qualitatively analyzed students' learning processes. As a result, we propose a model of four so-called critical aspects of everyday computing technology in that context. We present various classroom situations and learning experiences in relation to those aspects, and discuss what seems to have enabled or prevented meaningful learning. In particular, we found that several students had difficulties in conceiving of computing technology as simultaneously economical and powerful, thus limiting its potential ubiquity. We discuss our findings in the context of contemporary theories of learning transfer and argue that they suggest specific issues that may seriously inhibit students to appropriately engage with their computing knowledge in the context of everyday technologies. © 2020 Association for Computing Machinery.",K-12 computing; Learning study; Naturalistic inquiry; Student conceptions; Transfer of learning,Computation theory; Education computing; Social computing; Students; Ubiquitous computing; Computing technology; K-12 computing education; Learning experiences; Learning studies; Naturalistic inquiry; Student conceptions; Theories of learning; Transfer of learning; Transfer learning
Computational sophistication of games programmed by children: A model for its measurement,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079789403&doi=10.1145%2f3379351&partnerID=40&md5=80b32df55d7a7cab895d0ccd5ed61f14,"This article builds on prior work that aims to measure computational learning (CL) during middle school. Since game computational sophistication (GCS) has been used as a proxy for a student's engagement in CL we build on their model to more completely describe the relationship between different types of building blocks of computer games and GCS. In doing so, we present a single quantitative measurement for GCS. Our model, called GCS 2.0, has face validity for 39 games, each programmed by a pair of middle school children. We choose four of these games, two with high GCS and two with low GCS, and discuss the computational building blocks found in each game. We do this to help the reader better understand our measurement of GCS and its relationship to CL. © 2020 Copyright held by the owner/author(s).",Assessment; Computational learning; Computational sophistication; Computational thinking; Game programming; Measurement; Middle school; Pair programming,Computer programming; Computer science; Measurement; Assessment; Computational learning; Computational sophistication; Computational thinkings; Game Programming; Middle school; Pair-programming; Computer games
An incremental mindset intervention increases effort during programming activities but not performance,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079809613&doi=10.1145%2f3377427&partnerID=40&md5=f9dafd6c01b9079a69e6ccd1fe021aa6,"Learning to program requires perseverance, practice, and the mindset that programming skills are improved through these activities (i.e., that everyone has the potential to become good at programming). In contrast to an entity mindset, individuals with an incremental mindset believe that ability is malleable and can be improved with effort. Prior research shows that an incremental mindset can be promoted through interventions and that, as a result, individuals report increased belief in the value of effort. Although this is encouraging, the majority of research targets a general mindset, and so little work exists exploring the effect of this construct in the programming domain. The present study (N = 47) used a programming activity to test the effect of an incremental mindset intervention on participants' beliefs, effort, programming behaviors, and performance in an experimental study. The intervention was successful. Compared to the control group, the experimental group shifted significantly more toward an incremental mindset, which resulted in beneficial behaviors related to effort, namely higher time on task and more program creation and modification actions. These positive behaviors, however, did not translate to improvements in programming performance. We speculate the reason for this latter finding may be related to the need for additional domain-based support. © 2020 Association for Computing Machinery.",Implicit theories; Incremental and entity mindsets; Programming education,Computer programming; Control groups; Experimental groups; Implicit theories; Incremental and entity mindsets; Programming activities; Programming education; Programming performance; Programming skills; Behavioral research
Teaching abstraction in computer science to 7th grade students,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079395913&doi=10.1145%2f3372143&partnerID=40&md5=5c5cde8871a18a55167db5c668a8e0c9,"Abstraction ion is one of the most fundamental ideas in computer science (CS), and as such, according to Bruner [23], it should be taught spirally, starting as early as possible and revisited at every level of education. However, teaching CS abstraction to novices is a very challenging task, and CS educational research has often demonstrated students' difficulties in learning this idea, in different contexts and at different age levels. The challenge in teaching CS abstraction is even greater when dealing with young students, since according to theories on children's cognitive development, their abstraction abilities may still be not fully developed. In 2013, Armoni [5] introduced a framework for teaching abstraction in the context of algorithmic problem solving, intended for novice students. We studied the effect of this framework in an introductory CS course for 7th graders, in which Scratch was used as the programming language for implementing algorithmic solutions. Our findings indicate that the framework was highly effective for developing CS abstraction skills as well as other related skills and aspects, such as the tendency to provide explanations for solutions, the use of initialization processes, and the perception of the nature of CS. It also significantly improved students' general CS performance in this course. © 2020 Massachussetts Medical Society. All rights reserved.",Abstraction; Algorithmic design; Black box; Introduction to computer science; K12; Scratch,Abstracting; Algorithmic languages; Curricula; Education computing; Teaching; Abstraction; Algorithmic design; Algorithmic problem solving; Algorithmic solutions; Black boxes; Cognitive development; CS educational research; Scratch; Students
Developing a computing identity framework: Understanding computer science and information technology career choice,2020,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079405939&doi=10.1145%2f3365571&partnerID=40&md5=2fcf70d2f136b6d38cc7f681eaf507e0,"This paper expands on knowledge of computing identity by building on what is known about prior identity models in science and mathematics education. The model theorizes three primary sub-constructs that contribute to the development of a computing identity: belief in one's performance/competence, interest, and recognition in computing. Drawing on data from a nationally representative survey of more than 1,700 college students at 22 colleges and universities, the study tested the alignment of the theorized model to the measures on the survey. Confirmatory Factor Analysis was used to validate whether the appropriate measures loaded on the three separate sub-constructs. Criterion-related validity was also established by testing whether the computing identity measures predicted the choice of a computer science career. The results reveal that a computing identity proxy based on the theorized measures was a highly significant predictor of students' computer science and information technology career choice (p < 0.0001). In addition, this work also established criterion-related validity by showing gender differences that had been found by prior work in computing. Finally, the theorized measures were found to be reliable and internally consistent. The educational understanding of computing identities may provide an important tool to help researchers and practitioners improve student persistence in computer science. © 2020 Association for Computing Machinery.",Computer science; Computing identity; STEM career choice,Computer science; Education computing; Factor analysis; Surveys; College students; Colleges and universities; Computing identity; Confirmatory factor analysis; Gender differences; Mathematics education; STEM careers; Student persistences; Students
"The teacher accessibility, equity, and content (TEC) rubric for evaluating computing curricula",2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077744663&doi=10.1145%2f3371155&partnerID=40&md5=eebfafd055c1777adab800d2f94b39b4,"In response to the growing call to bring the powerful ideas of computer science to all learners, education decision makers, including teachers and administrators, are tasked with making consequential decisions on what curricula to use. Often, these decision makers have not been trained in computer science and are unfamiliar with the concepts taught and tools used. This is especially true in K–12 contexts where computer science expertise is less prevalent. To aid in the decision-making process around computing curricula, this article introduces the TEC Rubric. The TEC Rubric is composed of three main categories: Teacher Accessibility, Equity, and Content designed to support educational decision makers and designers when it comes to computing instruction. Along with presenting the full rubric and the process used in its creation, this article describes two examples of the rubric in action. First, the TEC Rubric is used to evaluate two widespread computer science curricula to demonstrate its evaluative capacity highlighting differences between the two curricula. Second, we show how the TEC Rubric can be used to help inform the design of new K–12 computing curricula. Overall, the TEC Rubric is designed to serve as a useful resource in the ongoing quest to bring effective, equitable, and engaging computing instruction into schools around the world. © 2019 Copyright held by the owner/author(s).",Computing curricula; Equity; K–12 education; Rubric,Decision making; Education computing; Computer science curricula; Computing curricula; Decision makers; Decision making process; Educational decision; Equity; Rubric; Curricula
Reusing bugged source code to support novice programmers in debugging tasks,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077756642&doi=10.1145%2f3355616&partnerID=40&md5=1129a4496c0d2e681349a29df725bbfa,"Novice programmers often encounter difficulties performing debugging tasks effectively. Even if modern development environments (IDEs) provide high-level support for navigating through code elements and for identifying the right conditions leading to the bug, debugging still requires considerable human effort. Programmers usually have to make hypotheses that are based on both program state evolution and their past debugging experiences. To mitigate this effort and allow novice programmers to gain debugging experience quickly, we propose an approach based on the reuse of existing bugs of open source systems to provide informed guidance from the failure site to the fault position. The goal is to help novices in reasoning on the most promising paths to follow and conditions to define. We implemented this approach as a tool that exploits the knowledge about fault and bug position in the system, as long as any bug of the system is known. The effectiveness of the proposed approach is validated through a quasi-experiment that qualitatively and quantitatively evaluates how the debugging performances of the students change when they are trained using the tool. © 2019 Copyright held by the owner/author(s).",Code navigation; Debugging; Teaching debugging,Air navigation; Computer debugging; Open source software; Open systems; Code navigation; Fault position; Modern development; Novice programmer; Open source system; Program state; Quasi-experiments; Source codes; Program debugging
Female performance and participation in computer science: A national picture,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85094965298&doi=10.1145%2f3366016&partnerID=40&md5=3ffbd636daca6c5f861ba6e396ec1522,"The change in the English computing curriculum and the shift towards computer science (CS) has been closely observed by other countries. Female participation remains a concern in most jurisdictions, but female attainment in CS is relatively unstudied. Using the English national pupil database, we analyzed all exam results (n = 5,370,064) for students taking secondary school exams in 2016, focusing on those students taking GCSE CS (n = 60,736), contrasting this against ICT (n = 67,359). Combining gender with ethnicity and the IDACI poverty indicator, we find that females from the poorest areas were more likely to take CS than those from the richest areas and that CS was more popular among ethnic minority females than white females. ICT was far more equitable for females and poorer students than CS. CS females typically got better grades than their male peers. However, when controlling for average attainment in other subjects, males got 0.31 of a grade higher. Female relative underperformance in CS was most acute among large female cohorts and with girls studying in mixed-gender schools. Girls did significantly better than boys in English when controlling for CS scores, supporting theories around female relative strengths lying outside STEM subjects. The move to introduce CS into the English curriculum and the removal of the ICT qualifications look to be having a negative impact on female participation and attainment in computing. Using the theory of self-efficacy, we argue that the shift towards CS might decrease the number of girls choosing further computing qualifications or pursuing computing as a career. Computing curriculum designers and teachers need to carefully consider the inclusive nature of their computing courses. © 2019 Copyright held by the owner/author(s).",Self-efficacy; STEM,"Curricula; STEM (science, technology, engineering and mathematics); Students; Computing course; Computing curricula; Ethnic minorities; Relative strength; Secondary schools; Self efficacy; Underperformance; Computation theory"
Plagiarism in programming assessments: A systematic review,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85077738995&doi=10.1145%2f3371156&partnerID=40&md5=015c7578eea7c468f66760f57b4543e9,"This article is a systematic review of work in the computing education literature on plagiarism. The goal of the review is to summarize the main results found in the literature and highlight areas that need further work. Despite the the large body of work on plagiarism, no systematic reviews have been published so far. The reviewed papers were categorized and analyzed using a theoretical framework from the field of Fraud Deterrence named the Fraud Triangle. According to this framework, fraudulent behavior occurs when the person is under pressure, perceives the availability of an opportunity to commit fraud, and rationalizes the fraudulent behavior in a way that makes it seem not unethical to him or her. The review found the largest amount of the reviewed papers to discuss ways for reducing the opportunity to plagiarize, as well as tools for detecting plagiarism. However, there is a clear lack of empirical work evaluating the deterrent efficacy of these strategies and tools. The reviewed papers also included mentions of a wide range of rationalizations used by computing students when justifying plagiarism, the most important of which are rationalizations that stem from confusion about what constitutes plagiarism. Finally, work on the relationship between pressure in computing courses and plagiarism was found to be very scarce and incommensurate with the significant contribution of this factor to plagiarism. © 2019 Association for Computing Machinery.",Academic integrity; Cheating; Introductory programming; Plagiarism,Crime; Academic integrity; Cheating; Computing education; Detecting plagiarism; Introductory programming; Plagiarism; Strategies and tools; Theoretical framework; Intellectual property
Understanding the knowledge gaps of software engineers: An empirical analysis based on SWEBOK,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075591901&doi=10.1145%2f3360497&partnerID=40&md5=32f9efcb6f04b2b06972b1a555252851,"Context: Knowledge level and productivity of the software engineering (SE) workforce are the subject of regular discussions among practitioners, educators, and researchers. There have beenmany efforts tomeasure and improve the knowledge gap between SE education and industrial needs. Objective: Although the existing efforts for aligning SE education and industrial needs have provided valuable insights, there is a need for analyzing the SE topics in a more ""fine-grained"" manner; i.e., knowing that SE university graduates should know more about requirements engineering is important, but it is more valuable to know the exact topics of requirements engineering that are most important in the industry. Method: We achieve the above objective by assessing the knowledge gaps of software engineers by designing and executing an opinion survey on levels of knowledge learned in universities versus skills needed in industry. We designed the survey by using the SE knowledge areas (KAs) from the latest version of the Software Engineering Body of Knowledge (SWEBOK v3), which classifies the SE knowledge into 12 KAs, which are themselves broken down into 67 subareas (sub-KAs) in total. Our analysis is based on (opinion) data gathered from 129 practitioners, who are mostly based in Turkey. Results: Based on our findings, we recommend that educators should include more materials on software maintenance, software configuration management, and testing in their SE curriculum. Based on the literature as well as the current trends in industry, we provide actionable suggestions to improve SE curriculum to decrease the knowledge gap. © 2019 Association for Computing Machinery.",Education research; Empirical study; Knowledge gaps; Opinion survey; Skill gaps; Software engineering education,Curricula; Requirements engineering; Software engineering; Software testing; Surveys; Education research; Empirical studies; Knowledge gaps; Opinion surveys; Skill gaps; Engineering education
"Using informed design in informal computer science programs to increase youths' interest, self-efficacy, and perceptions of parental support",2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074419826&doi=10.1145%2f3319445&partnerID=40&md5=c26861e277e15db03f7c52d54faf1669,"Our work is situated in research on Computer Science (CS) learning in informal learning environments and literature on the factors that influence girls to enter CS. In this article, we outline design choices around the creation of a summer programming camp for middle school youth. In addition, we describe a near-peer mentoring model we used that was influenced by Bandura's self-efficacy theory. The purpose of this article, apart from promoting transparency of program design, was to evaluate the effectiveness of our camp design in terms of increasing youths' interest, self-efficacy beliefs, and perceptions of parental support. We found significant gains for all three of these concepts. Additionally, we make connections between our design choices (e.g., videos, peer support, mentor support) and the affective gains by thematically analyzing interview data concerning the outcomes found in our camps. © 2019 Association for Computing Machinery.",Block-based programming; Informal CS learning environments; Near-peer mentors,Computer programming; Computer science; Block based; Computer science programs; Informal learning environments; Learning environments; Near-peer mentors; Parental supports; Self-efficacy beliefs; Self-efficacy theories; Computer aided instruction
Introduction to the special section: Launching an agenda for research on learning machine learning,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074389104&doi=10.1145%2f3354136&partnerID=40&md5=76dd3d658ef42b3ebc5c594ece492d1b,[No abstract available],,
What is hard about teaching machine learning to non-majors? Insights from classifying instructors' learning goals,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074387842&doi=10.1145%2f3336124&partnerID=40&md5=844d7defcc0068ac1125b22bc3662c3b,"Given its societal impacts and applications to numerous fields, machine learning (ML) is an important topic to understand for many students outside of computer science and statistics. However, machine learning education research is nascent, and research on this subject for non-majors thus far has only focused on curricula and courseware. We interviewed 10 instructors of ML courses for non-majors, inquiring as to what their students find both easy and difficult about machine learning. While ML has a reputation for having algorithms that are difficult to understand, in practice our participating instructors reported that it was not the algorithms that were difficult to teach, but the higher-level design decisions. We found that the learning goals that participants described as hard to teach were consistent with higher levels of the Structure of Observed Learning Outcomes (SOLO) taxonomy, such as making design decisions and comparing/contrasting models. We also found that the learning goals that were described as easy to teach, such as following the steps of particular algorithms, were consistent with the lower levels of the SOLO taxonomy. Realizing that higher-SOLO learning goals are more difficult to teach is useful for informing course design, public outreach, and the design of educational tools for teaching ML. © 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Computer science education; Machine learning,Curricula; Design; Education computing; Learning systems; Machine learning; Students; Taxonomies; Computer Science Education; Design decisions; Education research; Educational tools; Learning outcome; Particular algorithms; Public outreaches; Societal impacts; Teaching
Integrating ethics within machine learning courses,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074423018&doi=10.1145%2f3341164&partnerID=40&md5=2aaa1c9e733911a16fdfbba06a6a0e92,"This article establishes and addresses opportunities for ethics integration into Machine Learning (ML) courses. Following a survey of the history of computing ethics and the current need for ethical consideration within ML, we consider the current state of ML ethics education via an exploratory analysis of course syllabi in computing programs. The results reveal that though ethics is part of the overall educational landscape in these programs, it is not frequently a part of core technical ML courses. To help address this gap, we offer a preliminary framework, developed via a systematic literature review, of relevant ethics questions that should be addressed within an ML project. A pilot study with 85 students confirms that this framework helped them identify and articulate key ethical considerations within their ML projects. Building from this work, we also provide three example ML course modules that bring ethical thinking directly into learning core ML content. Collectively, this research demonstrates: (1) the need for ethics to be taught as integrated within ML coursework, (2) a structured set of questions useful for identifying and addressing potential issues within an ML project, and (3) novel course models that provide examples for how to practically teach ML ethics without sacrificing core course content. An additional by-product of this research is the collection and integration of recent publications in the emerging field of ML ethics education. © 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Education; Ethics; Machine learning,Curricula; Education; Education computing; Learning systems; Machine learning; Computing program; Ethical considerations; Ethics; Ethics education; Exploratory analysis; History of computing; Set of questions; Systematic literature review; Philosophical aspects
Social genesis in computing education,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074426965&doi=10.1145%2f3322211&partnerID=40&md5=b8bbf2a8a12169dc2feea239a5503290,"It is common to think of learning as the acquisition of knowledge by an individual learner. Starting a century ago, Lev Vygotsky developed a different perspective on learning, initiating a tradition of educational research whose momentum and influence continue to grow. One of Vygotsky's key principles is the general genetic law of cultural development that states that whatever skilled cognition that individuals carry out within their own minds is preceded by homologous activity carried out by a social group of which this individual was a part. In linking the individual and society through this law, learning is not simply a matter of the acquisition of domain knowledge. Rather, it is a cyclic process by which a social group, in its functioning through joint activity, leads to individuals taking into themselves (i.e., internalizing) the social forms of activity. In this article, our goal is to explicate Vygotsky's genetic law and demonstrate its utility for yielding novel insight into computing education. We provide an extended illustration of the use of Vygotsky's law in examining a teacher and students in a university setting write code together during a class session. What our analysis reveals is that the teacher and students together enact a sequential, rule-based, and dialogical process of problem decomposition and code writing far different from the plan and schema-based models for programming that have emerged from prior research focused on the individual student and their cognitive strategies and structures. We provide commentary on implications of the genetic law for both research and practice in computing education. © 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Cultural-historical activity theory; Genetic law of cultural development; Programming instruction; Sociocultural learning theory; Vygotsky,Computation theory; Education computing; Genetic algorithms; Genetic programming; Activity Theory; Genetic law of cultural development; Programming instruction; Socio-cultural learning; Vygotsky; Students
A systematic investigation of replications in computing education research,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074441050&doi=10.1145%2f3345328&partnerID=40&md5=93c421935e63d1ba6247a1cdbe4d58b9,"As the societal demands for application and knowledge in computer science (CS) increase, CS student enrollment keeps growing rapidly around the world. By continuously improving the efficacy of computing education and providing guidelines for learning and teaching practice, computing education research plays a vital role in addressing both educational and societal challenges that emerge from the growth of CS students. Given the significant role of computing education research, it is important to ensure the reliability of studies in this field. The extent to which studies can be replicated in a field is one of the most important standards for reliability. Different fields have paid increasing attention to the replication rates of their studies, but the replication rate of computing education was never systematically studied. To fill this gap, this study investigated the replication rate of computing education between 2009 and 2018. We examined 2,269 published studies from three major conferences and two major journals in computing education, and found that the overall replication rate of computing education was 2.38%. This study demonstrated the need for more replication studies in computing education and discussed how to encourage replication studies through research initiatives and policy making. © 2019 Association for Computing Machinery.",Assessment; Computer science education; Computing education; Content analysis; Educational policy; Evaluation; Replication rate; Replications; Research methodology,Education computing; Assessment; Computer Science Education; Computing education; Content analysis; Educational policy; Evaluation; Replications; Research methodologies; Students
Design and evaluation of an “athletic” approach to software engineering education,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074417627&doi=10.1145%2f3344273&partnerID=40&md5=9e22feb85d43af5aa96eeecd67bed397,"Modern web application development provides an attractive application area for introductory software engineering education, as students have direct experience with the domain and it provides them with the potential to gain practical, real-world skills. Achieving this potential requires the development of competency with a multiple component tech stack for web application development, which is challenging to acquire within a single semester. In this research, we designed, implemented, and evaluated a new pedagogy called “athletic software engineering” which is intended to help students efficiently and effectively acquire competency with a multiple component tech stack as a precursor to a web application development project. We evaluated the pedagogy over 4 years and six semesters with 286 students and found strong evidence for its effectiveness. © 2019 Association for Computing Machinery.",Software engineering education,Application programs; Engineering education; Software engineering; Sports; Application area; Design and evaluations; Direct experience; Multiple components; Real-world; Web application development; Students
"Machine learning education for artists, musicians, and other creative practitioners",2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067252796&doi=10.1145%2f3294008&partnerID=40&md5=3d3c39ffe1bcc2478325cb345859f77e,"This article aims to lay a foundation for the research and practice of machine learning education for creative practitioners. It begins by arguing that it is important to teach machine learning to creative practitioners and to conduct research about this teaching, drawing on related work in creative machine learning, creative computing education, and machine learning education. It then draws on research about design processes in engineering and creative practice to motivate a set of learning objectives for students who wish to design new creative artifacts with machine learning. The article then draws on education research and knowledge of creative computing practices to propose a set of teaching strategies that can be used to support creative computing students in achieving these objectives. Explanations of these strategies are accompanied by concrete descriptions of how they have been employed to develop new lectures and activities, and to design new experiential learning and scaffolding technologies, for teaching some of the first courses in the world focused on teaching machine learning to creative practitioners. The article subsequently draws on data collected from these courses-an online course as well as undergraduate and masters-level courses taught at a university-to begin to understand how this curriculum supported student learning, to understand learners' challenges and mistakes, and to inform future teaching and research. © 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Creative computing; Machine learning education; STEAM,Curricula; Engineering research; Machine learning; Scaffolds; Steam; Students; Teaching; Computing education; Creative computing; Education research; Experiential learning; Learning objectives; Student learning; Teaching and researches; Teaching strategy; E-learning
Predicting women's persistence in computer science- And technology-related majors from high school to college,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063919945&doi=10.1145%2f3343195&partnerID=40&md5=ad0bfc05642277b3ff67a694bf6e815c,"While demand for computer science and information technology skills grows, the proportion of women entering computer science (CS) fields has declined. One critical juncture is the transition from high school to college. In our study, we examined factors predicting college persistence in computer science- and technology-related majors from data collected from female high school students. We fielded a survey that asked about students' interest and confidence in computing as well as their intentions to learn programming, game design, or invent new technology. The survey also asked about perceived social support from friends and family for pursuing computing as well as experiences with computing, including the CS Advanced Placement (AP) exam, out-of-school time activities such as clubs, and internships. Multinomial regression was used to predict persistence in computing and tech majors in college. Programming during high school, taking the CS Advanced Placement exam, and participation in the Aspirations awards program were the best predictors of persistence three years after the high school survey in both CS and other technology-related majors. Participation in tech-related work, internships, or after-school programs was negatively associated with persistence, and involvement with computing sub-domains of game design and inventing new applications were not associated with persistence. Our results suggest that efforts to broaden participation in computing should emphasize education in computer programming. © 2019 Association for Computing Machinery.",Broadening participation; Computing; Diversity; Survey research; Women,Application programs; Computer programming; Engineering education; Forecasting; Students; Surveys; Broadening participation; Computing; Diversity; Survey research; Women; Computer games
A new look at novice programmer errors,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85069522328&doi=10.1145%2f3335814&partnerID=40&md5=f78e9ffd5be7549cb63456db3f9ebd91,"The types of programming errors that novice programmers make and struggle to resolve have long been of interest to researchers. Various past studies have analyzed the frequency of compiler diagnostic messages. This information, however, does not have a direct correlation to the types of errors students make, due to the inaccuracy and imprecision of diagnostic messages. Furthermore, few attempts have been made to determine the severity of different kinds of errors in terms other than frequency of occurrence. Previously, we developed a method for meaningful categorization of errors, and produced a frequency distribution of these error categories; in this article, we extend the previous method to also make a determination of error difficulty, in order to give a better measurement of the overall severity of different kinds of errors. An error category hierarchy was developed and validated, and errors in snapshots of students source code were categorized accordingly. The result is a frequency table of logical error categories rather than diagnostic messages. Resolution time for each of the analyzed errors was calculated, and the average resolution time for each category of error was determined; this defines an error difficulty score. The combination of frequency and difficulty allow us to identify the types of error that are most problematic for novice programmers. The results show that ranking errors by severity-a product of frequency and difficulty-yields a significantly different ordering than ranking them by frequency alone, indicating that error frequency by itself may not be a suitable indicator for which errors are actually the most problematic for students. © 2019 Association for Computing Machinery.",Java; Novice programmers; Programming errors,Computer programming; Students; Diagnostic messages; Frequency distributions; Frequency Tables; Java; Logical errors; Novice programmer; Programming errors; Resolution time; Errors
Pedagogy that supports computer science for All,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85069475554&doi=10.1145%2f3322210&partnerID=40&md5=04347f6766fe2815f7274132a1fccbc3,"The Computer Science (CS) for All movement has taken hold of the United States and CS education is rapidly expanding across nations throughout the world. Yet, as curricula and professional development opportunities are developed, key questions remain about what ""works"" for engaging youth in CS education, especially those who are historically underrepresented in the field (including young women, students of color, lowincome students). In response, this study answers the questions: What teaching practices do students-who are historically underrepresented in CS-believe are most effective for engaging their interest in CS learning? What pedagogical actions do CS teachers identify as most effective for engaging students? And what do these engaging teaching practices look like in the classroom? Through a qualitative study following three different urban high school Exploring Computer Science classrooms over an entire school year (n = 70 students, 3 teachers; >105h of observation data; >50 interviews with students and teachers), key pedagogical practices that had greatest impact on youth's interest and engagement with CS included: (1) demystifying CS by showing its connections to everyday life; (2) addressing social issues impacting both CS and students' communities; and (3) valuing students' voices and perspectives. This article shares testimonies from students and teachers, as well as examples of these teaching practices in the classroom. © 2019 Association for Computing Machinery.",CS for All; Engagement; Equity; Pedagogy,Curricula; Education computing; Engagement; Engaging students; Equity; Pedagogical practices; Pedagogy; Professional development opportunities; Qualitative study; Teaching practices; Students
State case study of computing education governance,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85069539025&doi=10.1145%2f3320491&partnerID=40&md5=8a0382f6fd5872bfb19550e780bb1737,"High school computing education reform efforts have been ongoing across the United States, particularly in the past decade. Although national Computer Science (CS) for All initiatives are promising, states retain control over education policies. Recent computing education reform efforts in the state of Maryland (U.S.A.) focused on providing every public high school student with access to high-quality high school computing courses. Such access provides exposure to computing careers and better prepares a diverse pool of students for computing majors in college and the workforce. This comprehensive embedded multi-level case study examines the state's computing education reform efforts from 2010 through 2016. The expansion of computing education indicates that while there was positive growth, the growth was not the same for all categories of public high school students. Top-down policies assist in providing leverage to elevate the need for CS; however, bottom-up efforts to support students and to enable teachers to retain autonomy and professionalism is also needed for CS expansion. Despite successes, barriers at the state, Local Education Agencies (LEA), school, and classroom levels persist and are discussed. The findings in this study can be applied to other states with similar governance structures and policies, and we provide specific recommendations. © 2019 Association for Computing Machinery.",Broadening participation in computing education; Computer science education; Computing education reform; K-12 computing education,Education computing; Expansion; Broadening participation in computing; Computer Science Education; Computing course; Computing education; Education policies; Governance structures; High school students; K-12 computing education; Students
Programming embodied interactions with a remotely controlled educational robot,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85069514580&doi=10.1145%2f3336126&partnerID=40&md5=b4c865fceac6500f014e03f8675e6149,"Contemporary research has explored educational robotics, but it has not examined the development of computational thinking in the context of programming embodied interactions. Apart from the goal of the robot and how the robot will interact with its environment, another important aspect that should be taken into consideration is whether and how the user will physically interact with the robot. We recruited 36 middle school students to participate in a six-session robotics curriculum in an attempt to expand their learning in computational thinking. Participants were asked to develop interfaces for the remote control of a robot using diverse interaction styles from low-level to high-level embodiment, such as touch, speech, and hand and full-body gestures.We measured students' perception of computing, examined their computational practices, and assessed the development of their computational thinking skills by analyzing the sophistication of the projects they created during a problem-solving task.We found that students who programmed combinations of low embodiment interfaces or interfaces with no embodiment produced more sophisticated projects and adopted more sophisticated computational practices compared to those who programmed full-body interfaces. These findings suggest that there might be a tradeoff between the appeal and the cognitive benefit of rich embodied interaction with a remotely controlled robot. In further work, educational robotics research and competitions might be complemented with a hybrid approach that blends the traditional autonomous robot movement with student enactment. © 2019 Association for Computing Machinery.",Assessment; Children; Computational thinking; Educational robotics; Embodied learning; Embodiment; Human- robot interaction,Educational robots; Remote control; Robot programming; Robotics; Students; Assessment; Children; Computational thinkings; Educational robotics; Embodied learning; Embodiment; Human robot interaction
Brains and blocks: Introducing novice programmers to brain-computer interface application development,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85069513598&doi=10.1145%2f3335815&partnerID=40&md5=a1699fb44cb607bdcd4d664d38f7ad2d,"Brain-Computer Interface (BCI) hardware is becoming more affordable and accessible. However, there is limited work investigating ways to design software that broadens participation with BCI technology. In this article, we present a block-based programming environment designed to assist novice programmers with creating BCI applications. We also discuss learning barriers encountered by novice programmers developing neurofeedback applications. Our findings suggest that visual programming assists novice programmers with building basic BCI applications; however, students may experience understanding and learning barriers initially. © 2019 Association for Computing Machinery.",Block-based programming; Brain-computer interface; Neurofeedback,Computer programming; Block based; Brain-computer interface applications; Design softwares; Learning barriers; Neurofeedback; Novice programmer; Programming environment; Visual programming; Brain computer interface
Computer science pedagogical content knowledge: Characterizing teacher performance,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071297706&doi=10.1145%2f3303770&partnerID=40&md5=c9bfbd840e3aa689114231ef604fe3e4,"Computer science education efforts are expanding across the globe to equip students with the necessary computing skills for today's digital world. However, preparing students to become literate in computing activities requires the training of tens of thousands of teachers in computer science. The discrepancy between student needs and teacher preparation in computer science has raised questions of quality teachers, particularly for teachers who do not possess adequate content or pedagogical knowledge to teach computer science efficiently. To address this issue, we designed an instrument to measure knowledge needed to teach computer science (i.e., computer science pedagogical content knowledge). Results exhibited that our instrument measured aspects of teachers' computer science pedagogical content knowledge; however, teachers' prior background in teaching did not influence their performance. We discuss implications for future research and practice. © 2019 Association for Computing Machinery.",Pedagogical content knowledge,Engineering education; Personnel training; Students; Computer Science Education; Computing activity; Computing skills; Digital world; Implications for futures; Pedagogical content knowledge; Pedagogical knowledge; Teacher preparation; Education computing
Learning to get literal: Investigating reference-point difficulties in novice programming,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074813978&doi=10.1145%2f3313291&partnerID=40&md5=06045bd169834c4b3ef933e30a9f81d3,"We investigate conditions in which novices make some reference errors when programming. We asked students fromintroductory programming courses to perform a simple code-writing task that required constructing references to objects and their attributes. By experimentally manipulating the nature of the attributes in the tasks, from identifying attributes (e.g., title or label) to descriptive attributes (e.g., calories or texture), the study revealed the relative frequencies with which students mistakenly omit the name of an identifying attribute while attempting to reference its value. We explain how these reference-point shifts are consistent with the use of metonymy, a form of figurative expression in human communication. Our analysis also reveals how the presentation of examples can affect the construction of the reference in the student's solution. We discuss plausible accounts of the reference-point errors and how they may inform a model of reference construction. We suggest that reference-point errors may be the result of well-practiced habits of communication rather than misconceptions of the task or what the computer can do. © 2019 Association for Computing Machinery.",Humancomputer interaction; Metonymy; Misconceptions; Novice computer programming; Reference errors,Errors; Human computer interaction; Students; Textures; Human communications; Metonymy; Misconceptions; Novice programming; Programming course; Reference points; Reference-point shifts; Relative frequencies; Computer programming
Source-code similarity detection and detection tools used in academia: A systematic review,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072811171&doi=10.1145%2f3313290&partnerID=40&md5=47b1bda4a1b6d69f074c41fa3be7d920,"Teachers deal with plagiarism on a regular basis, so they try to prevent and detect plagiarism, a task that is complicated by the large size of some classes. Students who cheat often try to hide their plagiarism (obfuscate), and many different similarity detection engines (often called plagiarism detection tools) have been built to help teachers. This article focuses only on plagiarism detection and presents a detailed systematic review of the field of source-code plagiarism detection in academia. This review gives an overview of definitions of plagiarism, plagiarism detection tools, comparison metrics, obfuscation methods, datasets used for comparison, and algorithm types. Perspectives on the meaning of source-code plagiarism detection in academia are presented, together with categorisations of the available detection tools and analyses of their effectiveness. While writing the review, some interesting insights have been found about metrics and datasets for quantitative tool comparison and categorisation of detection algorithms. Also, existing obfuscation methods classifications have been expanded together with a new definition of ""source-code plagiarism detection in academia"". © 2019 Copyright held by the owner/author(s).",Academia; Detection; Education; Plagiarism; Programming; Similarity; Source-code; Systematic review,Codes (symbols); Computer programming languages; Education; Error detection; Inspection equipment; Mathematical programming; Academia; Plagiarism; Similarity; Source codes; Systematic Review; Intellectual property
"Incorporating computing professionals' know-how: Differences between assessment by students, academics, and professional experts",2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074834325&doi=10.1145%2f3309157&partnerID=40&md5=920b145c8b596da0875304822a5e1635,"It is important for both computer science academics and students to clearly comprehend the differences between academic and professional perspectives in terms of assessing a deliverable. It is especially interesting to determine whether the aspects deemed important to evaluate by a computer science expert are the same as those established by academics and students. Such potential discrepancies are indicative of the unexpected challenges students may encounter once they graduate and begin working. In this article, we propose a learning activity in which computer science students made a video about their future profession after hearing an expert in the field who discussed about the characteristics and difficulties of his or her work. Academics, professional experts, and students assessed the videos by means of a questionnaire. This article reports a quantitative study of the results of this experience, which was conducted for three academic years. The study involved 63 students, 6 academics, and 4 computing professionals with extensive experience, and 14 videos were evaluated. Professional experts proved to be the most demanding in the assessment, followed by academics. The least demanding group was the students. These differences are more salient if more substantial issues are examined. The experts focused more on aspects of content, whereas the student preferred to concentrate on format. The academics' focus falls between these two extremes. Understanding how experts value knowledge can guide educators in their search for effective learning environments in computing education. © 2019 Association for Computing Machinery.",Academic assessment; Computer science education; Professional expert assessment; Student assessment,Audition; Computer aided instruction; Education computing; Professional aspects; Technology transfer; Academic assessment; Computer Science Education; Computer science students; Computing education; Effective Learning Environment; Expert assessment; Quantitative study; Student assessment; Students
Recurtutor: An interactive tutorial for learning recursion,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061230399&doi=10.1145%2f3218328&partnerID=40&md5=ad2fa18f86713762ed80e35fccd8ca28,"Recursion is one of the most important and hardest topics in lower division computer science courses. As it is an advanced programming skill, the best way to learn it is through targeted practice exercises. But the best practice problems are time consuming to manually grade by an instructor. As a consequence, students historically have completed only a small number of recursion programming exercises as part of their coursework. We present a new way for teaching such programming skills. Students view examples and visualizations, then practice a wide variety of automatically assessed, small-scale programming exercises that address the sub-skills required to learn recursion. The basic recursion tutorial (RecurTutor) teaches material typically encountered in CS2 courses. Students who used RecurTutor had significantly better grades on recursion exam questions than did students who used typical instruction. Students who experienced RecurTutor spent significantly more time on solving recursive programming exercises than students who experienced typical instruction, and came out with a significantly higher confidence level. © 2018 Association for Computing Machinery.",ETextbook; Interactive online tutorial; Misconceptions; Recursion,Teaching; Computer Science course; ETextbook; Interactive online tutorials; Interactive tutorials; Misconceptions; Programming exercise; Recursions; Recursive programming; Students
Learning IS child's play: Game-based learning in computer science education,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061209631&doi=10.1145%2f3282844&partnerID=40&md5=8552d17dbaefd5ceac013f0ea4c97356,"Game-based learning has received significant attention in educational pedagogy as an effective way of increasing student motivation and engagement. The majority of the work in this area has been focused on digital games or games involving technology. We focus on the use of traditional game design in improving student engagement and perception of learning in teaching computer science concepts in higher education. In addition, as part of an interdisciplinary effort, we discuss the interplay between game-based learning in higher education and disciplinary cultures, addressing the lack of empirical evidence on the impact of game design on learning outcomes, engagement, and students' perception of learning. © 2019 Association for Computing Machinery.",Computer science; Disciplinary culture; Game-based learning; Higher education; Student perception; Team work,Computer science; Education computing; Students; Computer Science Education; Educational pedagogy; Game-based Learning; Higher education; Perception of learning; Student motivation; Student perceptions; Team work; Computer games
“How else should it work?” A grounded theory of pre-college students' understanding of computing devices,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061225670&doi=10.1145%2f3226592&partnerID=40&md5=ca233cf3275897ba699bb775805f905a,"In order to understand and evaluate computing technology in their environment, students first need to be able to identify it. This task becomes increasingly difficult, however, as computing systems become more and more ubiquitous and invisible. Based on the analysis of semi-structured focus interviews with 28 German pre-college students, we present a grounded theory of their conceptions and reasoning related to the identification of computing within technical devices. At its core is the finding that many students seemed to differentiate technical artifacts with respect to three conceived levels of capability. Many household appliances, for instance, were very well seen as electronic and programmed, but still as too limited in their capability to warrant the presence of a “real” computer or to be related to informatics. Given the increasing versatility, power, and associated risks of modern embedded systems as well as the advent of the internet of things, this issue should clearly be addressed. Based on our grounded theory, we propose some first ideas for how this might be done. © 2018 Association for Computing Machinery.",Grounded theory; Naturalistic inquiry; Student conceptions; Transfer of learning,Computation theory; Domestic appliances; Embedded systems; Ubiquitous computing; Computing devices; Computing technology; Grounded theory; Modern embedded systems; Naturalistic inquiry; Student conceptions; Technical artifacts; Transfer of learning; Students
Global software engineering education practice continuum special issue of the ACM transactions on computing education,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061239901&doi=10.1145%2f3294011&partnerID=40&md5=a7b26a2d1c8471c11cfb78b9581ec026,"We are pleased to introduce this Special Issue on Global Software Engineering Education published by the ACM Transactions on Computing Education (TOCE) that focuses on educational practices to prepare students for a global workplace. This issue comes at a time when universities are recognizing the need to provide courses that address the challenges of distributed development and presents research that will facilitate course leaders currently running, or embarking on, Global Software Engineering Education (GSE-Ed). © 2018 Copyright held by the owner/author(s).",,Curricula; Engineering education; Computing education; Distributed development; Global software engineering; Global workplaces; Software engineering
Taking a studio course in distributed software engineering from a large local cohort to a small global cohort,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061240456&doi=10.1145%2f3218284&partnerID=40&md5=6312b5f1c78c7ba7739affec3ea8dcb5,"One of the challenges of global software engineering courses is to bring the practices and experience of large geographically distributed teams into the local and time-limited environment of a classroom. Over the last 6 years, an on-campus studio course for software engineering has been developed at the University of Queensland (UQ) that places small teams of students on different features of a common product. This creates two layers of collaboration, as students work within their teams on individual features, and the teams must interoperate with many other teams on the common product. The class uses continuous integration practices and predominantly asynchronous communication channels (Slack and GitHub) to facilitate this collaboration. The original goal of this design was to ensure that students would authentically experience issues associated with realistically sized software projects, and learn to apply appropriate software engineering and collaboration practices to overcome them, in a course without significant extra staffing. Data from the development logs showed that most commits take place outside synchronous class hours, and the project operates as a temporally distributed team even though the students are geographically co-located. Since 2015, a course adapted from this format has also been taught at the University of New England (UNE), an Australian regional university that is also a longstanding provider of distance education. In this course, most students study online, and the class has to be able to work globally, because as well as students taking part from around Australia, there are also typically a small number of students taking part from overseas. Transferring the course to a smaller but predominantly online institution has allowed us to evaluate the distributed nature of the course, by considering what aspects of the course needed to change to support students who are geographically distributed, and comparing how the two cohorts behave. This has produced an overall course design, to teach professional distributed software engineering practices, that is adaptable from large classes to small, and from local to global. © Copyright 2019 held by Owner/Author",Global software engineering; Studio pedagogies,Distance education; Software engineering; Students; Studios; Asynchronous communication; Collaboration practices; Continuous integrations; Distributed software engineering; Geographically distributed teams; Global software engineering; Regional universities; University of Queensland; Curricula
Multiple-choice questions in programming courses: Can we use them and are students motivated by them?,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061232147&doi=10.1145%2f3243137&partnerID=40&md5=2584a89236b930494052a32678d36d41,"Low performance of nontechnical engineering students in programming courses is a problem that remains unsolved. Over the years, many authors have tried to identify the multiple causes for that failure, but there is unanimity on the fact that motivation is a key factor for the acquisition of knowledge by students. To better understand motivation, a new evaluation strategy has been adopted in a second programming course of a nontechnical degree, consisting of 91 students. The goals of the study were to identify if those students felt more motivated to answer multiple-choice questions in comparison to development questions, and what type of question better allows for testing student knowledge acquisition. Possibilities around the motivational qualities of multiple-choice questions in programming courses will be discussed in light of the results. In conclusion, it seems clear that student performance varies according to the type of question. Our study points out that multiple-choice questions can be seen as a motivational factor for engineering students and it might also be a good way to test acquired programming concepts. Therefore, this type of question could be further explored in the evaluation points. © 2018 Association for Computing Machinery.",Evaluation methodologies; Pedagogical issues; Programming; Programming languages; Student's motivation,Computer programming languages; Curricula; Mathematical programming; Motivation; Evaluation methodologies; Evaluation strategies; Key factors; Multiple choice questions; Pedagogical issues; Programming concepts; Programming course; Student performance; Students
Equitable learning environments in K-12 computing: Teachers' views on barriers to diversity,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061216185&doi=10.1145%2f3282939&partnerID=40&md5=bd774cde0ff26af33a467e7483aacc47,"The current efforts to expand computer science (CS) education in K-12 schools, such as the 'CS for All' initiative, highlight the need for all students to get an opportunity to study computing. However, as recent research has shown, diversity in computing at the K-12 level remains problematic, and additional research is needed to look at how computer science learning environments can impact minority student interest and retention in CS. In this article, we report results from an in-depth qualitative study of high school computer science teachers' perspective on barriers to increasing diversity in their classes. Based on teachers' experiences, we provide practical recommendations on how to encourage equitable learning environments in K-12 computer science courses. © 2019 ACM.",Equity; Teachers,Education computing; Computer Science course; Computer science teachers; Equity; Learning environments; Practical recommendation; Qualitative study; Recent researches; Teachers; Computer aided instruction
An empirical investigation on the benefits of gamification in programming courses,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061263318&doi=10.1145%2f3231709&partnerID=40&md5=0becf484e55ae693039d331265c6242c,"Context: Programming courses are compulsory for most engineering degrees, but students' performance on these courses is often not as good as expected. Programming is difficult for students to learn, given that it includes a lot of new, complex, and abstract topics. All of this has led experts to the conclusion that new teaching techniques are required if students are to be motivated and engaged in learning on programming courses. Gamification has come to be an effective technique in education in general, and is especially useful in programming courses. This motivated us to develop an open source gamified platform, called UDPiler, for use in a programming course. Objective: The main goal of this article is to obtain empirical evidence on the improvement of students' learning performance when using UDPiler in comparison to a non-gamified compiler. Method: A quasi-experiment was performed with two groups of first-year engineering students at Diego Portales University in Chile, using a non-gamified compiler and a gamified platform, respectively. Results: The results reveal that the students obtained better marks when the gamified platform was used to learn C programming. In addition, there is statistical significance in favor of there being a positive effect on the learning performance of those students who used the gamified platform. Conclusions: The results allow us to conclude that gamification is an encouraging approach with which to teach C programming, a finding that is aligned with previous empirical studies concerning gamification on programming courses, carried out in academic contexts. Nonetheless, we are aware that further validation is also required to corroborate and strengthen the findings obtained and to investigate whether the kind of gamified elements (mechanics, dynamics, and aesthetics) used have any influence on students' performance, among other issues that deserve further investigation and that are explained throughout this article. © 2018 Association for Computing Machinery.",Gamification; Programming courses; Quasi-experiment; Undergraduate education,Abstracting; Open source software; Program compilers; Students; Teaching; Empirical investigation; First-year engineering; Gamification; Learning performance; Programming course; Quasi-experiments; Statistical significance; Undergraduate education; C (programming language)
Transformative and troublesome? Students' and professional programmers' perspectives on difficult concepts in programming,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061212207&doi=10.1145%2f3283071&partnerID=40&md5=53f18de1e1e8f4fc5fcd08280374e0ae,"Programming skills are an increasingly desirable asset across disciplines; however, learning to program continues to be dificult for many students. To improve pedagogy, we need to better understand the concepts that students find dificult and which have the biggest impact on their learning. Threshold-concept theory provides a potential lens on student learning, focusing on concepts that are troublesome and transformative. However, there is still a lack of consensus as to what the most relevant threshold concepts in programming are. The challenges involved are related to concept granularity and to evidencing some of the properties expected of threshold concepts. In this article, we report on a qualitative study aiming to address some of these concerns. The study involved focus groups with undergraduate students of different-year groups as well as professional software developers so as to gain insights into how perspectives on concepts change over time. Four concepts emerged from the data, where the majority of participants agreed on their troublesome nature-including abstract classes and data structures. Some of these concepts are considered transformative, too, but the evidence base is weaker. However, even though these concepts may not be considered transformative in the ""big"" sense of threshold concept theory, we argue the ""soft"" transformative effect of such concepts means they can provide important guidance for pedagogy and the design of programming courses. Further analysis of the data identified additional concepts that may hinder rather than help the learning of these threshold concepts, which we have called ""accidental complexities."" We conclude the article with a critique of the use of threshold concepts as a lens for studying students' learning of programming. © 2019 Association for Computing Machinery.",Accidental complexities; Computer science curriculum; Focus groups; Learning programming; Threshold concepts,Abstracting; Computer programming; Curricula; Accidental complexities; Computer science curricula; Focus groups; Learning programming; Threshold Concepts; Students
A framework for teaching security design analysis using case studies and the hybrid flipped classroom,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061190102&doi=10.1145%2f3289238&partnerID=40&md5=af0d49f17e7609bf3150ef11856cb966,"With ever-greater reliance of the developed world on information and communication technologies, constructing secure software has become a top priority. To produce secure software, security activities need to be integrated throughout the software development lifecycle. One such activity is security design analysis (SDA), which identifies security requirements as early as the software design phase. While considered an important step in software development, the general opinion of information security subject matter experts and researchers is that SDA is challenging to learn and teach. Experimental evidence provided in literature confirms this claim. To help solve this, we have developed a framework for teaching SDA by utilizing case study analysis and the hybrid flipped classroom approach. We evaluate our framework by performing a comparative analysis between a group of students who attended labs generated using our framework and a group that participated in traditional labs. Our results show that labs created using our framework achieve better learning outcomes for SDA, as opposed to the traditional labs. Secondary contributions of our article include teaching materials, such as lab descriptions and a case study of a hospital information system to be used for SDA. We outline instructions for using our framework in different contexts, including university courses and corporate training programs. By using our proposed teaching framework, with our or any other case study, we believe that both students and employees can learn the craft of SDA more effectively. © 2019 Association for Computing Machinery.",Architectural risk analysis; Cybersecurity education; Risk assessment; Security development lifecycle; Security requirements; Security-oriented curriculum; Threat modeling,Cryptography; Laboratories; Life cycle; Personnel training; Risk analysis; Risk assessment; Security of data; Corporate training programs; Cyber-security educations; Hospital information systems; Information and Communication Technologies; Security development lifecycle; Security requirements; Software development life cycle; Threat modeling; Software design
A robust machine learning technique to predict low-performing students,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061179563&doi=10.1145%2f3277569&partnerID=40&md5=076d8f72d0c73130ade37e4aab81a400,"As enrollments and class sizes in postsecondary institutions have increased, instructors have sought automated and lightweight means to identify students who are at risk of performing poorly in a course. This identification must be performed early enough in the term to allow instructors to assist those students before they fall irreparably behind. This study describes a modeling methodology that predicts student final exam scores in the third week of the term by using the clicker data that is automatically collected for instructors when they employ the Peer Instruction pedagogy. The modeling technique uses a support vector machine binary classifier, trained on one term of a course, to predict outcomes in the subsequent term. We applied this modeling technique to five different courses across the computer science curriculum, taught by three different instructors at two different institutions. Our modeling approach includes a set of strengths not seen wholesale in prior work, while maintaining competitive levels of accuracy with that work. These strengths include using a lightweight source of student data, affording early detection of struggling students, and predicting outcomes across terms in a natural setting (different final exams, minor changes to course content), across multiple courses in a curriculum, and across multiple institutions. © 2019 Association for Computing Machinery.",At-risk students; Clicker data; Cross-term; Machine learning; Multiinstitution; Peer instruction; Prediction,Forecasting; Learning systems; Machine learning; Students; Clicker data; Computer science curricula; Cross-terms; Machine learning techniques; Modeling methodology; Multiinstitution; Peer instruction; Post-secondary institutions; Curricula
The effects of adding non-compulsory exercises to an online learning tool on student performance and code copying,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061177270&doi=10.1145%2f3264507&partnerID=40&md5=ab9e2181344ad523db286c73cb795813,"This study analyzes the impact of adding a review exercises module to an online tool used in a software engineering degree program. The objective of the module is to promote students' self-learning effort to improve their performance. We also intend to determine if this new feature has any effect on the amount of code copies detected in lab sessions when using the same online tool. Two groups of students were compared quantitatively: the first group used the tool exclusively during lab sessions, whereas the second group had the option of employing the tool's new module to enhance their study. The tool allows us to collect interesting data related to the focus of this research: supplementary work completed voluntarily by students and the percentage of students copying others' code during compulsory lab sessions. The results show that the students in the second group achieved better academic results and copied less in lab sessions. In the second group, the students who invested more effort in doing revision exercises and copied less in lab sessions obtained better results; and, interestingly, the effort invested in completing review exercises did not seem to compensate for the learning effort avoided by copying others' exercises during lab sessions. The results show the advantages of a tool used with a dual orientation: compulsory and voluntary. Mandatory usage in lab sessions establishes some milestones that, eventually, act as an incentive fostering learning, while voluntary use reinforces students' perception of the tool's usefulness in terms of learning. © 2019 Association for Computing Machinery.",Academic performance; Code copying; Non-compulsory exercises; Online learning tool,Codes (symbols); Engineering research; Laboratories; Software engineering; Students; Academic performance; Code copying; Engineering degrees; Learning efforts; Non-compulsory exercises; Online learning tools; Self-learning; Student performance; E-learning
Chutes and ladders: Institutional setbacks on the computer science community college transfer pathway,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061198961&doi=10.1145%2f3294009&partnerID=40&md5=d9a2d8060b475cde9de4f82c171b3af4,"Community colleges play a large role in educating students who are historically underrepresented in computer science (CS), including women, Latino men, and Black men, as well as post-traditional (older or working) students. In spite of this, there is a dearth of research on the institutional factors that influence whether or not community college students who are enrolled in CS classes and who express an interest in transferring and completing a bachelor's degree in the field persist. The overused ""pipeline"" metaphor, which indicates a supply-side lack, has been replaced by many with that of a ""pathway."" However, the ""pathway"" image suggests a general forward-moving trend that can be misleading. In this work, we draw from qualitative interviews with 14 CS students from groups traditionally underrepresented in the field who have studied introductory computer programming at a community college to investigate the following question: ""What are the institutional barriers along a CS bachelor's degree track that includes community college?"" Our findings indicate that there are three categories of institutional barriers along the transfer pathway: setbacks that hinder student progression forward, discontinuities in which students leave and re-enter the pathway, and departures in which students leave computer science and/or leave college altogether. We describe specific examples of each and introduce the idea of student movement as a game of ""chutes and ladders,"" a convoluted trail where students can slide backwards or of the path (chutes), necessitating the implementation of targeted institutional supports that can boost student progress forward (ladders). We suggest institutional interventions that can help students facing each type of barrier to continue on course through community college and transfer to a four-year university. © 2019 Association for Computing Machinery.",Community college; Computer science; Transfer,Computer programming; Computer science; Ladders; Community college; Institutional barriers; Institutional factors; Institutional support; Introductory computer programming; Qualitative interviews; Science community; Transfer; Students
Does computer game design and programming benefit children? A meta-synthesis of research,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061180931&doi=10.1145%2f3277565&partnerID=40&md5=d7d1131bc10dc0a763b406f66773561f,"It is widely believed that there are educational benefits to making computer games, but there is no systematic review of research on this topic. This article describes a meta-synthesis of research on children designing and programming computer games that investigates the extent to which there is evidence of benefits for computer science learning and motivation. Over 400 articles were identified, and 68 articles met the inclusion criteria. A systematic analysis and synthesis across studies showed some evidence that computer game design and programming can lead to changes in programming knowledge, problem solving, and computer science attitudes and confidence. However, most of the evidence described engagement in computing-related practices and did not measure learning. The findings were mostly positive, although several studies noted more negative attitudes toward programming after making games. The results were similar across different pedagogical approaches, although social interaction may provide unique opportunities for computer science learning. The synthesis resulted in a list of design elements for studying computer game design and programming activities; these can be used to increase the availability of evidence about learning. The article concludes with the identification of gaps in the research and suggestions for additional research. © 2019 Association for Computing Machinery.",C omputational thinking; Computer science; Game design and programming; K-12; Meta-synthesis,Availability; C (programming language); Computer science; Problem solving; Educational benefits; Game design; Meta-synthesis; Pedagogical approach; Programming activities; Programming knowledge; Social interactions; Systematic analysis; Computer games
Identifying pathways to computer science: The long-term impact of short-term game programming outreach interventions,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061186086&doi=10.1145%2f3283070&partnerID=40&md5=f9139292efa6d8ffe9d91a41271ff822,"Short-term outreach interventions are conducted to raise young students' awareness of the computer science (CS) field. Typically, these interventions are targeted at K-12 students, attempting to encourage them to study CS in higher education. This study is based on a series of extra-curricular outreach events that introduced students to the discipline of computing, nurturing creative computational thinking through problem solving and game programming. To assess the long-term impact of this campaign, the participants were contacted and interviewed two to five years after they had attended an outreach event. We studied how participating in the outreach program affected the students' perceptions of CS as a field and, more importantly, how it affected their educational choices. We found that the outreach program generally had a positive effect on the students' educational choices. The most prominent finding was that students who already possessed a ""maintained situational interest"" in CS found that the event strengthened their confidence in studying CS. However, many students were not affected by attending the program, but their perceptions of CS did change. Our results emphasize the need to provide continuing possibilities for interested students to experiment with computing-related activities and hence maintain their emerging individual interests. © 2019 Copyright held by the owner/author(s).",Computer science education; Game programming; Interest development; K-12; Long-term impact,Computer games; Computer programming; Education computing; Problem solving; Computational thinkings; Computer Science Education; Game Programming; Higher education; Individual interests; Interest development; Long-term impacts; Outreach programs; Students
Digital and physical fabrication as multimodal learning: Understanding youth computational thinking when making integrated systems through bidirectionally responsive design,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061185089&doi=10.1145%2f3243138&partnerID=40&md5=867d38c56b7aac446c786ec0e13af4c1,"This article proposes and explores the kinds of computational thinking, creative practices, design activities, and inclusive learning opportunities provided to diverse high school youth when designing integrated systems through simultaneously physically and digitally responsive wearable games and systems. Previous work in this area, conducted by Richard, coined the term ""bidirectionally responsive design"" (BRD) to describe the design of dual-feedback systems using multiple digital and physical interfaces. BRD also emphasizes using simplified fabrication tools, media and coding platforms, and microcontrollers common in youth content creation communities and makerspaces. This study provides a framework to analyze computational concepts, practices, and perspectives that leverage an integrated systems and multimodal learning approach, such as BRD, adding to, building on, and integrating previous analytic approaches to looking at Scratch coding, media design, physical computing and e-textiles. Using a detailed case study of one team during one of the early workshop iterations, we conduct a multimodal analysis of bidirectionally responsive making activities and discuss the ways that they present novel understanding of integrating diverse interests and encouraging collaborative and distributed computational thinking. We further examine how BRD operationalizes and extends multimodal learning theory by adding tangible and integrative dimensions as additional modalities learners can leverage to facilitate meaning making, metacognition, and agency. We also discuss how designing integrated systems, as facilitated through BRD, provides an opportunity to engage in authentic practices around the design of complex systems. © 2019 Association for Computing Machinery.",Collaboration; Content analysis; Creativity support; Design research methods; Education/learning; Embodied interaction; Fashion/clothing; Games/play; Interview; Participatory design; Schools/educational setting; Sensors; Tangible; Teens; Wearable computers,Computation theory; Computer games; Digital integrated circuits; E-learning; Fabrication; Integrated control; Sensors; Wearable computers; Collaboration; Content analysis; Creativity support; Design research methods; Embodied interaction; Fashion/clothing; Games/play; Interview; Participatory design; Tangible; Teens; Modal analysis
Searching for global employability: Can students capitalize on enabling learning environments?,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059838719&doi=10.1145%2f3277568&partnerID=40&md5=dd036e8954c3c0f784389567b9fe6bf4,"Literature on global employability signifies “enabling” learning environments where students encounter ill-formed and open-ended problems and are required to adapt and be creative. Varying forms of “projects,” co-located and distributed, have populated computing curricula for decades and are generally deemed an answer to this call. We performed a qualitative study to describe how project course students are able to capitalize on the promise of enabling learning environments. This critical perspective was motivated by the circumstance of the present-day education systems being heavily regulated for the precipitated production of human capital. The students involved in our study described education system-imposed and group-imposed narratives of narrowed opportunities, as well as many self-related challenges. However, students welcomed autonomy as an enjoyable condition and linked it with motivation. Whole-group commitment and self-related attributes such as taking care of one's own learning appeared as important conditions. The results highlight targets for interventions that can counteract constraining study conditions and continue the march of projects as a means to foster complex learning for the benefit of students and professionalism in global software engineering. © 2019 Copyright held by the owner/author(s)",Employability; Global software engineering education; Project-based learning,Computer aided instruction; Software engineering; Computing curricula; Critical perspectives; Employability; Global software engineering; Learning environments; Open-ended problems; Project based learning; Qualitative study; Students
Building lego towers: An exercise for teaching the challenges of global work,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059857336&doi=10.1145%2f3218249&partnerID=40&md5=0b6582b4c4213201f585cadc3d233db6,"Global software engineering has changed the way software is developed today. To address the new challenges, many universities have launched specially tailored courses to train young professionals to work in globally distributed projects. However, a mere acknowledgment of the geographic, temporal, and cultural differences does not necessarily lead to a deep understanding of the underlying practical implications. Therefore, many universities developed alternative teaching and learning activities, such as multi-university collaborative projects and small-scale simulations or games. In this article, we present a small-scale exercise that uses LEGO bricks to teach skills necessary for global work. We describe the many different interventions that could be implemented in the execution of the exercise. We had seven runs of the exercises and report our findings from executing seven runs of the exercise with the total of 104 students from five different courses in two different universities. Our results suggest that the exercise can be a valuable tool to help students dealing with troublesome knowledge associated with global software engineering and a useful complement to the courses dedicated to this subject. © 2019 Copyright is held by the owner/author(s)",Communication and coordination; Distributed software development; Distributed teams; Global software engineering; Practical exercise; Teaching,Curricula; Distributed computer systems; Human resource management; Software design; Collaborative projects; Distributed projects; Distributed software development; Distributed teams; Global software engineering; Practical exercise; Teaching and learning; Young professionals; Teaching
Assessing the impact of the distributed software development course on the careers of young software engineers,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059869951&doi=10.1145%2f3274529&partnerID=40&md5=97218d76d563666a321a2642f932001e,"Various software engineering (SE) curricula in higher education have started including courses on global software engineering (GSE), carried out as internationally distributed project-based courses. These courses, known for their closeness to “real-world” work experience, emphasize the importance of involving industry partners as customers and focus on soft skills essential for employment, an aspect often neglected in engineering education. However, not many such courses are long-lived or consistent in form throughout the years, making their impact and relevance hard to assess. The Distributed Software Development course (DSD), currently run among three universities in Croatia, Italy, and Sweden, has now been carried out for 15 years consecutively, providing a rich source of in-course and post-graduation data. To evaluate the students' experiences of the course after they graduate and start working, a study has been carried out among former DSD students from the University of Zagreb, Croatia. Its goal is to understand how useful this course was in students' early careers, both in first and current employment, as well as related factors at the workplace (magnitude of distributed collaboration, company size). The study results show the relevance of such distributed course experiences for future employment, as well as the importance of building upon soft skills as part of the software engineering curricula. Higher education institutions are invited to consider including such courses in the software engineering curriculum, for the benefit of their students and, indirectly, students' future employers. © 2019 Association for Computing Machinery.",Distributed software development; Employment; Engineering career; Global software engineering; Project-based learning,Curricula; Employment; Engineering education; Professional aspects; Software design; Distributed collaboration; Distributed projects; Distributed software development; Engineering careers; Global software engineering; Higher education institutions; Project based learning; Software engineering curricula; Students
Exploring and expanding GSE education with open source software development,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059846272&doi=10.1145%2f3230012&partnerID=40&md5=35eb21d4c1b66c76db983f98c4687009,"Global software engineering (GSE) courses traditionally require cooperation between at least two universities so as to provide a distributed development environment to the students. In this study, we explore an alternative way to organize a global software engineering course where students work on open source software development (OSSD) projects rather than in a multi-university collaboration setting. The results show that the new setup may provide core GSE challenges as well as challenges associated with software development outsourcing and challenges related to working on large open source software. The present article compares the experiences gained from running a combined GSE and OSSD course against the experiences gained from running a traditional GSE course. The two alternatives are compared in terms of students' learning outcomes and course organization. The authors found that a combined GSE and OSSD course provides learning opportunities that are partly overlapping with, and partly complementary to, a traditional GSE course. The authors also found that the combined OSSD and GSE course was somewhat easier to organize because most of the activities took place in a single university setting. The authors used the extended GSE taxonomy for the comparison and found it to be a useful tool for this, although it had some limitations in expressive power. Therefore, two additional relationship dimensions are proposed that will further enrich the extended taxonomy in classifying GSE (and OSSD) projects. © 2019 Copyright held by the owner/author(s)",Global software engineering; GSE Education; GSE Taxonomy; Open Source Software Development; OSS; Software Development Outsourcing,Curricula; Open systems; Outsourcing; Software design; Students; Taxonomies; Course organization; Distributed development environments; Global software engineering; Learning opportunity; Learning outcome; Software development outsourcings; University collaborations; University settings; Open source software
Evaluating GSD-aware: A serious game for discovering global software development challenges,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059832417&doi=10.1145%2f3218279&partnerID=40&md5=25e1a826f914c4fc4b86fd72944369f5,"Global Software Development (GSD) is currently a strong industry trend. This means that if computer science engineers are to be trained to deal with this model, it is very important to include the topic in software engineering courses, attempting to ensure that students learn about GSD and become familiar with its advantages and challenges. However, software engineering courses do not always consider including it in their curricula. It must also be recognized that it is difficult to find a suitable method to teach/develop the different skills needed for GSD. There is often a lot of content and not a great deal of time available to teach it. In this article, we propose the use of a serious game called GSD-Aware, with which students can “suffer” some of the typical challenges of GSD by interacting with avatars and by using several means of communication to solve a number of problems posed. The article focuses on the description of the game and on the empirical study conducted to analyze whether GSD-Aware helps students to be conscious of GSD challenges. It was discovered that after 50 minutes playing the game, the students were aware of the greater influence that the following factors can have: lack of coordination, lack of trust, cultural differences, lack of face-to-face and informal communication, time difference, and lack of team spirit. In their final analysis, students agreed that the serious game scenarios helped them to understand what GSD is and to grasp the importance of some GSD challenges. © 2019 Copyright is held by the owner/author(s)",Global software engineering; Serious game,Curricula; Engineering education; Human resource management; Software design; Students; Teaching; Technical presentations; Cultural difference; Empirical studies; Global software development; Global software engineering; Industry trends; Informal communication; Software engineering course; Time-differences; Serious games
Managing diversity in distributed software development education-A longitudinal case study,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059869983&doi=10.1145%2f3218310&partnerID=40&md5=b262a387fcafeaf9525128644a865919,"Teaching Distributed Software Development with real distributed settings is a challenging and rewarding task. Distributed courses are idiosyncratically more challenging than standard local courses. We have experienced this during our distributed course, which has been run for 14 consecutive years. In this article, we present and analyze the emerging diversities specific to distributed project-based courses. We base our arguments on our experience, and we exploit a three-layered distributed course model, which we use to analyze several course elements throughout the 14-years lifetime of our distributed project-based course. In particular, we focus on the changes that the course underwent throughout the years, combining findings obtained from the analyzed data with our own teaching perceptions. Additionally, we propose insights on how to manage the various diversity aspects. © 2019 Copyright held by the owner/author(s)",Distributed software development; Global software engineering; Longitudinal case study; Software engineering education,Engineering education; Software engineering; Teaching; Course models; Distributed projects; Distributed software development; Global software engineering; Longitudinal case study; Software design
Assessing students' IT professional values in a global project setting,2019,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059863515&doi=10.1145%2f3231710&partnerID=40&md5=0dafd3592292985a64e564f9e550d521,"This research aimed at evaluating the development and use of low-cost affective domain assessment instruments, culminating with personal and group characterization of representative global information technology (IT) professional values. Values and valuing are a compelling component of Bloom's affective domain of learning for engineering education. In helping students develop professional engineering competencies, it is essential that they develop not just cognitive knowledge of something but also values related to that knowledge and the ability to express these values in professional action. However, even if some professional values are identified, understood, and expressed, assessing students' values and valuing are difficult, and assessment instruments are often difficult to develop, particularly for assessing student learning in the context of a particular course. This exploratory study aimed at examining assessment of dispositional knowledge in the context of global software engineering (GSE). It focused on the development and use of a set of instruments for assessing affective domain student learning of global IT/software engineering (SE) professional values. The project included making explicit the IT professional values of interest among the participating faculty in the form of actionable value statements. Following a process derived from Thurstone scale development, the project included validation of these statements with an expert panel as question roots, followed by the use of these questions to investigate student and alumni receiving, responding, and valuing of these professional values. The effort needed to generate questionnaires suitable for course use was relatively low; these questionnaires were deployed to students and alumni from an open-ended global software engineering project course. Students responding reported significant agreement when receiving these global values, but sent more mixed responses in responding to and valuing them. The effort helped identify several actionable IT professional values worth reinforcing in future course offerings. © 2019 Copyright is held by the owner/author(s)",Affective domain assessment; Dispositional knowledge; Engineering values assessment; Global software engineering,Curricula; Professional aspects; Software engineering; Students; Surveys; Affective domain; Assessment instruments; Dispositional knowledge; Exploratory studies; Global information technology; Global software engineering; Professional engineerings; Scale development; Engineering education
A fringe topic in a fragile network: How digital literacy and computer science instruction is supported (or Not) by teacher ties,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061200639&doi=10.1145%2f3218361&partnerID=40&md5=30f7652abc869e5512e7c687df00fd2e,"In this NSF CSforALL funded research study, the authors sought to understand the extent to which an urban district's teacher instructional support network enabled or constrained capacity to implement and diffuse Digital Literacy and Computer Science (DLCS) instructional practices throughout the K-12 curriculum. Social network analysis was used to investigate informal teacher advice-seeking and advice-giving patterns of DLCS support. Network measures of cohesion and centrality were computed. Findings revealed that DLCS-focused teacher support networks tend to exhibit very low density, have relatively few ties, include a high number of isolates (teachers with no connections), and centralize around a particular actor. In addition, a low level of overlap was found between DLCS networks and primary instructional networks. Overall, study findings suggest that teacher networks are not well-structured to support the flow of DLCS advice and support. The authors conclude that examining and strengthening teacher networks of instructional support may be a crucial step for educational leaders concerned with school improvement and the diffusion of DLCS curricula in US schools. © 2018 ACM.",Computer science; Digital literacy; Social network analysis,Computer science; Curricula; E-learning; Social networking (online); Digital literacies; Instructional practices; Instructional support; K-12 curriculum; Network measures; Research studies; Science instructions; Support networks; Computer networks
Second special issue on learning analytics in computing education,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061209184&doi=10.1145%2f3243140&partnerID=40&md5=ef9df06c5901fc953568010433fd93d8,[No abstract available],,
Comparing computing professionals' perceptions of importance of skills and knowledge on the job and coverage in undergraduate experiences,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061203142&doi=10.1145%2f3218430&partnerID=40&md5=90c3d3ebb45f74a9e729fb7462758904,"This article discusses the findings of a survey of nearly 300 computing professionals who are involved in the design and/or development of software across a variety of industries. We report on the surveyed professionals' perceptions of the importance of a range of topics and skills, and the degree to which 55 recent graduates felt that each topic or skill was emphasized in their undergraduate experience. Our findings highlight the value of breadth and flexibility in technical skills, and the universal importance of critical thinking, problem solving, on-the-job learning, and the ability to work well in cross-disciplinary teams. These findings align roughly with recommendations by the ACM/IEEE task force on computing curricula. However, the recent graduates we surveyed report inconsistent coverage of these most important areas within their degree experiences. We discuss implications for education and for future research. © 2018 ACM.",Curriculum; Interpersonal skills; Math; Pedagogy; Professional skills; Teamwork,Curricula; Surveys; Interpersonal skills; Math; Pedagogy; Professional skills; Teamwork; Problem solving
Transfer-learning methods in programming course outcome prediction,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061192290&doi=10.1145%2f3152714&partnerID=40&md5=85cf213faae82ce28fba99054df4ce4e,"The computing education research literature contains a wide variety of methods that can be used to identify students who are either at risk of failing their studies or who could benefit from additional challenges. Many of these are based onmachine-learning models that learntomake predictions basedon previously observed data. However, in educational contexts, differences between courses set huge challenges for the generalizability of these methods. For example, traditional machine-learning methods assume identical distribution in all data-in our terms, traditional machine-learning methods assume that all teaching contexts are alike. In practice, data collected from different courses can be very different as a variety of factors may change, including grading, materials, teaching approach, and the students. Transfer-learning methodologies have been created to address this challenge. They relax the strict assumption of identical distribution for training and test data. Some similarity between the contexts is still needed for efficient learning. In this work, we review the concept of transfer learning especially for the purpose of predicting the outcome of an introductory programming course and contrast the results with those from traditional machine-learning methods. The methods are evaluated using data collected in situ from two separate introductory programming courses. We empirically show that transfer-learning methods are able to improve the predictions, especially in cases with limited amount of training data, for example, when making early predictions for a new context. The difference in predictive power is, however, rather subtle, and traditional machine-learning models can be sufficiently accurate assuming the contexts are closely related and the features describing the student activity are carefully chosen to be insensitive to the fine differences. © 2018 ACM.",Course outcome prediction; Educational data mining; Introductory programming; Learning analytics; Machine learning; Novice programmers; Source code snapshots; Transfer learning,Computer programming; Data mining; Education computing; Forecasting; Grading; Learning systems; Machine learning; Teaching; Educational data mining; Introductory programming; Learning analytics; Novice programmer; Outcome prediction; Source codes; Transfer learning; Students
"The academic, social, and professional integration profiles of information technology students",2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061182868&doi=10.1145%2f3183343&partnerID=40&md5=7df2e0edcc123b8c77680d92ca7d99ae,"Low retention rates in higher education Information Technology (IT) studies have ledto an unmet demand for IT specialists. Therefore, universities need to apply interventions to increase retention rates and provide the labor market with more IT graduates. However, students with different characteristics may need different types of interventions. The current study applies a person-oriented approach and identifies the profiles of first-year IT students in order to design group-specific support. Tinto's [13, 14] integration model was used as a framework to analyze questionnaire data from 509 first-year IT students in Estonia. The students' response profiles were distinguished through latent profile analysis, and the students were divided into four profiles based on their responses to questions about academic integration, professional integration, and graduation-related self-efficacy. The difference in academic integration was smaller among the profiles than the difference in professional integration. Knowing these profiles helps universities to design interventions for each student group and apply the interventions to increase the number of IT graduates. © 2018 Association for Computing Machinery.",Higher education; Retention; Students' profiles,Education computing; Integration; Professional aspects; Academic integrations; Higher education; Integration models; Profile analysis; Questionnaire data; Response profile; Retention; Retention rate; Students
Students' experience of participation in a discipline - A longitudinal study of computer science and IT engineering students,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054828310&doi=10.1145%2f3230011&partnerID=40&md5=f0ca0695d225547ea4a15a79304dff5e,"This article concludes a longitudinal study with the broader aim to explore learner development as a longterm, social process. One goal has been to inform the endeavours of improving student engagement, retention, as well as under-representation of certain demographics in computing. Students of two computer science-related study programmes (CS/IT) reflected on their engagement in their field of study at different times during the first three study years. Drawing on social identity theory, the focus has been to analyse and describe different ways in which the students experience participation in CS/IT, i.e., doing, thinking, and feeling, in relation to CS/IT, negotiated among different people. Insights into participation in CS/IT were used to discuss what it entails to fit in and become a computing professional. Phenomenographic analysis yields an outcome space that describes increasingly broad ways in which first-, second-, and third-year students experience participation in CS/IT. Two further outcome spaces provide nuanced insights into experiences that are of increasing relevance as the students advance in their studies, participation as problem solving, and problem solving for others. Participation as problem solving appears to be central in this learning environment and the students integrate such experiences into their histories of engagement in CS/IT. In study year 3, the students also reason about participation as problem solving for others that they encounter in the human computer interaction course. However, at that time several students perform a technical problem solver identity and reject such broader ways of participating in CS/IT. © 2018 Association for Computing Machinery.",Diversity; Engagement; Exclusion; Gender; Identity; Inclusion; Learner development; Longitudinal; Participation; Phenomenography,Computation theory; Computer aided instruction; Human computer interaction; Inclusions; Students; Diversity; Engagement; Exclusion; Gender; Identity; Learner development; Longitudinal; Participation; Phenomenography; Problem solving
"An improved grade point average, with applications to CS undergraduate education analytics",2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053759148&doi=10.1145%2f3157086&partnerID=40&md5=55c51af82e8404ed83cb58a733802a7f,"We present a methodological improvement for calculating Grade Point Averages (GPAs). Heterogeneity in grading between courses systematically biases observed GPAs for individual students: the GPA observed depends on course selection. We show how a logistic model can account for course selection by simulating how every student in a sample would perform if they took all available courses, giving a new “modeled GPA.” We then use 10 years of grade data from a large university to demonstrate that this modeled GPA is a more accurate predictor of student performance in individual courses than the observed GPA. Using Computer Science (CS) as an example learning analytics application, it is found that required CS courses give significantly lower grades than average courses. This depresses the recorded GPAs of CS majors: modeled GPAs are 0.25 points higher than those that are observed. The modeled GPA also correlates much more closely with standardized test scores than the observed GPA: the correlation with Math ACT is 0.37 for the modeled GPA and is 0.20 for the observed GPA. This implies that standardized test scores are much better predictors of student performance than might otherwise be assumed. © 2018 ACM.",Gender disparity; GPA; Learning analytics; Women in computing,
"How do gender, learning goals, and forum participation predict persistence in a computer science MOOC?",2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051488362&doi=10.1145%2f3152892&partnerID=40&md5=dc384d7380e0811f735d99eadc1b2ee2,"Massive Open Online Courses (MOOCs)-in part, because of their free, flexible, and relatively anonymous nature—may provide a means for helping overcome the large gender gap in Computer Science (CS). This study examines why women and men chose to enroll in a CS MOOC and how this is related to successful behavior in the course by (a) using k-means clustering to explore the reasons why women and men enrolled in this MOOC and then (b) analyzing if these reasons are related to forum participation and, ultimately, persistence in the course. Findings suggest that women and men have different reasons for taking this CS MOOC, and they persist at different rates, an outcome that is moderated by forum participation. © 2018 ACM.",Android app development; Forum participation; Gender gap; Learning goals,
A systematic literature review of automated feedback generation for programming exercises,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054851360&doi=10.1145%2f3231711&partnerID=40&md5=05e0a6c5498e5daabc37c276b32b81fe,"Formative feedback, aimed at helping students to improve their work, is an important factor in learning. Many tools that offer programming exercises provide automated feedback on student solutions. We have performed a systematic literature review to find out what kind of feedback is provided, which techniques are used to generate the feedback, how adaptable the feedback is, and how these tools are evaluated. We have designed a labelling to classify the tools, and use Narciss' feedback content categories to classify feedback messages. We report on the results of coding a total of 101 tools. We have found that feedback mostly focuses on identifying mistakes and less on fixing problems and taking a next step. Furthermore, teachers cannot easily adapt tools to their own needs. However, the diversity of feedback types has increased over the past decades and new techniques are being applied to generate feedback that is increasingly helpful for students. © 2018 Association for Computing Machinery.",Automated feedback; Learning programming; Programming tools; Systematic literature review,Students; Teaching; Automated feedback; Feedback messages; Feedback type; Formative feedbacks; Learning programming; Programming exercise; Programming tools; Systematic literature review; Automation
Peer review in CS2: Conceptual learning and high-level thinking,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053527770&doi=10.1145%2f3152715&partnerID=40&md5=af92f01582f3c32b9276c91ab8505dca,"In computer science, students could benefit from exposure to critical programming concepts from multiple perspectives. Peer review is one method to allow students to experience authentic uses of the concepts in an activity that is not itself programming. In this work, we examine how to implement the peer review process in early, object-oriented computer science courses as a way to increase the students' knowledge of programming concepts, specifically Abstraction, Decomposition, and Encapsulation, and to develop their higher-level thinking skills. We are exploring the peer review process, the effects of the type of review on the reviewers, and the results this has on the students' learning. To study these ideas, we used peer review activities in CS2 classes at two universities over the course of a semester. Using three groups (one reviewing their peers, one reviewing the instructor, and one completing small design or coding assignments), we measured the students' conceptual understanding throughout the semester with concept maps and the reviews they completed. We found that reviewing helped students learn Decomposition, especially those reviewing the instructor's programs, but we did not find that it improved the students' level of thinking. Overall, reviews (peer or otherwise) are beneficial for teaching Decomposition to CS2 students and can be used as an alternative method for teaching other object-oriented programming concepts. © 2018 ACM 1946-6226/2018/09-ART13 $15.00",CS education; Learning; Object-oriented concepts; Peer assessment; Peer Review,Administrative data processing; Students; Teaching; CS education; Learning; Object-oriented concepts; Peer assessment; Peer review; Object oriented programming
A Controlled Experiment on Python vs C for an introductory programming course: Students' outcomes,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051856119&doi=10.1145%2f3152894&partnerID=40&md5=b846827c7115c8c6e9cf9f2290beb0a7,"We performed a controlled experiment comparing a C and a Python Introductory Programming course. Three facultymembers at University of Campinas, Brazil, taught the same CS1 course for the same majors in two different semesters, one version in Python and one in C, with a total of 391 students involved in the experiment. We measured the dropout rate, the failure rate, the grades on the two exams, the proportion of completed lab assignments, and the number of submissions per completed assignment. There was no difference in the dropout rate. The failure rate for Python was 16.9% against 23.1% for C. The effect size (Cohen's D) on the comparison of Python against C on the midterm exam was 0.27, and 0.38 for the final exam. The effect size for the proportion of completed assignments was 0.39 and the effect size for the number of submissions per assignment was-0.61 (Python had less submissions per completed assignments). Thus, for allmeasures, with the exception of dropout rate, the version of the course in Python yielded better student outcomes than the version in C and all differences are significant (with 95% confidence) with the exception of the failure rate (p-value = 0.12). © 2018 ACM.",C; Controlled Experiment; CS1; Introductory Programming; Python,Cesium; Failure analysis; Students; Controlled experiment; Effect size; Failure rate; Introductory programming; Introductory programming course; P-values; Python; Student outcomes; C (programming language)
Errors and complications in SQL query formulation,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051847339&doi=10.1145%2f3231712&partnerID=40&md5=61cc2432de167ff8720c12f794ad0450,"SQL is taught in almost all university level database courses, yet SQL has received relatively little attention in educational research. In this study, we present a database management system independent categorization of SQL query errors that students make in an introductory database course. We base the categorization on previous literature, present a class of logical errors that has not been studied in detail, and review and complement these findings by analyzing over 33,000 SQL queries submitted by students. Our analysis verifies error findings presented in previous literature and reveals new types of errors, namely logical errors recurring in similar manners among different students. We present a listing of fundamental SQL query concepts we have identified and based our exercises on, a categorization of different errors and complications, and an operational model for designing SQL exercises. © 2018 ACM.",Errors; Exercise Design; Human Factors; Languages; Query Languages; SQL; Standardization,Human engineering; Query languages; Query processing; Standardization; Students; Database course; Educational research; Logical errors; Operational model; SQL query; University levels; Errors
"The core cyber-defense knowledge, skills, and abilities that cybersecurity students should learn in school: Results from interviews with cybersecurity professionals",2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051859382&doi=10.1145%2f3152893&partnerID=40&md5=0e884e35963d2e4a10584c187b3afe5a,"Our cybersecurity workforce needs surpass our ability to meet them. These needs could be mitigated by developing relevant curricula that prioritize the knowledge, skills, and abilities (KSAs) most important to cybersecurity jobs. To identify the KSAs needed for performing cybersecurity jobs, we administered survey interviews to 44 cyber professionals at the premier hacker conferences Black Hat 2016 andDEF CON 24. Questions concerned 32 KSAs related to cyber defense. Participants rated how important each KSA was to their job and indicated where they had learned that KSA. Fifteen of these KSAs were rated as being of higher-thanneutral importance. Participants also answered open-ended questions meant to uncover additional KSAs that are important to cyber-defense work. Overall, the data suggest that KSAs related to networks, vulnerabilities, programming, and interpersonal communication should be prioritized in cybersecurity curricula. © 2018 ACM.",And Abilities; Cyber-Defense; Cybersecurity Curricula; Cybersecurity Education; Cybersecurity Workforce Framework; Knowledge; Skills,Curricula; Personal computing; Personnel; Students; And Abilities; Cyber defense; Cyber security; Cyber-security educations; Knowledge; Skills; Network security
Classroom-Based research projects for computing teachers: Facilitating professional learning,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051840839&doi=10.1145%2f3171129&partnerID=40&md5=2c7a3124ae9dcb45143b321fac6421a1,"The introduction of Computing to the national curriculum in England has led to a situation where in-service teachers need to develop subject knowledge and pedagogical expertise in computer science, which presents a significant challenge. Professional learning opportunities can support this; these may be most effective when situated in the teachers' own working practices. This article describes a project to support Computing teachers in developing pedagogical skills by carrying out classroom-based research in their schools. A group of 22 primary (Grades K-5) and secondary (Grades 6-10) teachers from schools across England planned, designed, and implemented research projects either individually or in small groups, supported by a team of university colleagues. Inter and intra group progress was shared online and face-to-face within a distributed community of inquiry. Data collection included surveys, video data, and the projects completed by the teachers. The findings from the project are analysed using Clarke and Hollingsworth's Interconnected Model of Teacher Professional Growth (IMTPG), which enables an identification and exploration of teacher change. Results of the analysis demonstrate that the approach can foster ""growth networks""-the construct used within IMTPG to indicate teacher change which is likely to be sustained and fundamental to teachers' understanding. The individual nature of this change indicates that the approach supports personal change related to each teacher's specific situation. Although there is a huge literature on action research as part of teacher professional learning, we believe this to be the first time this has been carried out in the context of computer science education. We conclude by critically reflecting on the lessons that we have learned in leading this project. © 2018 ACM.",Action Research; Computer Science Education; Computing Teachers; Professional Learning,Curricula; Education computing; Professional aspects; Action research; Classroom-based researches; Community of inquiry; Computer Science Education; Computing Teachers; Interconnected models; Professional growth; Professional learning; Teaching
A scalable methodology to guide student teams executing computing projects,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064535263&doi=10.1145%2f3145477&partnerID=40&md5=b2169dc4372126e7d5dcdf264d450bfa,"This article reports on a sequential mixed-methods research study, which compared different approaches on how to guide students through a semester-long data science project. Four different methodologies, ranging from a traditional “just assign some intermediate milestones” to other more Agile methodologies, were first compared via a controlled experiment. The results of this initial experiment showed that the project methodology used made a significant difference in student outcomes. Surprisingly, the Agile Kanban approach was found to be much more effective than the Agile Scrum methodology. Based on these initial results, in the second semester, we focused on use of the Kanban methodology. The findings in the second, more qualitative phase, confirmed the methodology’s usefulness and scalability. A key issue when using the scrum methodology was that the students had a very difficult time estimating what could be completed in each of their two-week sprints. The Kanban board, which visually shows and limits work-in-progress, was found to be an effective way for students to communicate with each other as well as with their instructor. In addition, Agile Kanban also streamlined the work required for instructors to efficiently provide guidance to student teams and to understand each team’s status. In summary, a scalable Kanban methodology, which can be applied to a wide variety of student computing projects, was found to an effective methodology to guide and manage student projects, improving student outcomes and minimizing instructor workload. © 2018 ACM.",Project methodologies; Project-based learning; Scalable methodologies,Scalability; Agile Methodologies; Computing projects; Controlled experiment; Mixed-methods research; Project based learning; Project methodologies; Scalable methodologies; Scrum methodologies; Students
Involving external stakeholders in project courses,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064555163&doi=10.1145%2f3152098&partnerID=40&md5=c7d1f4cf29d088ee2515366f08ed81b2,"Problem: The involvement of external stakeholders in capstone projects and project courses is desirable due to its potential positive effects on the students. Capstone projects particularly profit from the inclusion of an industrial partner to make the project relevant and help students acquire professional skills. In addition, an increasing push towards education that is aligned with industry and incorporates industrial partners can be observed. However, the involvement of external stakeholders in teaching moments can create friction and could, in the worst case, lead to frustration of all involved parties. Contribution: We developed a model that allows analysing the involvement of external stakeholders in university courses both in a retrospective fashion, to gain insights from past course instances, and in a constructive fashion, to plan the involvement of external stakeholders. Key Concepts: The conceptual model and the accompanying guideline guide the teachers in their analysis of stakeholder involvement. The model is comprised of several activities (define, execute, and evaluate the collaboration). The guideline provides questions that the teachers should answer for each of these activities. In the constructive use, the model allows teachers to define an action plan based on an analysis of potential stakeholders and the pedagogical objectives. In the retrospective use, the model allows teachers to identify issues that appeared during the project and their underlying causes. Drawing from ideas of the reflective practitioner, the model contains an emphasis on reflection and interpretation of the observations made by the teacher and other groups involved in the courses. Key Lessons: Applying the model retrospectively to a total of eight courses shows that it is possible to reveal hitherto implicit risks and assumptions and to gain a better insight into the interaction between external stakeholders and students. Our empirical data reveals seven recurring risk themes that categorise the different risks appearing in the analysed courses. These themes can also be used to categorise mitigation strategies to address these risks proactively. Additionally, aspects not related to external stakeholders, e.g., about the interaction of the project with other courses in the study programme, have been revealed. The constructive use of the model for one course has proved helpful in identifying action alternatives and finally deciding to not include external stakeholders in the project due to the perceived cost-benefit-ratio. Implications to Practice: Our evaluation shows that the model is a viable and useful tool that allows teachers to reason about and plan the involvement of external stakeholders in a variety of course settings, and in particular in capstone projects. © 2018 ACM.",Capstone projects; External stakeholders,Cost benefit analysis; Education computing; Risk perception; Students; Capstone projects; External stakeholders; Industrial partners; Mitigation strategy; Professional skills; Reflective practitioner; Stakeholder involvement; University course; Teaching
Capstones and large projects in computing education,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064551942&doi=10.1145%2f3229882&partnerID=40&md5=f4a2e195a8092c1667145cf7d1410600,"Capstone and large projects in computing education are used as a vehicle for giving students as close to a “real-world” experience in software development as possible within the constraints of a computing degree program. This special issue presents four articles that focus on empirical research on capstone or other large-scale projects. These articles discuss areas such as project selection, working with external stakeholders, choosing the appropriate development methodology, incorporating creative activities to support student engagement, and learning. © 2018 Copyright is held by the owner/author(s).",Capstone projects; Large projects,Software design; Capstone projects; Computing education; Development methodology; Empirical research; External stakeholders; Large project; Large-scale projects; Student engagement; Students
A multi-institutional perspective on H/FOSS projects in the computing curriculum,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046072074&doi=10.1145%2f3145476&partnerID=40&md5=d7a633cb6e3e527cb54f42f804d89432,"Many computer science programs have capstone experiences or project courses that allow students to integrate knowledge from the full breadth of their major. Such capstone projects may be student-designed, instructor-designed, designed in conjunction with outside companies, or integrated with ongoing free and open source (FOSS) projects. The literature shows that the FOSS approach has attracted a great deal of interest, in particular when implemented with projects that have humanitarian goals (HFOSS). In this article, we describe five unique models from five distinct types of institutions for incorporating sustained FOSS or HFOSS (alternatively H/FOSS) project work into capstone experiences or courses. The goal is to provide instructors wishing to integrate open source experiences into their curriculum with additional perspectives and resources to help in adapting this approach to the specific needs and goals of their institution and students. All of the models presented are based on sustained engagement with H/FOSS projects that last at least one semester and often more. Each model is described in terms of its characteristics and how it fits the needs of the institution using the model. Assessment of each model is also presented. We then discuss the themes that are common across the models, such as project selection, team formation, mentoring, and student assessment. We examine the choices made by each model, as well as the challenges faced. We end with a discussion how the models have leveraged institutional initiatives and collaborations with outside organizations to address some of the challenges associated with these projects. © 2018 ACM.",Capstones; FOSS; HFOSS; Humanitarian; Open source; Projects,Curricula; Open source software; Capstones; FOSS; HFOSS; Humanitarian; Open sources; Projects; Students
Software theater—teaching DEMo-oriented prototyping,2018,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85044522144&doi=10.1145%2f3145454&partnerID=40&md5=e9118bb59e23b6c3e390a82701492d5f,"Modern capstone courses use agile methods to deliver and demonstrate software early in the project. However, a simple demonstration of functional and static aspects does not provide real-world software usage context, although this is integral to understand software requirements. Software engineering involves capabilities such as creativity, imagination, and interaction, which are typically not emphasized in software engineering courses. A more engaging, dynamic way of presenting software prototypes is needed to demonstrate the context in which the software is used. We combine agile methods, scenario-based design, and theatrical aspects into software theater, an approach to present visionary scenarios using techniques borrowed from theater and film, including props and humor. We describe the software theater workflow, provide examples, and explain patterns to demonstrate its potential. We illustrate two large case studies in which we teach students with varying levels of experience to apply software theater: a capstone course involving industrial customers with 100 students and an interactive lecture-based course with 400 students. We empirically evaluated the use of software theater in both courses. Our evaluations show that students can understand and apply software theater within one semester and that this technique increases their motivation to prepare demonstrations even early in the project. Software theater is more creative, memorable, dynamic, and engaging than normal demonstration techniques and brings fun into education. © 2018 Copyright is held by the owner/author(s).",Agile methods; Collaborative learning; Scenario-based design; Visionary scenarios,Demonstrations; Students; Teaching; Theaters; Agile methods; Collaborative learning; Industrial customer; Interactive lecture; Scenario-based design; Software engineering course; Software requirements; Visionary scenarios; Software prototyping
How student centered is the computer science classroom? A survey of college faculty,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041471415&doi=10.1145%2f3143200&partnerID=40&md5=f051aee5a7a8e566f83c5b9ba8c01954,"Student-centered instructional practices structure a class so that students interact with each other, engage deeply with the content, and receive formative feedback. These evidence-based practices benefit all students but are particularly effective with underrepresented learners, including women and members of other minority groups. To what extent have computer science (CS) faculty embraced these strategies? We surveyed over 700 U.S. faculty to find out. Results suggest that female faculty, associate professors, and those teaching courses with enrollment above 80 students are more likely to use these student-centered practices. Across all responses, 20% of faculty use student-student interaction on a regular basis during class. In contrast, 38% of faculty rely on lectures for content delivery. Results were also compared with published data for other academic disciplines. CS faculty are less likely to use these practices compared to their non-STEM colleagues but more likely to use these practices compared to other STEM discipline faculty. Overall, CS faculty have adopted student-centered practices to some degree, but our community should strive for higher adoption rates to help as many students as possible learn and remain in computer science. © 2017 ACM.",Active learning; Evidence-based instructional practices; Instructional practice; Instructor-centered; Studentcentered,"Education; STEM (science, technology, engineering and mathematics); Surveys; Teaching; Active Learning; Evidence-based practices; Formative feedbacks; Instructional practices; Instructor-centered; Science classroom; Student-student interaction; Studentcentered; Students"
Comparing block-based and text-based programming in high school computer science classrooms,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85033238087&doi=10.1145%2f3089799&partnerID=40&md5=94eb34a4466562887adfea5e4ae9029c,"The number of students taking high school computer science classes is growing. Increasingly, these students are learning with graphical, block-based programming environments either in place of or prior to traditional text-based programming languages. Despite their growing use in formal settings, relatively little empirical work has been done to understand the impacts of using block-based programming environments in high school classrooms. In this article, we present the results of a 5-week, quasi-experimental study comparing isomorphic block-based and text-based programming environments in an introductory high school programming class. The findings fromthis study show students in both conditions improved their scores between preand postassessments; however, students in the blocks condition showed greater learning gains and a higher level of interest in future computing courses. Students in the text condition viewed their programming experience as more similar to what professional programmers do and as more effective at improving their programming ability. No difference was found between students in the two conditions with respect to confidence or enjoyment. The implications of these findings with respect to pedagogy and design are discussed, along with directions for future work. © 2017 ACM.",Block-based programming; Design; Programming environments,Design; Education; Students; Teaching; Block based; High school classrooms; Level Of Interest; Professional programmers; Programming ability; Programming environment; Programming experience; Science classroom; Computer programming
Developing computational thinking through a virtual robotics programming curriculum,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85033226884&doi=10.1145%2f3104982&partnerID=40&md5=1ddd5491e962b2a87cf21fcd54bb4274,"Computational thinking describes key principles from computer science that are broadly generalizable. Robotics programs can be engaging learning environments for acquiring core computational thinking competencies. However, few empirical studies evaluate the effectiveness of a robotics programming curriculum for developing computational thinking knowledge and skills. This study measures pre/post gains with new computational thinking assessments given to middle school students who participated in a virtual robotics programming curriculum. Overall, participation in the virtual robotics curriculum was related to significant gains in pre-to posttest scores, with larger gains for students who made further progress through the curriculum. The success of this intervention suggests that participation in a scaffolded programming curriculum, within the context of virtual robotics, supports the development of generalizable computational thinking knowledge and skills that are associated with increased problem-solving performance on nonrobotics computing tasks. Furthermore, the particular units that students engage in may determine their level of growth in these competencies. © 2017 ACM.",Computational thinking; Curriculum design; K-12; Programming; Robotics,Computer aided instruction; Curricula; Education; Mathematical programming; Problem solving; Robotics; Students; Computational thinkings; Curriculum designs; Empirical studies; Learning environments; Middle school students; Problem-solving performance; Robotics projects; Virtual robotics; Robot programming
Teaching software product lines: A snapshot of current practices and challenges,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85033217521&doi=10.1145%2f3088440&partnerID=40&md5=093e3203852b30f86d9374363e700dab,"Software Product Line (SPL) engineering has emerged to provide the means to efficiently model, produce, and maintain multiple similar software variants, exploiting their common properties, and managing their variabilities (differences). With over two decades of existence, the community of SPL researchers and practitioners is thriving, as can be attested by the extensive research output and the numerous successful industrial projects. Education has a key role to support the next generation of practitioners to build highly complex, variability-intensive systems. Yet, it is unclear how the concepts of variability and SPLs are taught, what are the possible missing gaps and difficulties faced, what are the benefits, and what is the material available. Also, it remains unclear whether scholars teach what is actually needed by industry. In this article, we report on three initiatives we have conducted with scholars, educators, industry practitioners, and students to further understand the connection between SPLs and education, that is, an online survey on teaching SPLs we performed with 35 scholars, another survey on learning SPLs we conducted with 25 students, as well as two workshops held at the International Software Product Line Conference in 2014 and 2015 with both researchers and industry practitioners participating. We build upon the two surveys and the workshops to derive recommendations for educators to continue improving the state of practice of teaching SPLs, aimed at both individual educators as well as the wider community. © 2017 ACM.",Software Engineering Teaching; Software Product Line Teaching; Software Product Lines; Variability Modeling,Computer software; Education computing; Industrial research; Software design; Software engineering; Students; Surveys; Current practices; Industrial projects; Software Product Line; Software product lines; Software variants; State of practice; Teaching software; Variability model; Education
Students' misconceptions and other difficulties in introductory programming: A literature review,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85033231892&doi=10.1145%2f3077618&partnerID=40&md5=6f933b48d40f06fbddf58c35ee4e0353,"Efforts to improve computer science education are underway, and teachers of computer science are challenged in introductory programming courses to help learners develop their understanding of programming and computer science. Identifying and addressing students' misconceptions is a key part of a computer science teacher's competence. However, relevant research on this topic is not as fully developed in the computer science education field as it is in mathematics and science education. In this article, we first review relevant literature on general definitions of misconceptions and studies about students' misconceptions and other difficulties in introductory programming. Next, we investigate the factors that contribute to the difficulties. Finally, strategies and tools to address difficulties including misconceptions are discussed. Based on the review of literature, we found that students exhibit various misconceptions and other difficulties in syntactic knowledge, conceptual knowledge, and strategic knowledge. These difficulties experienced by students are related to many factors including unfamiliarity of syntax, natural language, math knowledge, inaccurate mental models, lack of strategies, programming environments, and teachers' knowledge and instruction. However, many sources of students' difficulties have connections with students' prior knowledge. To better understand and address students' misconceptions and other difficulties, various instructional approaches and tools have been developed. Nevertheless, the dissemination of these approaches and tools has been limited. Thus, first, we suggest enhancing the dissemination of existing tools and approaches and investigating their long-Term effects. Second, we recommend that computing education research move beyond documenting misconceptions to address the development of students' (mis)conceptions by integrating conceptual change theories. Third, we believe that developing and enhancing instructors' pedagogical content knowledge (PCK), including their knowledge of students' misconceptions and ability to apply effective instructional approaches and tools to address students' difficulties, is vital to the success of teaching introductory programming. © 2017 ACM.",Conceptual Change; Constructivism; Difficulties; Introductory Programming; Misconceptions,Computation theory; Computer programming; Education; Education computing; Engineering education; Syntactics; Teaching; Conceptual change; Constructivism; Difficulties; Introductory programming; Misconceptions; Students
Impact of Using Tools in an Undergraduate Software Testing Course Supported by WReSTT,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028596382&doi=10.1145%2f3068324&partnerID=40&md5=a9a2cefcb2ee200b0c76a6ecf942130b,"Software continues to affect a major part of our daily lives, including the way we use our phones, home appliances, medical devices, and cars. The pervasiveness of software has led to a growing demand for software developers over the next decade. To ensure the high quality of software developed in industry, students being trained in software engineering also need to be trained on how to use testing techniques and supporting tools effectively at all levels of development. In this article, we investigate how testing tools are used in the software project of an undergraduate testing course.We also investigate howa cyberlearning environment-TheWeb-Based Repository of Software Testing Tutorials (WReSTT)-is used to supplement the learning materials presented in class, particularly the tutorials on different software testing tools. The results of a study spanning three semesters of the undergraduate course suggest that (1) the use of code coverage tools motivates students to improve their test suites; (2) the number of bugs found when using coverage tools slightly increased, which is similar to the results found in the research literature; and (3) students find WReSTT to be a useful resource for learning about software testing techniques and the use of code coverage tools. © 2017 ACM.",Code coverage; Cyberlearning; Testing tools,Biomedical equipment; Codes (symbols); Curricula; Domestic appliances; Education; Materials testing; Program debugging; Software engineering; Students; Teaching; Code coverage; Cyberlearning; Learning materials; Software developer; Software testing techniques; Testing technique; Testing tools; Undergraduate Courses; Software testing
Youth computational participation in the wild: Understanding experience and equity in participating and programming in the online Scratch community,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028586628&doi=10.1145%2f3123815&partnerID=40&md5=ce1e4eb8830e6d77b6f795977f5648cf,"Most research in primary and secondary computing education has focused on understanding learners within formal classroom communities, leaving aside the growing number of promising informal online programming communities where young users contribute, comment, and collaborate on programs to facilitate learning. In this article, we examined trends in computational participation in Scratch, an online community with over 1 million registered youth designers. Drawing on a random sample of 5,004 youth programmers and their activities over 3 months in early 2012, we examined programming concepts used in projects in relation to level of participation, gender, and length of membership of Scratch programmers. Latent class analysis results identified the same four groups of programmers in each month based on the usage of different programming concepts and showed how membership in these groups shifted in different ways across time. Strikingly, the largest group of project creators (named Loops) used the simplest and fewest programming concepts. Further, this group was the most stable in membership and was disproportionately female. In contrast, the more complex programming groups (named Variables, Low Booleans, and High Booleans) showed much movement across time. Further, the Low Booleans and High Booleans groups, the only groups to use ""and,"" ""or,"" and ""not"" statements in their programs, were disproportionately male. In the discussion, we address the challenges of analyzing young learners' programming in informal online communities and opportunities for designing more equitable computational participation. © 2017 ACM.",Collaborative learning; Computer science education; Computer supported collaborative learning; Educational data mining; Equity; Learning analytics; Social networking forums; Social networking sites,Data mining; E-learning; Education computing; Online systems; Social networking (online); Websites; Collaborative learning; Computer Science Education; Computer Supported Collaborative Learning; Educational data mining; Equity; Learning analytics; Social networking sites; Education
Unlocking the potential of learning analytics in computing education,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028618449&doi=10.1145%2f3122773&partnerID=40&md5=ee1b3ffedfd74c8411d7360d55e4c562,"Big data and online learning have been among the main drivers pushing forward the field of learning analytics (LA). As with work being done in other disciplines, LA in computing education is closely intertwined with the sister field of educational data mining (EDM), with the latter focused more on the technical challenges of extracting meaning from data using data-driven techniques. Learning analytics can be put to use to understand aspects of computing education that are important and yet too difficult, time-consuming, expensive, or not possible otherwise. These include understanding and measuring learning during the process of programming. In addition, some of the papers also emphasize the socio-cognitive aspects of learning computing, including understanding learners as part of a participatory culture that includes social aspects such as how they interact with their peers during the programming process.",,Big data; Data mining; Social aspects; Computing education; Data driven technique; Educational data minings (EDM); Online learning; Programming process; Socio-cognitive; Technical challenges; Education
A meta-analysis of pair-programming in computer programming courses: Implications for educational practice,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028599750&doi=10.1145%2f2996201&partnerID=40&md5=84f411c756460958b18fbb6f190874cf,"Several experiments on the effects of pair programming versus solo programming in the context of education have been reported in the research literature. We present a meta-Analysis of these studies that accounted for 18 manuscripts with 28 independent effect sizes in the domains of programming assignments, exams, passing rates, and affective measures. In total, our sample accounts for N = 3,308 students either using pair programming as a treatment variable or using traditional solo programming in the context of a computing course. Our findings suggest positive results in favor of pair programming in three of four domains with exception to affective measures. We provide a comprehensive review of our results and discuss our findings. © 2017 ACM.",Affective measures; Assignments; Effect sizes; Exams; Meta-Analysis; Passing rates; Programming courses,Education; Affective measures; Assignments; Effect size; Exams; Meta analysis; Programming course; Computer programming
Writing in-code comments to self-explain in computational science and engineering education,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028596882&doi=10.1145%2f3058751&partnerID=40&md5=fc5b3884ae53e141adf5767238dea4f4,"This article presents two case studies aimed at exploring the use of self-explanations in the context of computational science and engineering (CSE) education. The self-explanations were elicited as students' in-code comments of a set of worked-examples, and the cases involved two different approaches to CSE education: glass box and black box. The glass-box approach corresponds to a programming course for materials science and engineering students that focuses on introducing programming concepts while solving disciplinary problems. The black-box approach involves the introduction of Python-based computational tools within a thermodynamics course to represent disciplinary phenomena. Two semesters of data collection for each case study allowed us to identify the effect of using in-code comments as a self-explanation strategy on students' engagement with the worked-examples and students' perceptions of these activities within each context. The results suggest that the use of in-code comments as a self-explanation strategy increased students' awareness of the worked-examples while engaging with them. The students' perceived uses of the in-code commenting activities include: understanding the example, making a connection between the programming code and the disciplinary problem, and becoming familiar with the programming language syntax, among others. © 2017 ACM.",Applied computing education; Comments; Programming learning; Self-explaining,Codes (symbols); Education; Glass; Problem oriented languages; Thermodynamics; Applied computing; Comments; Computational science and engineerings; Materials science and engineering; Programming learning; Self-explaining; Students' engagements; Thermodynamics course; Students
"IDE-based learning analytics for computing education: A process model, critical review, and research agenda",2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028590656&doi=10.1145%2f3105759&partnerID=40&md5=9a6b0f49ff8b451657f88e6480c95229,"In recent years, learning process data have become increasingly easy to collect through computer-based learning environments. This has led to increased interest in the field of learning analytics, which is concerned with leveraging learning process data in order to better understand, and ultimately to improve, teaching and learning. In computing education, the logical place to collect learning process data is through integrated development environments (IDEs), where computing students typically spend large amounts of time working on programming assignments. While the primary purpose of IDEs is to support computer programming, they might also be used as a mechanism for delivering learning interventions designed to enhance student learning. The possibility of using IDEs both to collect learning process data, and to strategically intervene in the learning process, suggests an exciting design space for computing education research: that of IDE-based learning analytics. In order to facilitate the systematic exploration of this design space, we present an IDE-based data analytics process model with four primary activities: (1) Collect data, (2) Analyze data, (3) Design intervention, and (4) Deliver intervention. For each activity, we identify key design dimensions and review relevant computing education literature. To provide guidance on designing effective interventions, we describe four relevant learning theories, and consider their implications for design. Based on our review, we present a call-to-action for future research into IDE-based learning analytics. © 2017 ACM.",Learning analytics; Learning interventions; Learning process data,Computation theory; Computer aided instruction; Computer programming; Data acquisition; Education computing; Integrodifferential equations; Learning systems; Students; Computer-based learning environments; Integrated development environment; Learning analytics; Learning interventions; Learning process; Programming assignments; Systematic exploration; Teaching and learning; Education
A contingency table derived method for analyzing course data,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028626656&doi=10.1145%2f3123814&partnerID=40&md5=bd1f9b03bcdb49f5efe814bb81b8bbee,We describe a method for analyzing student data from online programming exercises. Our approach uses contingency tables that combine whether or not a student answered an online exercise correctly with the number of attempts that the student made on that exercise. We use this method to explore the relationship between student performance on online exercises done during semester with subsequent performance on questions in a paper-based exam at the end of semester. We found that it is useful to include data about the number of attempts a student makes on an online exercise. © 2017 ACM.,Data mining; Java; Programming novices,Data mining; Education; Contingency table; Java; On-line programming; Student performance; Students
Getting IT together: A longitudinal look at linking girls' interest in it careers to lessons taught in middle school camps,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028611315&doi=10.1145%2f3068838&partnerID=40&md5=4571d6d4d6e4e92b28e9038e32952bb3,"The dearth of women choosing information technology (IT) careers has been identified as a national problem in the United States. Efforts have been made to combat this by educating girls at a young age about technology. Recent research demonstrates that exposure to technology is insufficient to change young girls' attitudes towards IT careers and that interventions must explicitly tie technology activities to careers. Faculty and staff of a Midwestern university modified an IT summer camp for middle school girls to include career specific programming. The camp deployed the Girls Educating Themselves about Information Technology (GET IT) program to garner interest among middle school girls in IT careers. This article describes the impact of this summer camp and other social influence factors on girls' interest in pursuing careers in IT, immediately after camp completion and one year in the future. © 2017 ACM.",Broadening participation in computing; Computing programs; Girls in computing; It careers; K-12 cs education; Middle school; Stem education; Summer technology camps,Education; Broadening participation in computing; Computing program; CS education; Girls in computing; IT Career; Middle school; STEM education; Summer technology camps; Engineering education
A framework for using hypothesis-driven approaches to support data-driven learning analytics in measuring computational thinking in block-based programming environments,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028615354&doi=10.1145%2f3105910&partnerID=40&md5=ea0520bdf65cada733331281628fed6b,"Systematic endeavors to take computer science (CS) and computational thinking (CT) to scale in middle and high school classrooms are underway with curricula that emphasize the enactment of authentic CT skills, especially in the context of programming in block-based programming environments. There is, therefore, a growing need to measure students' learning of CT in the context of programming and also support all learners through this process of learning computational problem solving. The goal of this research is to explore hypothesis-driven approaches that can be combined with data-driven ones to better interpret student actions and processes in log data captured from block-based programming environments with the goal of measuring and assessing students' CT skills. Informed by past literature and based on our empirical work examining a dataset from the use of the Fairy Assessment in the Alice programming environment in middle schools, we present a framework that formalizes a process where a hypothesis-driven approach informed by Evidence-Centered Design effectively complements data-driven learning analytics in interpreting students' programming process and assessing CT in block-based programming environments. We apply the framework to the design of Alice tasks for high school CS to be used for measuring CT during programming. © 2017 ACM.",Blended learning analytics; Block-based programming environments; Computational psychometrics; Data-driven; Evidence-Centered Design; Hypothesis-driven; K-12 computer science education,Computer programming; Education computing; Problem solving; Students; Teaching; Blended learning; Computational psychometrics; Computer Science Education; Data driven; Hypothesis-driven; Programming environment; Education
Teaching computational thinking using agile software engineering methods: A framework for middle schools,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028598804&doi=10.1145%2f3055258&partnerID=40&md5=3650cb5b8dc57968a6138628fc371294,"Computational Thinking (CT) has been recognized as one of the fundamental skills that all graduates should acquire. For this reason, motivational concerns need to be addressed at an early age of a child, and reaching students who do not consider themselves candidates for science, technology, engineering, and mathematics disciplines is important as well if the broadest audience possible is to be engaged. This article describes a framework for teaching and assessing CT in the context of K-12 education. The framework is based on Agile software engineering methods, which rely on a set of principles and practices that can be mapped to the activities of CT. The article presents as well the results of an experiment applying this framework in two sixth-grade classes, with 42 participants in total. The results show that Agile software engineering methods are effective at teaching CT in middle schools, after the addition of some tasks to allow students to explore, project, and experience the potential product before using the software tools at hand. Moreover, according to the teachers' feedback, the students reached all the educational objectives of the topics involved in the multidisciplinary activities. This result can be taken as an indicator that it is possible to use computing as a medium for teaching other subjects, besides computer science. © 2017 ACM.",Agile methods; Computational thinking; Framework; K-12; Software engineering,"Education; Network function virtualization; Software engineering; Students; Agile methods; Agile software engineering; Computational thinkings; Educational objectives; Framework; Multi-disciplinary activities; Principles and practices; Science , technology , engineering , and mathematics; Teaching"
Early lessons from evaluation of computer science teacher professional development in google's CS4HS program,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028621102&doi=10.1145%2f3077617&partnerID=40&md5=9077fdf4286d5db17c03d3ec970c88f7,"This article compares self-reported learning gains and experiences of teachers in four professional development courses funded through Google's 2014 Computer Science for High School program. The courses were designed and taught independently at four universities and started late enough in the year to participate in our pre-post study. Two of the courses used a face-To-face approach, one was online only, and one used a hybrid format. Analyses from 314 pre-surveys and 129 post-surveys indicate CS teachers are far from homogenous, suggesting that some customization may benefit professional development. We also saw a stronger sense of community in the two face-To-face courses. Among the outcomes we measured, teacher concerns (Hall and Hord 1977) were more sensitive to change than our measures of self-efficacy, outcome expectations, readiness, or beliefs. Findings illustrate the variety of CS teacher professional development experiences and the need to study the best ways to scale effective CS teacher education. © 2017 ACM.",Attitudes; Hybrid learning; K12 education,Curricula; Education; Professional aspects; Surveys; Attitudes; Computer science teachers; Hybrid learning; K-12 education; Professional development; Professional Development Courses; Sense of community; Teacher professional development; Teaching
Blending measures of programming and social behavior into predictive models of student achievement in early computing courses,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028588277&doi=10.1145%2f3120259&partnerID=40&md5=50084f7f409be8b20ea0e285a6de0901,"Analyzing the process data of students as they complete programming assignments has the potential to provide computing educators with insights into both their students and the processes by which they learn to program. In prior research, we explored the relationship between (a) students' programming behaviors and course outcomes, and (b) students' participation within an online social learning environment and course outcomes. In both studies, we developed statistical measures derived from our data that significantly correlate with students' course grades. Encouraged both by social theories of learning and a desire to improve the accuracy of our statistical models, we explore here the impact of incorporating our predictive measure derived from social behavior into three separate predictive measures derived from programming behaviors. We find that, in combining the measures, we are able to improve the overall predictive power of each measure. This finding affirms the importance of social interaction in the learning process, and provides evidence that predictive models derived from multiple sources of learning process data can provide signifficantly better predictive power by accounting for multiple factors responsible for student success. © 2017 ACM.",Learning analytics; Learning interventions; Learning process data,Behavioral research; Blending; Computation theory; Computer aided instruction; Computer programming; Learning systems; Students; Learning analytics; Learning interventions; Learning process; Predictive models; Programming assignments; Social interactions; Statistical measures; Student achievement; Education
From the editor's desk: TOCE continues on a positive trajectory in 2016,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85023185411&doi=10.1145%2f3078193&partnerID=40&md5=4842727a7c63e4525c5c674b61241653,"During my first full year as editor-in-chief of ACM Transations on Computing Education (TOCE), the editorial board and I took the following four steps to improve the journal's ability to serve the growing community of computing education researchers: (1) We streamlined the peer review process, (2) we established a new partnership with the ACM Special Interest Group on Computer Science Education Conference, (c) we transitioned to a double-blind review process, and (4) we recruited guest editors for two new special issues that address timely research topics. In this editorial, I present key statistics on TOCE's review process and submissions during the 2016 calendar year, discuss and reflect on the positive steps we took to improve the journal during 2016, and describe steps we will consider in the coming year in order to ensure that ACM TOCE continues on its positive trajectory. These include forging additional partnerships with professional conferences, altering the review criteria to make the journal more welcoming to a broader range of research, especially within the K-12 space, and developing a set of evidence standards for research published in the journal. © 2017 ACM.",ACM Transactions on Computing Education; Annual report; Computing education research; TOCE Editorial,Education; Annual reports; Computer Science Education; Computing education; Peer-review process; Professional conferences; Review criteria; Special interest groups; TOCE Editorial; Education computing
"Perceptual comparison of source-code plagiarism within students from UK, China, and South Cyprus higher education institutions",2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85023195325&doi=10.1145%2f3059871&partnerID=40&md5=864e0270e8bcae1ab367d569721e69ce,"Perspectives of students on what constitutes source-code plagiarism may differ based on their educational background. Surveys have been conducted with home students undertaking computing and joint computing subject degrees at higher education institutions throughout the UK, China, and South Cyprus, and a total of 984 responses have been statistically analysed to determine the common areas of understanding and misunderstanding among students on various topics related to source-code plagiarism. The study identifies those topics which are well understood, and those topics which are not properly understood across the different groups of students, and is the first study which specifically discusses Cypriot student perceptions on sourcecode plagiarism. This study provides useful information to educators (teaching home and international students) who wish to better inform their students on the issues of plagiarism and source-code plagiarism. Finally, the survey results revealed that although students who were informed about plagiarism better understood what actions constitute plagiarism, some topics were still unclear among students regardless of the students' educational background and whether they had been previously informed about plagiarism. © 2017 ACM.",Academic integrity; China; Cyprus; Plagiarism; Software; Source-code; UK,Codes (symbols); Computer software; Education; Intellectual property; Surveys; Academic integrity; China; Cyprus; Plagiarism; Source codes; Students
Assessing student behavior in computer science education with an fsQCA approach: The role of gains and barriers,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85022322756&doi=10.1145%2f3036399&partnerID=40&md5=90ef9eb3ac8fa19783c965d81bf9097e,"This study uses complexity theory to understand the causal patterns of factors that stimulate students' intention to continue studies in computer science (CS). To this end, it identifies gains and barriers as essential factors in CS education, including motivation and learning performance, and proposes a conceptual model along with research propositions. To test its propositions, the study employs fuzzy-set qualitative comparative analysis on a data sample from 344 students. Findings indicate eight configurations of cognitive and noncognitive gains, barriers, motivation for studies, and learning performance that explain high intention to continue studies in CS. This research study contributes to the literature by (1) offering new insights into the relationships among the predictors of CS students' intention to continue their studies and (2) advancing the theoretical foundation of how students' gains, barriers, motivation, and learning performance combine to better explain high intentions to continue CS studies. © 2017 ACM.",Configuration; Contrarian case; Fuzzy-set qualitative comparative analysis; Higher education; Student behavior,Behavioral research; Education; Motivation; Students; Computer Science Education; Configuration; Fuzzy Set Qualitative Comparative Analysis; Higher education; Learning performance; Research propositions; Student behavior; Theoretical foundations; Education computing
Teaching programming in secondary education through embodied computing platforms: Robotics and wearables,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027054261&doi=10.1145%2f3025013&partnerID=40&md5=46e012a0979f18913853e726cc73edf9,"Pedagogy has emphasized that physical representations and tangible interactive objects benefit learning especially for young students. There are many tangible hardware platforms for introducing computer programming to children, but there is limited comparative evaluation of them in the context of a formal classroom. In this work, we explore the benefits of learning to code for tangible computers, such as robots and wearable computers, in comparison to programming for the desktop computer. For this purpose, 36 students participated in a within-groups study that involved three types of target computer platform tangibility: (1) desktop, (2) wearable, and (3) robotic. We employed similar blocks-based visual programming environments, and we measured emotional engagement, attitudes, and computer programming performance. We found that students were more engaged by and had a higher intention of learning programming with the robotic rather than the desktop computer. Furthermore, tangible computing platforms, either robot or wearable, did not affect the students' performance in learning basic computational concepts (e.g., sequence, repeat, and decision). Our findings suggest that computer programming should be introduced through multiple target platforms (e.g., robots, smartphones, wearables) to engage children. © 2017 ACM.",Children; Embodiment; Experiment; Learning; Robot; Ubiquitous computing; Wearable,Computer hardware; Education; Experiments; Robot programming; Robotics; Robots; Students; Teaching; Ubiquitous computing; Wearable technology; Children; Comparative evaluations; Embodiment; Emotional engagements; Learning; Programming performance; Visual programming environments; Wearable; Computer programming
Novice Java programming mistakes: Large-scale data vs. educator beliefs,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018911468&doi=10.1145%2f2994154&partnerID=40&md5=1898af75a069dcb0dbc3c6475eb2a626,"Teaching is the process of conveying knowledge and skills to learners. It involves preventing misunderstandings or correcting misconceptions that learners have acquired. Thus, effective teaching relies on solid knowledge of the discipline, but also a good grasp of where learners are likely to trip up or misunderstand. In programming, there is much opportunity for misunderstanding, and the penalties are harsh: failing to produce the correct syntax for a program, for example, can completely prevent any progress in learning how to program. Because programming is inherently computer-based, we have an opportunity to automatically observe programming behaviour - more closely even than an educator in the room at the time. By observing students' programming behaviour, and surveying educators, we can ask: do educators have an accurate understanding of the mistakes that students are likely to make? In this study, we combined two years of the Blackbox dataset (with more than 900 thousand users and almost 100 million compilation events) with a survey of 76 educators to investigate which mistakes students make while learning to program Java, and whether the educators could make an accurate estimate of which mistakes were most common. We find that educators' estimates do not agree with one another or the student data, and discuss the implications of these results. Categories and Subject Descriptors: K.3.2 [Computers And Education]: Computer and Information Science Education General Terms: Experimentation, Human Factors. © 2017 ACM.",Blackbox; Educators; Java; Programming mistakes,Behavioral research; Computer programming; Computer software; Education; Students; Surveys; Black boxes; Computer and information science educations; Computers and education; Educators; Effective teaching; Java; Java programming; Large scale data; Java programming language
Seeing myself through someone Else's eyes: The value of in-classroom coaching for computer science teaching and learning,2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85018896892&doi=10.1145%2f2967616&partnerID=40&md5=293ca182cb2886476645b1323091c3be,"This article describes the impact of in-classroom coaching for computer science (CS) educators. Coaching is a way to support teachers in their classroom while teachers master new curricula or educational approaches and is not evaluative in purpose. Using qualitative methods to analyze computer science classroom observations, teacher surveys, teacher interviews, coaching logs, and coach interviews, this research answers the following question: How does in-classroom coaching support inquiry and equity-based teaching practices? This study of Exploring Computer Science classrooms illustrates the importance of having in-classroom coaches who can collaborate and reflect with teachers about current practices and who can help support new inquiry and equity-based instructional skills. Teachers note that in-classroom coaching helped (1) positively impact changes in pedagogy, (2) enrich teachers' CS content knowledge, and (3) break CS teacher isolation at schools. Three case studies from computer science classrooms served by different coaches are shared to illustrate the ways teacher instructional practice can be strengthened over time through coaching. Categories and Subject Descriptors: K.3.2 [Computer and Information Science Education]: Computer Science Education General Terms: Human Factors. © 2017 ACM.",Coaching; Equity; Professional development; Teaching and learning,Curricula; Education; Education computing; Coaching; Computer and information science educations; Computer Science Education; Computer science teaching; Equity; Instructional practices; Professional development; Teaching and learning; Teaching
"Iteratively intervening with the ""most difficult"" topics of an algorithms and complexity course",2017,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85011418973&doi=10.1145%2f3018109&partnerID=40&md5=24232a80565de055c24133bb8afcfaa3,"When compared to earlier programming and data structure experiences that our students might have, the perspective changes on computers and programming when introducing theoretical computer science into the picture. Underlying computational models need to be addressed, and mathematical tools employed, to understand the quality criteria of theoretical computer science. Focus shifts from doing to proving. Over several years, we have tried to make this perspective transition smoother for the students of a third-year mandatory algorithms, data structures, and computational complexity course. The concepts receiving extra attention in this work are NP-completeness, one of the most central concepts in computer science, and dynamic programming, an algorithm construction method that is powerful but somewhat unintuitive for some students. The major difficulties that we attribute to NP-completeness are that the tasks look similar but have a different purpose than in algorithm construction exercises. Students do not immediately see the usefulness of the concept, and hence motivation could be one issue. One line of attacking NP-completeness has been to emphasize its algorithmic aspects using typical tools for teaching algorithms. Some potential difficulties associated with dynamic programming are that themethod is based on a known difficult concept-recursion-and that there are many ingredients in a dynamic programming solution to a problem. For both dynamic programming and NP-completeness, we have invented several new activities and structured the teaching differently, forcing students to think and adopt a standpoint, and practice the concepts in programming assignments. Student surveys show that these activities are appreciated by the students, and our evaluations indicate that they have positive effects on learning. We believe that these activities could be useful in any similar course. The approach to improving the course is action research, and the evaluation has been done using course surveys, self-efficacy surveys, rubrics-like grading protocols, and grades. We have also interviewed teaching assistants about their experiences. © 2017 ACM.",Algorithm visualization; Assessment; Dynamic programming; NPcompleteness; Pattern-oriented instruction; Proofs; Self-efficacy,Computational complexity; Computer aided instruction; Computer programming; Data structures; Education; Grading; Iterative methods; Students; Surveys; Teaching; Algorithm visualization; Assessment; Np-completeness; Pattern-oriented instruction; Proofs; Self efficacy; Dynamic programming
Computer science education for primary and lower secondary school students: Teaching the concept of automata,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991056843&doi=10.1145%2f2940331&partnerID=40&md5=d374e74db529e13bca621ff821bff7eb,"We explore the feasibility of early introduction to automata theory through gamification. We designed a puzzle game that players can answer correctly if they understand the fundamental concepts of automata theory. In our investigation, 90 children played the game, and their actions were recorded in play logs. An analysis of the play logs shows that approximately 60% of the children achieved correct-answer rates of at least 70%, which suggests that primary and lower secondary school students can understand the fundamental concepts of automata theory. Meanwhile, our analysis shows that most of them do not fully understand automata theory, but some of them have a good understanding of the concept. © 2016 ACM.",Automata theory; Gamification; Primary and lower secondary school students,Education computing; Students; Computer Science Education; Fundamental concepts; Gamification; Puzzle games; Secondary schools; Automata theory
Flipping and blending-an action research project on improving a functional programming course,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991045047&doi=10.1145%2f2934697&partnerID=40&md5=c33528e96db3a938816b91bd348cfc21,"This article reports on an action research project on improving a functional programming course by moving toward a practical and flexible study environment-flipped and blended classroom. Teaching the topic of functional programming was found to be troublesome using a traditional lectured course format. The need to increase students' amount of practice emerged while subsequent challenges relating to students' independent practical coursework were observed. Particular concerns relating to group work, learning materials, and the attribute of flexibility were investigated during the third action research cycle. The research cycle was analyzed using a qualitative survey on students' views, teacher narrative, and students' study activity data. By this third research cycle, we found that (i) the ""call for explanation"" is an apt conceptualization for supporting independent work, and in particular for the design of learning materials; (ii) use of studentselected groups that can be flexibly resized or even disbanded enables spontaneous peer support and can avoid frustration about group work; and (iii) students greatly appreciate the high degree of flexibility in the course arrangements but find that it causes them to slip from their goals. The project has improved our understanding of a successful implementation of the target course based on group work and learning materials in the context of independent study, while the attribute of flexibility revealed a contradiction that indicates the need for further action. © 2016 ACM.",Action research; Blended learning; Flipped classroom; Functional programming; Independent study,Blending; Curricula; Education; Students; Teaching; Action research; Blended learning; Degree of flexibility; Flipped classroom; Independent study; Learning materials; Qualitative surveys; Students' views; Functional programming
EarSketch: A STEAM-based approach for underrepresented populations in high school computer science education,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991108197&doi=10.1145%2f2886418&partnerID=40&md5=d693f7927c5995528d0eebfedc687a03,"This article presents EarSketch, a learning environment that combines computer programming with samplebased music production to create a computational remixing environment for learning introductory computing concepts. EarSketch has been employed in both formal and informal settings, yielding significant positive results in student content knowledge and attitudes toward computing as a discipline, especially in ethnic and gender populations that are currently underrepresented in computing fields. This article describes the rationale and components of EarSketch, the evaluation design, and lessons learned to apply to future environment design and development. © 2016 ACM.",Computer science principles; Music remixing; STEAM education,Computer aided instruction; Computer programming; Education computing; Computer Science Education; Content knowledge; Environment design; Evaluation design; High school; Learning environments; Music production; Music remixing; Engineering education
How do different cognitive styles affect learning programming? Insights from a game-based approach in Greek schools,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991106611&doi=10.1145%2f2940330&partnerID=40&md5=4ec45ededbc7847c3dbd3c70a2ea771a,"Is there any relationship between students' cognitive style and the ability to learn programming through serious games? The aim of this work is to assess the learning effectiveness and motivational appeal of digital games for learning basic programming concepts, involving secondary education students. For this purpose, the Code.org®'s activity named K-8 Intro to Computer Science was used. The study investigated students' attitudes from gaming activities to reveal the quality of their learning experience. Next, students' attitudes from games were correlated with their cognitive profile to reveal potential differences. Finally, students' performance from the digital games was assessed to reveal game-based learning (GBL) effectiveness compared to their cognitive styles. In the study, 77 students of two Greek high schools participated in the context of the European Code Week. The results suggest that these specific games, or similar educational computer games, can be exploited as effective and motivational learning environments within schools, as they provide a high-quality learning experience. Cognitive style was found to be a significant learning characteristic that should be taken into consideration when using digital games to learn programming. © 2016 ACM.",Cognitive style; CS education; Digital game-based learning; Hour of code; Secondary education,Computer aided instruction; E-learning; Education; Education computing; Interactive computer graphics; Societies and institutions; Students; Cognitive styles; CS education; Digital game-based learning; Educational computer game; Game-based approaches; Hour of code; Learning effectiveness; Learning environments; Computer games
Redesigning an object-oriented programming course,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046898762&doi=10.1145%2f2906362&partnerID=40&md5=c9fc9fe5a571d33aa5bfe35bb8e2b7c5,"Educational technology offers several potential benefits for programming education. Still, to facilitate the technology properly, integration into a course must be carefully designed. In this article, we present a redesign of an object-oriented university-level programming course. In the redesign, a collaborative education tool was utilized to enhance active learning, facilitate communication between students and teachers, and remodel the evaluation procedure by utilizing automatically assessed tasks. The redesign was based on the best practices found in our own earlier research and that of the research community, with a focus on facilitating active learning methods and student collaboration. The redesign was evaluated by comparing two instances of the redesigned course against two instances using the old methodology. The drop-out rate decreased statistically significantly in the redesigned course instances. Moreover, there was a trend toward higher grade averages in the redesigned instances. Based on the results, we can conclude that the utilization of educational technology has a highly positive effect on student performance. Still, making major changes to course methodology does not come without certain difficulties. Hence, we also present our experiences and suggestions for the course redesign to help other educators and researchers perform similar design changes. © 2016 ACM",And Phrases: Object-oriented programming; Course methodology; Course redesign; Programming education,Artificial intelligence; Curricula; Educational technology; Students; Active learning methods; Collaborative education; Course methodology; Course redesign; Programming education; Research communities; Student collaboration; Student performance; Object oriented programming
Evaluation of model driven architecture-based instruction for understanding phase transitions in object-oriented analysis and design,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84983762661&doi=10.1145%2f2914797&partnerID=40&md5=afab990df78ee3e168335a39cd994c58,"Object-Oriented Analysis and Design (OOAD) courses enable students to establish a requirements model of an application, successively transform those requirements into logical design models, and then transform the logical models into physical design models. However, students attending OOAD courses typically encounter difficulties in the transition. Model-Driven Architecture (MDA) provides a model transformation framework for transitioning between OOAD phases. Considering the advantages of MDA in phase transitions, this study proposes that integrating conventional OOAD instruction with the MDA framework and describing transition relations in diagrammatic representations might improve students' understanding of the transitions. This study used an empirical design that involved using two treatments (MDA-based and conventional instruction) to examine the relevance of MDA-based instruction in the effective understanding of the transitions on the basis of cognitive load theory, the split-attention principle, and theories of representation format. The results indicate that, compared with conventional instruction, MDA-based instruction is more efficient because it improves mental efficiency by reducing extraneous cognitive load. This study can assist educators in understanding the difficulties in learning phase transitions and motivate researchers to develop more effective learning instructions for transitioning between OOAD phases. © 2016 ACM.",Cognitive load theory; Model driven architecture; Object-oriented analysis and design; Phase transition; Representation format; Split-attention effect,Architecture; Curricula; Design; Education; Object oriented programming; Phase transitions; Software design; Students; Cognitive load theory; Model driven architectures; Object oriented analysis and design; Representation format; Split-attention effect; Software architecture
Undergraduate students' perceptions of the impact of pre-college computing activities on choices of major,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84975318158&doi=10.1145%2f2920214&partnerID=40&md5=22e9775a04d5719716fc1fb36a8b8e0e,"A lack of diversity in the computing field has existed for several decades, and although female participation in computing remains low, outreach programs attempting to address the situation are now quite numerous. To begin to understand whether or not these past activities have had long-term impact, we conducted a systematic literature review. Upon discovering that longitudinal studies were lacking, we investigated whether undergraduate students believed that their participation in computing activities prior to college contributed to their decision to major in a computing field. From the 770 participants in the study, we discovered that approximately 20% of males and 24% of females who were required to participate in computing activities chose a computing or related major, but that males perceived that the activity had a greater affect on their decision (20%) than females (6.9%). Females who participated in an outreach activity were more likely to major in computing. Compared with females who chose to major in computing, females who did not were less likely to indicate that the majority of students participating in activities were boys and that they were a welcome part of the groups. Results also showed that female participants who do not ultimately major in computing have a much stronger negative perception of the outreach activities than male participants who also chose a non-computing major. Although many computing outreach activities are designed to diversify computing, it may be the case that, overall, boys receive these activities more favorably than girls, although requiring participation yields approximately the same net positive impact. © 2016 ACM.",Computing outreach; Diversity; Education; Gender; Pipeline,Computer programming; Computer science; Education; Pipelines; Computing activity; Computing outreach; Diversity; Gender; Longitudinal study; Outreach activity; Systematic literature review; Undergraduate students; Students
Security Injections@Towson: Integrating secure coding into introductory computer science courses,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84975246077&doi=10.1145%2f2897441&partnerID=40&md5=a3ab8d17511d8095497cccc6927a850b,"Despite the critical societal importance of computer security, security is not well integrated into the undergraduate computing curriculum. Security classes and tracks treat security issues as separable topics as opposed to fundamental issues that pervade all aspects of software development. Recently, there has been an increasing focus on security as a cross-cutting concern across the computer science curriculum. The Security Injections@Towson project provides resources and effective strategies to incorporate secure coding in the early programming classes. We describe the development, assessment, and dissemination of more than 40 lab-based security injection modules designed to be injected into courses with minimal impact on the curriculum. We include assessment results from 1,135 students across five diverse institutions demonstrating that the security injections help students retain, comprehend, and apply secure coding concepts in the introductory programming courses. © 2016 ACM.",CS0; CS1; CS2; Secure coding; Security injections; Security integration,Codes (symbols); Curricula; Education; Security of data; Software design; Computer science curricula; Computing curricula; Cross-cutting concerns; Introductory computer science; Introductory programming course; Programming class; Secure coding; Security issues; Network security
Heuristic evaluation for novice programming systems,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84975266598&doi=10.1145%2f2872521&partnerID=40&md5=3efe30a7ef6ed384412498473bce6deb,"The past few years has seen a proliferation of novice programming tools. The availability of a large number of systems has made it difficult for many users to choose among them. Even for education researchers, comparing the relative quality of these tools, or judging their respective suitability for a given context, is hard in many instances. For designers of such systems, assessing the respective quality of competing design decisions can be equally difficult. Heuristic evaluation provides a practicalmethod of assessing the quality of alternatives in these situations and of identifying potential problems with existing systems for a given target group or context. Existing sets of heuristics, however, are not specific to the domain of novice programming and thus do not evaluate all aspects of interest to us in this specialised application domain. In this article, we propose a set of heuristics to be used in heuristic evaluations of novice programming systems. These heuristics have the potential to allow a useful assessment of the quality of a given system with lower cost than full formal user studies and greater precision than the use of existing sets of heuristics. The heuristics are described and discussed in detail. We present an evaluation of the effectiveness of the heuristics that suggests that the new set of heuristics provides additional useful information to designers not obtained with existing heuristics sets. © 2016 ACM.",HCI; Heuristic evaluation; Introductory programming tools,Heuristic programming; Human computer interaction; Competing designs; Existing systems; Heuristic evaluation; Introductory programming; Novice programming; Potential problems; Relative qualities; Target group; Quality control
Assessing problem-based learning in a software engineering curriculum using Bloom's Taxonomy and the IEEE software engineering body of knowledge,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84973300216&doi=10.1145%2f2845091&partnerID=40&md5=490955060738fccbbbf34ef33847ab07,"Problem-Based Learning (PBL) has often been seen as an all-or-nothing approach, difficult to apply in traditional curricula based on traditional lectured courses with exercise and lab sessions. Aalborg University has since its creation in 1974 practiced PBL in all subjects, including computer science and software engineering, following a model that has become known as the Aalborg Model. Following a strategic decision in 2009, the Aalborg Model has been reshaped. We first report on the software engineering program as it was in the old Aalborg Model. We analyze the programme wrt competence levels according to Bloom's taxonomy and compare it with the expected skills and competencies for an engineer passing a general software engineering 4-year program with an additional 4 years of experience as defined in the IEEE Software Engineering Body of Knowledge (SWEBOK) [Abran et al. 2004]. We also compare with the Graduate Software Engineering 2009 Curriculum Guidelines for Graduate Degree Programmes in Software Engineering (GSwE2009) [Pyster 2009]. We then describe the new curriculum and draw some preliminary conclusions based on analyzing the curriculum according to Bloom's taxonomy and the results of running the program for 2 years. As the new program is structured to be compliant with the Bologna Process and thus presents all activities in multipla of 5 European Credit Transfer System points, we envision that elements of the program could be used in more traditional curricula. This should be especially easy for programs also complying with the Bologna Process. © 2016 ACM.",Curriculum development; Problem-based learning; Software engineering education,Blooms (metal); Curricula; Education; Software engineering; Taxonomies; Computer science and software engineerings; Curriculum development; Curriculum guidelines; European credit transfer systems; Problem based learning; Software engineering body of knowledge; Software engineering curricula; Software engineering programs; Engineering education
Gender and performance in computer science,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84973359616&doi=10.1145%2f2920173&partnerID=40&md5=20cc66511d027d0d813d22fa9bacd515,"The term gender gap refers to the significant under representation of females in many subjects. In Computer Science, the gender gap exists at all career levels. In this article, we study whether there is a performance gap in addition to the gender gap. To answer this question, we analyzed statistical data on student performance in Computer Science from 129 universities in the United Kingdom covering the years 2002 to 2013. We find that male students were awarded significantly more first-class degrees than female students. We evaluate four other subjects-Subjects Allied to Medicine, Business & Administrative Studies, Mathematical Sciences, and Engineering & Technology-and find that they do not exhibit this performance gap. From this finding, we review explanations for the gender and performance gaps, as well as potential solutions to eliminate the gaps. Most solutions do not require major institutional change and could thus be implemented easily. © 2016 ACM.",Gender gap; Performance gap,Students; Female students; Gender gap; Institutional change; Mathematical science; Performance gaps; Statistical datas; Student performance; United kingdom; Social sciences
Using a real bare machine in a project-based learning environment for teaching computer structure: An analysis of the implementation following the action research model,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84973333894&doi=10.1145%2f2891415&partnerID=40&md5=0a780cb72225a8c7abeda5be47822453,"The computer input/output (I/O) subsystem and its functioning are very abstract concepts that are difficult for undergraduate freshmen to understand. However, it is important that freshmen assimilate these lowlevel concepts if they are going to be taught about the operating systems (OS) working over that architecture layer, or working directly with them in embedded systems, real-time systems, or in the area of human computer interaction (HCI). This article describes the use of a game console (Nintendo® DS, NDS) in a project-based learning (PBL or PjBL) environment in which the design of a game is the basis of the project in order to encourage the students to get more involved with the computer I/O subsystem abstraction. A 4yr experience is reported in which the action research model (planning, acting, observing, and reflecting) has been followed. The general procedure for the 4yr and the specific characteristics and achieved results for each year are reported. The aim of the study was twofold: to assess the learning effectiveness of the active PjBL educational approach and some related factors, and to analyze the motivation toward the subject fostered by the game console. The first aim is analyzed using the scores achieved by the students; the second aim is analyzed via satisfaction questionnaires. © 2016 ACM.",Cooperative/collaborative learning; Improving classroom teaching; Interactive learning environments; Pedagogical issues; Teaching/learning strategies,Abstracting; Computer aided instruction; Computer games; Education; Embedded systems; Human computer interaction; Interactive computer systems; Real time systems; Students; Surveys; Teaching; Cooperative/collaborative learning; Improving classroom teaching; Interactive learning environment; Pedagogical issues; Teaching/learning strategy; Computer operating systems
Learning computer science: Dimensions of variation within what Chinese students learn,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84973320246&doi=10.1145%2f2853199&partnerID=40&md5=cb5de914c0afe50bbfdadcea2d285253,"We know from research that there is an intimate relationship between student learning and the context of learning. What is not known or understood well enough is the relationship of the students' background and previous studies to the understanding and learning of the subject area-here, computer science (CS). To show the contextual influences on learning CS, we present empirical data from a qualitative investigation of the experiences of Chinese students studying for a master degree at Sweden's Uppsala University. Data were collected of the students' understanding and learning of CS, their experience of the teaching and their own studies, and of their personal development in Sweden. Using an analysis framework grounded in phenomenography, we analytically separated the what and how aspects of learning. In this article, we describe the what, or the content of the students' learning, and identify dimensions of variation in the experiences of students. These dimensions relate to the foci of the CS programs, the learning outcomes, and the impact of the studies. The findings from the analyses indicate pedagogical and pragmatic implications for teaching and learning CS in higher education institutions. The study extends the traditional use of phenomenography through the discussion of the dimensions of variation in the experiences and the values within the dimensions. It opens the way for understanding the relational nature of learning in computing education. © 2016 ACM.",Computer science education; Context; Phenomenography; Qualitative research; Variation theory,Computation theory; Education; Education computing; Students; Teaching; Computer Science Education; Context; Phenomenography; Qualitative research; Variation theories; Engineering education
Interdisciplinary projects in the academic studio,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051208824&doi=10.1145%2f2732157&partnerID=40&md5=ffcd7370ebb6ed78c2865bedf47939b4,"We define and describe the academic studio model for interdisciplinary, undergraduate, project-oriented education. This model brings faculty, students, and community partners together to investigate an open-ended academic question, and their collaboration yields an original product that represents their inquiry. The academic studio integrates agile software development practice, project-oriented pedagogy, and sociocultural cognition theories. Scrum provides the framework in which self-organizing, cross-functional teams define their methodology, and Scrum practices facilitate assessment of student learning outcomes. This model emerged from design-based research across six studio instances, each of which investigated the relationship of fun, games, and learning through the development of educational video games. Formal and informal analysis of these instances gives rise to several themes, including the importance of a formalized process to encourage learning and productivity, the critical role of an expert faculty mentor, the need to combine academic and industrial practice to manage the inherent challenges of collaborative software development, and the unique characteristics of learning outcomes arising from this model. We conclude that the academic studio model is beneficial to student learning and faculty development, and we encourage the adoption, adaptation, and evaluation of the model. © 2016 ACM",And Phrases: Higher education; Computer science education; Design-based research; Interdisciplinary education; Project-based learning; Scrum; Sociocultural cognition theory,Formal methods; Groupware; Software design; Students; Studios; Computer Science Education; Design-based research; Higher education; Interdisciplinary education; Project based learning; Scrum; Sociocultural cognition theory; Education computing
Measuring and understanding team development by capturing self-assessed enthusiasm and skill levels,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989216896&doi=10.1145%2f2791394&partnerID=40&md5=4e3e1ca7254ef8209c5a4fd68521e5d4,"To prepare graduates for today’s work environment, they must be immersed in positive (and perhaps negative) small group experiences in their courses, which will in turn provide a basic understanding of how teams form and develop over time. In the fall of 2009, we started exploring how software development teams form and interact in a computer science college capstone course setting. Our initial findings were presented at ICER 2010 in Aarhus, Denmark. The focus of our research was on the experiences of computer science college course teams as compared and contrasted to the theory of Bruce Tuckman’s stages of small group development model, which he characterized as forming, storming, norming, performing, and adjourning. We continued data collection with the computer science capstone course in the fall of 2010 and added an information systems capstone course as well. At the conclusion of the spring 2014 semester, we have collected and analyzed data for a total of 5 academic years from nine cohorts of students taught by five instructors involving 215 students on 51 teams. Each year, participants repeatedly self-assessed their enthusiasm and skill levels over time using a questionnaire by agreeing or disagreeing to statements. The data shows patterns similar to that of Tuckman’s model. Since most people find Tuckman’s model easy to understand, it may provide an effective tool to teach teamwork and monitor team development. In addition to briefly presenting our empirical findings in this article, we provide a simple conceptualization of Tuckman’s model that can be captured in two data points: enthusiasm and skill level. By comparing changes in these two dimensions over time, team development can be tracked through the various Tuckman stages of small group development. We also provide a minicurriculum which can be used to introduce students to Tuckman’s model and provide them insight into what leadership style works best in each of the development stages. © 2016 ACM.",Education; Enthusiasm; Enthusiasm and skill; Group; Skill; Skill and enthusiasm; Small group development; Small group development model; Team; Team development; Team development model; Teamwork; Tuckman,Education; Education computing; Software design; Students; Enthusiasm; Enthusiasm and skill; Group; Group development; Skill; Skill and enthusiasm; Team; Team development; Teamwork; Tuckman; Curricula
Team projects in computing education,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040670925&doi=10.1145%2f2808192&partnerID=40&md5=ff47b3621bc2084bf121c712011fbd5c,"Team projects are a way to expose students to conflicting project objectives, and “[t]here should be a strong real-world element . . . to ensure that the experience is realistic” [ACM/IEEE-CS 2015b]. Team projects provide an opportunity for students to put their education into practice and prepare them for their professional careers. The aim of this special issue, and the previous one, is to collect and share evidence about the state of practice of team projects in computing education and to help educators in designing and running team projects. The articles presented in the present issue cover the following topics: real projects for real clients, open source projects, multidisciplinary team projects, student and team assessment, and cognitive and psychological aspects of team projects. 2016 Copyright is held by the owner/author(s).",Team projects,Employment; Computing education; Multi-disciplinary teams; Open source projects; Professional careers; Project objectives; Psychological Aspects; State of practice; Team projects; Students
A method to analyze computer science students' teamwork in online collaborative learning environments,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959291041&doi=10.1145%2f2793507&partnerID=40&md5=95e1a083d5fa1a0cbc5beaff2a3803b3,"Although teamwork has been identified as an essential skill for Computer Science (CS) graduates, these skills are identified as lacking by industry employers, which suggests a need for more proactive measures to teach and assess teamwork. In one CS course, students worked in teams to create a wiki solution to problem-based questions. Through a case-study approach, we test a developed teamwork framework, using manual content analysis and sentiment analysis, to determine if the framework can provide insight into students' teamwork behavior and to determine if the wiki task encouraged students to collaborate, share knowledge, and selfadopt teamwork roles. Analysis revealed the identification of both active and cohesive teams, disengaged students, and particular roles and behaviors that were lacking. Furthermore, sentiment analysis revealed that teamsmoved through positive and negative emotions over the course of developing their solution, toward satisfaction. The findings demonstrate the value of the detailed analysis of online teamwork. However, we propose the need for automated measures that provide real-time feedback to assist educators in the fair and efficient assessment of teamwork. We present a prototype system and recommendations, based on our analysis, for automated teamwork analysis tools. © 2016 ACM.",Problem-based learning; Teamwork,Computer aided instruction; Curricula; Data mining; Education; Students; Teaching; Case study approach; Computer science students; Online collaborative learning; Positive and negative emotions; Proactive measures; Problem based learning; Real-time feedback; Teamwork; Engineering education
Exploration of participation in student software engineering teams,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959285134&doi=10.1145%2f2791396&partnerID=40&md5=4a21365dca40c1269977fc649d42b38b,"Employers require software engineers to work in teams when developing software systems. It is therefore important for graduates to have experienced teamwork before they enter the job market. We describe an experiential learning exercise that we designed to teach the software engineering process in conjunction with teamwork skills. The underlying teaching strategy applied in the exercise maximises risks in order to provide maximal experiential learning opportunities. The students are expected to work in fairly large, yet short-lived, instructor-assigned teams to complete software engineering tasks. After undergoing the exercise our students form self-selected teams for their capstone projects. In this article, we determine and report on the influence the teaching exercise had on the formation of teams for the capstone project. By analysing data provided by the students through regular peer reviews we gain insight into the team dynamics as well as to what extent the members contributed to the team effort. We develop and present a graphical model of a capstone project team which highlights participation of individuals during the teaching exercise. The participatory history of the members is visualised using segmented concentric rings. We consider how this visualisation can aid the identification of capstone project teams that are at risk. In our experience the composition of the team and the behaviour of other members in the team may have a marked impact on the behaviour of each individual in the team. We established a team classification in order to model information about teams. We use a statistical clustering method to classify teams. For this we use team profiles that are based on the participatory levels of its members. The team types that emerge from the clustering are used to derive migration models. When we consider migration, we build spring models to visualise the teams through which individuals migrate. We colour code the teams to characterise them according to the team types that were identified during the cluster classification of the teams. Owing to the complexity of the resulting model, only migrations for capstone team members who have worked together during the exercise or for solitary capstone team members are modelled. These models support the identification of areas of interest that warrant further investigation. To conclude, we present our observations from the analysis of team compositions, team types, and team migrations and provide directions for future work and collaborations. © 2016 ACM.",Soft skills; Software engineering; Teaching teamwork; Team formation; Team management,Classification (of information); Cluster analysis; Software engineering; Students; Experiential learning; Model informations; Soft skills; Software engineering process; Statistical clustering; Teaching strategy; Team formation; Team management; Human resource management
Translating principles of effective feedback for students into the CS1 context,2016,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964788332&doi=10.1145%2f2737596&partnerID=40&md5=29859e97b75f2b6a4531249249e51e87,"Learning the first programming language is challenging for many students. High failure rates and bimodally distributed grades lead to a pedagogical interest in supporting students in first-year programming courses (CS1). In higher education, the important role of feedback for guiding the learning process and improving the learning outcome is widely acknowledged. This article introduces contemporary models of effective feedback practice as found in the higher education literature and offers an interpretation of those in the CS1 context. One particular CS1 course and typical course components are investigated to identify likely loci for feedback interventions and to connect related computer science education literature to these forms of feedback. © 2016 2016 Copyright is held by the owner/author(s). Publication rights licensed to ACM.",CS1; Effective feedback practice; Higher education,Education; Students; Teaching; Computer Science Education; Contemporary models; Effective feedback practice; Feedback interventions; First year programming; Higher education; Learning outcome; Learning process; Education computing
"Debugging Pathways: Open-Ended Discrepancy Noticing, Causal Reasoning, and Intervening",2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85189959963&doi=10.1145%2f3650115&partnerID=40&md5=1d0a48f9aee62e1375adb992bee85da4,"Learning to respond to a computer program that is not working as intended is often characterized as finding a singular bug causing a singular problem. This framing underemphasizes the wide range of ways that students and teachers could notice discrepancies from their intention, propose causes of those discrepancies, and implement interventions. Weaving together a synthesis of the existing research literature with new multimodal interaction analyses of teacher-student conversations during coding, we propose a framework for debugging that foregrounds this open-endedness. We use the framework to structure an analysis of three naturalistic debugging situations (with US 5th-10th graders) that range from solo debugging to collaborative discourse. We argue that a broken computer program is a polysemous object through which teachers and students actively and publicly notice, reason about, and negotiate different debugging pathways. We document students and teachers improvisationally altering a debugging pathway, justifying a particular pathway, and outwardly discussing competing pathways. This paper provides a framework for structuring debugging pedagogy to be less about scaffolding a student toward a specific pathway to a fix and more about exploring multiple possible pathways and judging the (learning) value of various routes.  © 2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Additional Key Words and PhrasesDebugging; causal reasoning; CS education; interaction analysis,Education computing; Program debugging; Scaffolds; Additional key word and phrasesdebugging; Causal reasoning; CS education; Interaction analysis; Key words; Multimodal Interaction; Singular problem; Teachers'; Students
Introduction to the Special Issue on Situating the Intersectional Experiences of Black Girls and Women in Computing & Technology,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192905018&doi=10.1145%2f3648478&partnerID=40&md5=ba8b0c15835425e8046ad515c8a96f74,"This special issue builds on and expands computing’s engagement with Black feminist epistemologies like Intersectionality and Black Feminist Thought, exploring the intersectional experiences of Black girls and women in computing, technology, and computing education and workforce. The set of articles examines, explores, and uncovers structural and systemic barriers in computing, CS education, and technology; the roles of social supports and social capital in ensuring Black women thrive; quantitative, qualitative, and mixed methods approaches that center Black girls and women instead of making them comparative groups to white or other people of color of all genders; and issues around equity and inclusivity in computing, CS education, and technology more broadly. Taken together, this collection serves as a model for centering one community often marginalized in computing, technology, and computing education: Black girls and women. © 2024 Copyright held by the owner/author(s).",,Education computing; Computing education; Computing technology; Computing workforce; CS education; Feminist epistemology; Social capitals; Social support; Technology education; Women in computing; Women in technologies; Engineering education
Professional Development in Computational Thinking: A Systematic Literature Review,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192886033&doi=10.1145%2f3648477&partnerID=40&md5=a0606d9f7eaf263082a12dfdb99541ea,"This paper presents a systematic literature review of professional development programs in computational thinking (CT). CT has emerged as an essential set of skills that everyone should develop to participate in a global society. However, there were no pre-service or in-service teacher programs to integrate CT into the K–12 classrooms until very recently. Thus, it is important to identify how educators and researchers address the challenges to prepare the next generation of students and what gaps persist in the current literature. We review existing work in this field from two perspectives: First, we analyze the learning outcomes, assessment methods, pedagogical approaches, and pedagogical tools used in the professional development programs in CT. Second, we examine how these programs assess the teachers’ knowledge and skills as outcomes. We used the technological pedagogical and content knowledge (TPACK) framework to characterize existing literature and identify possible gaps in the preparation of pre-service and in-service teachers in CT. Our results suggest that (1) existing evidence is limited to developed countries; (2) many studies are only focusing on teachers understanding the concepts but do not explore how the participants evaluate or create learning activities; (3) no studies look into classroom observations as part of the program, which limits our understanding to how these programs work; and (4) most programs use block-based programming languages as the tool to develop student CT. While block-based programming languages are used for introductory training programs, students are often expected to transfer their learning to more professional programming languages. © 2024 Copyright held by the owner/author(s).",Computational thinking; literature review; professional development,Professional aspects; 'current; Block based; Computational thinkings; Global society; Learning outcomes assessments; Literature reviews; Professional development; Professional development programme; Systematic literature review; Teachers'; Students
Outsiders Within: How Do Black Girls Fit into Computer Science for All?,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192905057&doi=10.1145%2f3633464&partnerID=40&md5=76e089481427b8407d18486afbc918f9,"Objectives. At the K–12 level, “CS for All” initiatives across the country strive to increase equitable access to and participation in computer science (CS). However, there are many open questions about the implementation and effectiveness of these initiatives, including the extent to which exposing young people to CS early on can shape their longer-term CS interest and engagement. In this article, we examine CS participation among 6th–8th-grade Black girls and assess whether CS participation during middle school shapes CS interest and engagement during their first year of high school. We focus on Black girls in the hopes of developing a more nuanced and rigorous understanding of computing experiences at the intersection of racism and sexism in this field. Participants. The focal group of students in this study are 6th–8th-grade Black girls from New York City. We employ a comparative lens in this article, contextualizing the CS experiences and outcomes of Black girls to Latinas, Asian, and White girls, as well as Black boys. Study Method. We primarily rely on quantitative data for this article, applying a critical lens to our analyses and interpretation. More specifically, we conduct descriptive analyses of course-taking patterns as well as survey data that focus on student attitudes and beliefs about CS. We then carry out inferential analyses of students’ administrative records examining how, if at all, middle school CS participation is related to high school outcomes for Black girls. We employ a comparative lens and rely on qualitative data to make sense of our results. Findings. We find that, troublingly, Black girls in the district are disproportionately less likely to receive CS instruction in middle school. Black girls are also less likely than Black boys, Latinas, and White girls to feel that they belong in CS. However, Black girls in CS courses report similar levels of engagement, family, and peer support, as well as value for CS relative to other students in the district. Finally, we find that participation in CS courses in middle school does not increase the likelihood that Black girls will select high schools that offer CS courses or take a CS course during their first year of high school. Conclusions. Our findings suggest that to increase equitable access and participation in CS, it is not enough to simply expose students to CS coursework. We call for sustained attention to the experiences that Black girls have in their CS classes as well as broader structural barriers that might shape CS course-taking. © 2024 Association for Computing Machinery.",CS for All; Equity,Curricula; Education computing; Computer Science course; Computer science for all; Equitable access; Equity; First year; Higher School; Middle school; New York city; Study methods; Young peoples; Students
The Important Role Social Capital Plays in Navigating the Computing Education Ecosystem for Black Girls,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192912805&doi=10.1145%2f3632295&partnerID=40&md5=8c480de116f49f52adca176231bd674d,"Black women represent the greatest underrepresentation in STEM fields, particularly the technology sector. According to a 2015 article in The Verge, Black women make up between 0% and 7% of the staff at the eight largest technology firms in the United States. This points to a glaring problem in terms of equity and inclusivity in the technology sector. Similar to their underrepresentation in the STEM sector, Black women’s underrepresentation in the tech sector is related to pervasive and persistent prejudice and biased policies that endure in the United States, which have limited—and continue to limit—their access to quality education and spaces where Black women’s cultural capital (i.e., ways of being) is acknowledged and appreciated. For most people, including Black women, social networks often make available opportunities and pathways toward realizing the roles they can play in the world or a particular industry. These webs of relationships and the embedded quality in them can be defined as an individual’s social capital and be applied to any industry, including STEM and technology fields. In a practical sense, social capital allows an individual to leverage relationships for resources (e.g., information about internships and jobs or encouragement to persist through a difficult college course). In turn, these resources can contribute to economic opportunities (i.e., jobs) or social opportunities, such as relationships with gatekeepers who work in STEM fields that may lead to opportunities like jobs, projects, or financial backing. Research suggests that the social networks of Black young women rarely overlap with the networks of predominantly White and Asian males, who are overrepresented in the technology field. This weakens Black women’s awareness of opportunities and training, and undermines their motivation to persist in the STEM sector. As a result of this increasing understanding of the role of social capital in career development, K–12 and higher education programs that are focused on equity in STEM fields have increasingly turned to the concept of social capital to address the traditional underrepresentation of certain groups, particularly Blacks, Latinos, and women in STEM fields. The following research investigates the experiences of Black girls who attended a program, Google’s Code Next, designed to engage Black and Latinx youth in computer science. We argue that it is crucial for computer science programs not just to teach hard coding skills but also to build on young Black women’s social capital to accommodate the young women in creating and expanding their tech social capital, enabling them to successfully navigate STEM and technology education and career pathways. Specifically, this article explores a subprogram of Code Next and how it has contributed to young Black women’s persistence in STEM, and particularly in technology. The findings suggest that the young women employed an expanded sense of social capital in addition to an expanded cultural capital (i.e., language, skills, ways of being) and worldview (i.e., sense of belonging and self-efficacy) to make sense of their possible selves in the world of technology. © 2024 Copyright held by the owner/author(s).",black girls in computer science; computer science education; Computer science underrepresentation; cultural capital; cultural diversity in computer science; inclusive computer science education; informal education; intersectionality in computer science; intersectionality in STEM; program evaluation; racial equity in computer science; social capital; STEM; STEM persistence; tech identities; tech social capital; tech social networks; workforce development,Economic and social effects; Employment; Engineering education; Social networking (online); Social sciences computing; Black girl in computer science; Computer Science Education; Computer science underrepresentation; Cultural capital; Cultural diversity; Cultural diversity in computer science; Inclusive computer science education; Informal educations; Intersectionality in computer science; Intersectionality in STEM; Program evaluation; Racial equity in computer science; Social capitals; STEM; STEM persistence; Tech identity; Tech social capital; Tech social network; Workforce development; Education computing
How Do First-Year Engineering Students’ Emotions Change while Working on Programming Problems?,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192896680&doi=10.1145%2f3643865&partnerID=40&md5=f7a2e5cc01fcdeb4042aafac5a05e055,"Emotions are a complex multi-faceted phenomenon. To assess the complexity of emotions from different facets, multi-modal approaches are necessary. However, multi-modal approaches are rarely used for assessing emotions, especially in the context of computer programming. This study adopts a multi-modal approach to understand the changes in students’ perception of emotions before and after working on programming problems. Understanding these changes in students’ perceptions may enable educators to devise interventions that help students adjust their perceptions and regulate their emotions as per their skills. We conducted a one-on-one programming session and retrospective think-aloud interview with 17 students from an introductory programming course. During the programming session, students filled surveys and performed four programming tasks. While working on these tasks, students’ eye gaze, video of face and screen, and electrodermal activity data were also collected using a non-invasive device. The data collection for this study was multi-modal, with a mix of both qualitative and quantitative data collection methods. Data analysis was primarily qualitative, with additional triangulation of qualitative and biometric data for select exemplars. The findings of this study suggest that students experience changes in emotions because of many reasons, for instance, they encountered repeated errors, they set high standards for their performance, or they could not manage time. For some students, negative emotions changed to positive emotions when they solved errors without any external help or achieved more than what they expected going into the task. Moreover, the triangulation of qualitative and biometric data of two participants provides a fine-grained analysis of their emotions and behaviors and confirmed the change in the perception of their emotions while performing the programming tasks. © 2024 Copyright held by the owner/author(s).",Emotions; multi-modal data; programming,Behavioral research; Biometrics; Computer programming; Data acquisition; Modal analysis; Triangulation; Biometric data; Emotion; First-year engineering; Multi-modal approach; Multi-modal data; Programming; Programming problem; Programming tasks; Qualitative data; Student perceptions; Students
"Contextualization, Authenticity, and the Problem Description Effect",2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192929979&doi=10.1145%2f3643864&partnerID=40&md5=c04b3a59e5a782f5252c8c415c52c6c1,"In recent years, computing education researchers have investigated the impact of problem context on students’ learning and programming performance. This work continues the investigation motivated, in part, by cognitive load theory and educational research in computer science and other disciplines. The results of this study could help inform computing assessment design. If the context and authenticity of a programming problem aid student performance then, instructors’ time in creating appropriately contextualized programming problem descriptions is time well-spent. On the other hand, if the context of a programming problem hinders performance, then instructors should leave it out of programming problems. Recent studies investigating the impact of programming problem context on student success have arrived at different conclusions. Presented here is a series of experiments, conducted over 3 years, investigating the impact of context on novice programmers’ success in algorithmic programming assignments using three contextualized tasks and their generic counterparts. This experiment series also looked into the possibility of “authenticity” as a factor affecting performance. Common sense would suggest that a student would perform better on a problem if they understood or cared about it. Contextualization could provide authenticity and authenticity could provide interest. Research suggests that perceiving a problem as authentic has a positive effect on engagement and learning. Alternatively, if a problem is “just an abstract set of numbers”, it may be harder to make sense of the details and the lack of context could consequently contribute additional cognitive load to an already challenging assignment. The results of this study show that assignment context and problem context authenticity have no effect on the performance of novice programmers. We think, however, that contextualization could be worth investing in to support students’ interest in computing. Additional implications of the results suggest that instructors can assign equivalent versions of the same problem in varied contexts to suit their students’ interests without worrying if the context will hinder performance. © 2024 Copyright held by the owner/author(s).",authenticity; Computer science education; contextualization; CS1; novice programmers,Authentication; Computation theory; Education computing; Engineering education; Authenticity; Computer Science Education; Computing education; Contextualization; Novice programmer; Performance; Problem description; Programming problem; Student learning; Students' interests; Students
Retaining Black Women in Computing: A Comparative Analysis of Interventions for Computing Persistence,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192944637&doi=10.1145%2f3635313&partnerID=40&md5=a26fb25041ad9017cf61089ea48ff8a4,"Black women remain severely underrepresented in computing despite ongoing efforts to diversify the field. Given that Black women exist at the intersection of both racial and gendered identities, tailored approaches are necessary to address the unique barriers Black women face in computing. However, it is difficult to quantitatively evaluate the efficacy of interventions designed to retain Black women in computing, since samples of computing students typically contain too few Black women for robust statistical analysis. Using about a decade of student survey responses from an National Science Foundation–funded Broadening Participation in Computing alliance, we use regression analyses to quantitatively examine the connection between different types of interventions and Black women’s intentions to persist in computing and how this compares to other students (specifically, Black men, white women, and white men). This comparison allows us to quantitatively explore how Black women’s needs are both distinct from—and similar to—other students. We find that career awareness and faculty mentorship are the two interventions that have a statistically significant, positive correlation with Black women’s computing persistence intentions. No evidence was found that increasing confidence or developing skills/knowledge was correlated with Black women’s computing persistence intentions, which we posit is because Black women must be highly committed and confident to pursue computing in college. Last, our results suggest that many efforts to increase the number of women in computing are focused on meeting the needs of white women. While further analyses are needed to fully understand the impact of complex intersectional identities in computing, this large-scale quantitative analysis contributes to our understanding of the nuances of Black women’s needs in computing. © 2024 Copyright held by the owner/author(s).",,Education computing; Regression analysis; Broadening participation in computing; Comparative analyzes; Large-scales; National Science Foundations; Positive correlations; Robust statistical analysis; Student surveys; Women in computing; Students
A Realist Review of Undergraduate Student Attitudes towards Ethical Interventions in Technical Computing Courses,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192920509&doi=10.1145%2f3639572&partnerID=40&md5=bd545801ca958c918024f5f5118896da,"As computing educators begin to recognize that their students need strong ethical foundations, there is a growing interest to integrate meaningful ethics education into undergraduate computing curricula. To achieve this, it is crucial to understand how students respond to ethical interventions in the classroom. This review examines the acceptance of ethical interventions in undergraduate computing courses, using the realist synthesis method to identify and refine underlying theories of student acceptance, and refine them through available studies. Four theories were identified in a synthesis of 13 reports, providing insight into what may improve student attitudes towards ethical interventions in which contexts and under which circumstances. The findings of this realist review offer guidance to intervention designers, researchers, and educators seeking to meaningfully engage students with ethics in computing education. © 2024 Copyright held by the owner/author(s).",Computing ethics; ethics education; ethics integration; ethics interventions; realist review,Computation theory; Curricula; Philosophical aspects; Computing course; Computing curricula; Computing ethic; Ethic integration; Ethic intervention; Ethics education; Realist review; Student attitudes; Technical computing; Undergraduate students; Students
An Examination of Black Undergraduate Women’s Intersectional Experiences and Academic Motivation in Computing Education,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192914187&doi=10.1145%2f3635314&partnerID=40&md5=e9ae8d9e528666118fd115f4a539bc46,"Objectives. We aim to understand, from a motivational perspective, how Black undergraduate women in computing make sense of their intersectional computing experiences. We examine their motivation to major in computing, their experiences as Black women in computing, and how these vary across institutional contexts. Participants. A sample of 77 Black undergraduate women in computing programs (computer science, computer engineering, information systems, information technology, and software engineering) from diverse college settings was recruited to participate in the study. Study Method. Participants responded to an online survey that included several Likert-scale measures for identity, motivation and retention variables, demographic questions, and two open-ended questions: Why did you choose to study computing? and What is it like for you to be a Black female student in computing? Findings. Key themes that emerged from our quantitative and qualitative analyses revealed the range of motivational factors driving Black undergraduate women to study computing and the nuances across their intersectional experiences in the computing education context. Additionally, Black undergraduate women located in HBCU computing education contexts demonstrated both similar and unique perspectives and experiences compared to their counterparts in non-HBCU settings. Conclusions. In addition to the isolation, pressure, power dynamics and epistemic violence experienced by Black women in the intersectional computing education context, the findings of this study display the unique cultural-social-psychological strengths of Black women in their positive valence and resilience, as well as their joy, empowerment, and achievement in computing. Increasing and complicating our knowledge of the motivations and intersectional experiences of Black women in undergraduate computing education, as well as understanding when and how their beliefs and perspectives vary across institutional context, will better inform efforts to retain them and promote their success both in college and into their careers. © 2024 Copyright held by the owner/author(s).",academic motivation; Black undergraduate women; computing education; intersectionality; retention intention,Engineering education; Professional aspects; Software engineering; Students; Academic motivations; Black undergraduate woman; Computer engineering; Computing education; Computing programmes; Institutional contexts; Intersectionality; Retention intention; Undergraduate women; Women in computing; Motivation
CS=Me: Exploring Factors that Shape Black Women’s CS Identity at the Intersections of Race and Gender,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85189372337&doi=10.1145%2f3631715&partnerID=40&md5=22bc23324f3847282c9482d029c6672f,"Improving equity and inclusion for underrepresented groups in the field of Computer Science (CS) has garnered much attention. In particular, there is a long-standing need for diversity efforts that center on the experiences of Black women, and specific actions to increase their representation—especially given the biases that they often encounter in the field. There is limited research concerning Black women in CS, specifically their conceptions of the field and their overarching CS identity development. More research in this area is especially important given the marginalization that Black women often experience at the intersections of their race and gender. Guided by a combination of critical theoretical lenses, this qualitative study examines Black women’s conceptions of what it means to be a computer scientist and the degree to which those conceptions map onto how they see themselves in the field. Moreover, we explore experiences that help to bolster Black women’s CS identity. The findings highlight key aspects of what it means to be a computer scientist for the Black women in this study—notably the ability to use computing to make societal contributions. Also, the results accentuate key nuances in the participants’ personal CS identification, particularly as it relates to the resilience required to overcome unique barriers that many Black women encounter when engaging within the field. Moreover, the findings highlight the importance of social support systems to facilitate Black women’s CS identity development. Implications for policy and practice within education and industry are discussed. © 2024 Copyright held by the owner/author(s).",Black women; computer science identity; intersectionality; role strain and adaptation,Black woman; Computer science identity; Computer scientists; Intersectionality; Marginalization; Qualitative study; Role strain and adaptation; Social support; Support systems; Under-represented groups; Education computing
Are Professional Skills Learnable? Beliefs and Expectations Among Computing Graduates,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192876890&doi=10.1145%2f3641551&partnerID=40&md5=a3f43971a829e813a8070fd23a4b51b1,"Integrating graduate education with professional skills development is still a challenge. People’s beliefs about learning impact their learning processes. Therefore, we need to understand the mindset of graduates to determine best practices for promoting professional skills development. In this study, we explore the perspective of computing graduates within an Engineering educational program. This study aims to answer the following research questions: Which skills do computing graduates perceive they need in the workplace, and how do they position themselves regarding these skills? What learning beliefs do computing graduates hold regarding the skills required in the workplace? The research team conducted semistructured interviews with computing graduates within an Engineering program to analyze their experiences. The interviews were analyzed using grounded theory. As a result, the participants viewed professional and technical skills as independent, with professional skills perceived as more relevant to work success. The participants considered themselves to possess these skills. Our findings identify four learning beliefs within a fixed and growth mindset: (1) An essential personal characteristic that context may influence; (2) a learning outcome determined by early experiences; (3) a learning process associated with informal learning experiences; and (4) a learning process associated with formal learning experiences. We acknowledge the differences in perception between alums and the industry regarding possessing essential professional skills. We also highlight the need to position these skills as learnable during lectures contributing to Computing and Engineering Education. © 2024 Copyright held by the owner/author(s). Publication rights licensed to ACM.",computing education; Computing graduates; mindsets; professional skills; workplace,Computation theory; Engineering research; Learning systems; Professional aspects; Computing education; Computing graduate; Graduate education; Is professionals; Learning experiences; Learning process; Mindset; Professional skills; Skills development; Workplace; Engineering education
Mirror Mentoring: Black Women’s Experiences Serving as Mentors for Black Girls During a Virtual Computer Science Camp,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85192878323&doi=10.1145%2f3634684&partnerID=40&md5=b06500a327daa219ecb501f1c0b81d3e,"Several studies have reported the positive benefits of informal Computer Science learning programs for Black girls, which include staff, mentors, and peers reflective of the girls in the program; however, we do not know enough about what motivates Black women to sign up to teach in such programs, or how representation in mentoring affects future CS learning for Black girls. Here we report the intersectional experiences of 11 Black women who served as instructors and mentors for the virtual INTech Summer Camp. The women in this study confirm that it is imperative to consider the intersectional experiences of Black women in CS as a whole, without explicating their identities. We found that Black women in CS feel that it is their responsibility to give back to Black girls to pay it forward from their own mentorship experiences. The Black women in our study describe seeking to fill a gap in mentorship that they experienced themselves, to share their knowledge and experiences to support the development of others who can relate to that intersection of identifying as Black and a girl or woman. Providing positive representation to encourage young Black girls to pursue tech careers is imperative to diversifying the tech workforce. © 2024 Copyright held by the owner/author(s).",Broadening participation in computing; intersectional computing; mentorship,Engineering education; Broadening participation in computing; Intersectional computing; Knowledge and experience; Learning projects; Mentorship; Science learning; Summer camp; Education computing
Co-ML: Collaborative Machine Learning Model Building for Developing Dataset Design Practices,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85189354415&doi=10.1145%2f3641552&partnerID=40&md5=99867ca5defcce2a5264134f728ebf29,"Machine learning (ML) models are fundamentally shaped by data, and building inclusive ML systems requires significant considerations around how to design representative datasets. Yet, few novice-oriented ML modeling tools are designed to foster hands-on learning of dataset design practices, including how to design for data diversity and inspect for data quality. To this end, we outline a set of four data design practices (DDPs) for designing inclusive ML models and share how we designed a tablet-based application called Co-ML to foster learning of DDPs through a collaborative ML model building experience. With Co-ML, beginners can build image classifiers through a distributed experience where data is synchronized across multiple devices, enabling multiple users to iteratively refine ML datasets in discussion and coordination with their peers. We deployed Co-ML in a 2-week-long educational AIML Summer Camp, where youth ages 13–18 worked in groups to build custom ML-powered mobile applications. Our analysis reveals how multi-user model building with Co-ML, in the context of student-driven projects created during the summer camp, supported development of DDPs including incorporating data diversity, evaluating model performance, and inspecting for data quality. Additionally, we found that students’ attempts to improve model performance often prioritized learnability over class balance. Through this work, we highlight how the combination of collaboration, model testing interfaces, and student-driven projects can empower learners to actively engage in exploring the role of data in ML systems. © 2024 Copyright held by the owner/author(s).",collaboration; computing education; data science; Machine learning,Architectural design; Classification (of information); Education computing; Learning systems; Structural design; Students; Collaboration; Computing education; Data design; Data quality; Design practice; Machine learning models; Machine learning systems; Machine-learning; Modelling tools; Summer camp; Machine learning
What Learning Strategies are Used by Programming Students? A Qualitative Study Grounded on the Self-regulation of Learning Theory,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85189299529&doi=10.1145%2f3635720&partnerID=40&md5=88a9020cb5a528f1a5bbec0b25042a1f,"Self-regulation of learning (SRL) is an essential ability for academic success in multiple educational contexts, including programming education. However, understanding how students regulate themselves during programming learning is still limited. This exploratory research aimed to investigate the regulatory strategies externalized by 51 students enrolled in an introductory programming course. The objective was to identify the SRL strategies used by these students during multiple phases of the learning process and compare the SRL behavior of high and low-performers. The following research questions guided this investigation: (RQ1) What regulation of learning strategies are used by programming students?; and (RQ2) How do the SRL strategies used by high and low-performing students differ?. The findings demonstrate that learning to program involves complex psychological resources (e.g., cognition, metacognition, behavior, motivation, and emotion) and that students present heterogeneity in their SRL repertoire. In addition, high and low-performing students showed significant differences in how they regulate, which can contribute to understanding the factors that may contribute to learning programming. Lastly, we argue that for analyzing SRL strategies, it is necessary to consider the specificities of programming education, which motivated the development of a conceptual framework to describe the identified strategies and regulatory phases in this learning domain. © 2024 Copyright held by the owner/author(s).",cs1; learning strategies; programming learning; regulatory strategies; Self-regulation of learning,Deregulation; Learning systems; Cs1; Essential abilities; Learning strategy; Learning Theory; Programming education; Programming learning; Qualitative study; Regulatory strategy; Self regulation; Self-regulation of learning; Students
Their Fight Is Our Fight: Why Computing Education Advocates Must Be in Solidarity with Public Schools,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190978256&doi=10.1145%2f3632296&partnerID=40&md5=983b7960886dd5e590e9945cd1a5f731,"Those working toward equitable K-12 computing education in the United States have always had their work cut out for them: understanding how best to teach, developing robust curricula, designing novel tools, building teacher capacity, and supporting systemic change in schools to bring equitable computing education to young people. Collectively, these areas represent an ambitious and complex set of problems to solve. But current changes to the educational landscape in the United States—where teaching basic ideas about how to critically engage with the world has become deeply politicized, and where forces working toward privatization of education are on the rise—require us to broaden the scope of our work. Our efforts must shift to not just include the aforementioned problems but also include ones that are more explicitly political: engaging in solidarity with the larger project of public education and supporting teachers to have the freedom to teach what students will need to contribute to our society. © 2024 Copyright held by the owner/author(s).",education censorship; K12 computer science; Public schools,Curricula; Education computing; Computing education; Current change; Cut-out; Education censorship; K-12 computing education; K12 computer science; Large programs; Public schools; Teachers'; Young peoples; Privatization
Factors Influencing the Social Help-seeking Behavior of Introductory Programming Students in a Competitive University Environment,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190970254&doi=10.1145%2f3639059&partnerID=40&md5=35128aecba5921e8d275c6a6ec50ca7b,"Collaboration is an important aspect of computing. In a classroom setting, working with others can increase a student’s motivation to attempt more challenges, reduce the difficulty of complicated concepts, and bring about greater overall success. Despite extensive research in other domains, there has been minimal exploration within computing on what impacts a student’s decision to seek social assistance in highly competitive university environments. To understand what affects introductory programming students’ social help-seeking behavior in this context, we conducted 32 semi-structured interviews with students and performed thematic analysis and qualitative coding on the ensuing transcripts. Our qualitative analysis revealed 18 significant factors. We noticed that the decision to seek social help involved a two-fold process: first, the decision to engage in social help-seeking, and subsequently, the decision of who to ask for help. Furthermore, we found that help-seeking in computing is not fundamentally different from other disciplines, although some of the factors were unique to the topic of computing and the specific environment of this study. Factors related to communication style, the type of question being asked, and the school’s cheating policy were central when discussing code, an integral part of computing. Regarding the environment, students repeatedly reported that the competitive major, the explicit and implicit class standards, and feelings of intimidation, among others, influenced them. These findings suggest that understanding both steps and the sociocultural context is important in order to effectively lower the barriers to asking for help. © 2024 Copyright held by the owner/author(s).",Computer science education; introductory programming; social help-seeking,Behavioral research; Computer programming; Education computing; Classroom settings; Communication styles; Computer Science Education; Help seeking; Introductory programming; Qualitative analysis; Semi structured interviews; Social help-seeking; Thematic analysis; University environment; Students
Pyrates: Design and Evaluation of a Serious Game Aimed at Introducing Python Programming and Easing the Transition from Blocks,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190971973&doi=10.1145%2f3639061&partnerID=40&md5=7d7a44a522fd1502f0210bfabcec68ca,"This article reports on a design-based research study centered on the conception and the assessment of the Pyrates application. This online serious game aims at introducing Python programming to K–12 students while easing the transition from block-based to text-based languages. After we present the various aspects underlying the block-to-text transition as well as the related existing applications, we describe the design of Pyrates. First, we built the levels of the game to deal with the different fundamental concepts of programming in a constructivist approach. Next, we were inspired by advantageous characteristics of block-based programming editors to create the editing environment of Pyrates. To assess this conception, we tested the application in eight classrooms with 240 French 14–15 years old students. Students’ activity traces have been collected and were augmented by a qualitative online survey. By analyzing this dataset, we showed that the levels’ design generally allows to apprehend the targeted concepts consistently with the constructivist principles. Regarding the editing environment, we established that it supports the block-to-text transition in several aspects: concept transposition (general models and illustrative examples), reduction of errors (beginners aware syntax analyzer), command catalog (programming memo for discovery and syntax reference), and program composition (copy button that limits keyboarding). Finally, Pyrates, which has already been played over 140,000 times, offers practitioners an environment that facilitates the transition from blocks to text, as well as a serious game to master the fundamental concepts of Python programming, and novel avenues to follow for tool designers. © 2024 Copyright held by the owner/author(s).",Block-based programming; CS1; design-based research; learning analytics; Python; Scratch; secondary education; serious game; text-based programming,Education computing; High level languages; Serious games; Students; Syntactics; Block based; Block-based programming; Design and evaluations; Design-based research; Fundamental concepts; Learning analytic; Python programming; Scratch; Secondary education; Text-based programming; Python
The Impact of a Community of Practice Scholarship Program on Students’ Computing Identity,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85191019162&doi=10.1145%2f3623615&partnerID=40&md5=6e46ae484798e2ab2e4ee573459a755a,"While computing programs in the U.S. are experiencing growth in enrollment trends, they are still grappling with matters related to retention and persistence of computing undergraduates. One construct identified by scholars as having an impact on persistence in computing is computing identity, which is shaped by constructs such as recognition, performance/competence beliefs, sense of belonging, and interest. Likewise, participation in what scholars call communities of practice (CoPs) can aid in the development of their computing identity. To help foster computing identity development, an initiative was designed at three large public universities named Flit-Path (Florida IT Pathways to Success). Flit-Path was established using the principles inherent to communities of practice with the goal of recruiting and retaining computing students. The Flit-Path program leveraged curricular and co-curricular support to engage academically talented students with financial need in computing disciplines (e.g., computer engineering, computer science, and information technology) and provided financial assistance via scholarships. The guiding research question for this study was, What is the impact of a computing community of practice (the Flit-Path program) on students’ computing identity, specifically the constructs of recognition, performance/competence, sense of belonging, and interest? In order to address this question, a validated survey instrument was used to compare 64 computing students who enrolled in the Flit-Path program with students from the same universities with matched years in college, computing GPA, race/ethnicity, gender, home/environment support, and work hours outside the home. For comparing the two groups, the research team used multivariate matching methods in R. The results of the study revealed that students in the Flit-Path program demonstrated substantially higher computing identities. Students who participated in the Flit-Path program experienced higher recognition, performance/competence, and sense of belonging in the computing field than their non-Flit-Path counterparts. There was also a borderline positive effect for interest. Together, the results indicate that well-designed CoP interventions in computing programs can have a significant effect on students’ identification with computing and ultimately their persistence. © 2024 Copyright held by the owner/author(s).",Communities of practice; computing fields; computing identity,Engineering education; Engineering research; Communities of Practice; Computing disciplines; Computing field; Computing identity; Computing programmes; Florida; Performance; Public universities; Scholarship program; Sense of belonging; Students
Automated Grading and Feedback Tools for Programming Education: A Systematic Review,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190979567&doi=10.1145%2f3636515&partnerID=40&md5=b8fc927056fac474bb2dd07c017ed717,"We conducted a systematic literature review on automated grading and feedback tools for programming education. We analysed 121 research papers from 2017 to 2021 inclusive and categorised them based on skills assessed, approach, language paradigm, degree of automation, and evaluation techniques. Most papers assess the correctness of assignments in object-oriented languages. Typically, these tools use a dynamic technique, primarily unit testing, to provide grades and feedback to the students or static analysis techniques to compare a submission with a reference solution or with a set of correct student submissions. However, these techniques’ feedback is often limited to whether the unit tests have passed or failed, the expected and actual output, or how they differ from the reference solution. Furthermore, few tools assess the maintainability, readability, or documentation of the source code, with most using static analysis techniques, such as code quality metrics, in conjunction with grading correctness. Additionally, we found that most tools offered fully automated assessment to allow for near-instantaneous feedback and multiple resubmissions, which can increase student satisfaction and provide them with more opportunities to succeed. In terms of techniques used to evaluate the tools’ performance, most papers primarily use student surveys or compare the automatic assessment tools to grades or feedback provided by human graders. However, because the evaluation dataset is frequently unavailable, it is more difficult to reproduce results and compare tools to a collection of common assignments. © 2024 Copyright held by the owner/author(s).",assessment; Automated grading; automatic assessment tools; computer science education; feedback; systematic literature review,Automation; Codes (symbols); Education computing; Grading; Object oriented programming; Paper; Quality control; Students; Assessment; Assessment tool; Automated feedback; Automated grading; Automatic assessment; Automatic assessment tool; Computer Science Education; Feedback tool; Programming education; Systematic literature review; Static analysis
Sustainability in Computing Education: A Systematic Literature Review,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85191023041&doi=10.1145%2f3639060&partnerID=40&md5=d3140127aba635bb7eebfe2b21ed493d,"Research shows that the global society as organized today, with our current technological and economic system, is impossible to sustain. We are living in an era in which human activities in highly industrialized countries are responsible for overshooting several planetary boundaries, with poorer communities contributing the least to the problems but being impacted the most. At the same time, technical and economic gains fail to provide society at large with equal opportunities and improved quality of life. This article describes approaches taken in computing education to address the issue of sustainability. It presents results of a systematic review of the literature on sustainability in computing education. From a set of 572 publications extracted from six large digital libraries plus snowballing, we distilled and analyzed 89 relevant primary studies. Using an inductive and deductive thematic analysis, we study (i) conceptions of sustainability, computing, and education; (ii) implementations of sustainability in computing education; and (iii) research on sustainability in computing education. We present a framework capturing learning objectives and outcomes as well as pedagogical methods for sustainability in computing education. These results can be mapped to existing standards and curricula in future work. We find that only a few of the articles engage with the challenges as calling for drastic systemic change, along with radically new understandings of computing and education. We suggest that future work should connect to the substantial body of critical theory, such as feminist theories of science and technology. Existing research on sustainability in computing education may be considered rather immature, as the majority of articles are experience reports with limited empirical research. © 2024 Copyright held by the owner/author(s).",computing education; engineering education; equality; higher education; Sustainability,Computation theory; Digital libraries; Engineering education; 'current; Computing education; Economic system; Equality; Global society; High educations; Human activities; Industrialized countries; Systematic literature review; Technological system; Sustainable development
Factors That Predict K-12 Teachers’ Ability to Apply Computational Thinking Skills,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190955499&doi=10.1145%2f3633205&partnerID=40&md5=2ee09129e04089729a3ec9f9dc9b4933,"Background and Objective. Teacher assessment research suggests that teachers have good conceptual understanding of CT. However, to model CT-based problem-solving in their classrooms, teachers need to develop the ability to recognize when and how to apply CT skills. Does existing professional development (PD) equip teachers to know when and how to apply CT skills? What factors should PD providers consider while developing trainings for CT application skills? Method. This retrospective observational study used a binomial regression model to determine what factors predict teachers’ probability of performing well on a CT application skills test. Participants. Participants of this study were 129 in-service K-12 teachers from a community of practice in India. Findings. Results show that teachers who have received at least one CT training, who have a higher teaching experience, and are currently teaching CT will have a higher probability of applying CT skills correctly to problems irrespective of the subject they teach and their educational backgrounds. However, receiving a higher number of CT PD trainings was a negative predictor of teachers’ performance. Implications. Implications for school administrators, professional development providers, and researchers are discussed. Teachers need ample opportunity to teach CT in their teaching schedules. Continuous professional development does not necessarily result in improved CT application skills unless careful consideration is given to the pedagogies used and to the resolution of misconceptions that teachers may have developed in prior training. Mixing plugged and unplugged pedagogical approaches may be beneficial to encourage transfer of CT application skills across different types of problems. Last, there is a need to develop valid and reliable instruments that measure CT application skills of teachers. © 2024 Copyright held by the owner/author(s).",21st century abilities; Computational thinking skills; pedagogical content knowledge; teacher professional development,Professional aspects; Regression analysis; 21st century ability; Computational thinking skill; Computational thinkings; K-12 teachers; Pedagogical content knowledge; Professional development; Teacher assessments; Teacher professional development; Teachers'; Thinking skills; Personnel training
A Model of How Students Engineer Test Cases With Feedback,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190945450&doi=10.1145%2f3628604&partnerID=40&md5=b57f4d3ccad9def1781d875029021c1d,"Background and Context. Students’ programming projects are often assessed on the basis of their tests as well as their implementations, most commonly using test adequacy criteria like branch coverage, or, in some cases, mutation analysis. As a result, students are implicitly encouraged to use these tools during their development process (i.e., so they have awareness of the strength of their own test suites). Objectives. Little is known about how students choose test cases for their software while being guided by these feedback mechanisms. We aim to explore the interaction between students and commonly used testing feedback mechanisms (in this case, branch coverage and mutation-based feedback). Method. We use grounded theory to explore this interaction. We conducted 12 think-aloud interviews with students as they were asked to complete a series of software testing tasks, each of which involved a different feedback mechanism. Interviews were recorded and transcripts were analyzed, and we present the overarching themes that emerged from our analysis. Findings. Our findings are organized into a process model describing how students completed software testing tasks while being guided by a test adequacy criterion. Program comprehension strategies were commonly employed to reason about feedback and devise test cases. Mutation-based feedback tended to be cognitively overwhelming for students, and they resorted to weaker heuristics in order to address this feedback. Implications. In the presence of testing feedback, students did not appear to consider problem coverage as a testing goal so much as program coverage. While test adequacy criteria can be useful for assessment of software tests, we must consider whether they represent good goals for testing, and if our current methods of practice and assessment are encouraging poor testing habits. © 2024 Copyright held by the owner/author(s).",branch coverage; mutation analysis; Software engineering education; software testing,Education computing; Engineering education; Feedback control; Students; Branch-coverage; Development process; Feedback mechanisms; Mutation analysis; Programming projects; Software engineering education; Software testings; Student engineers; Test adequacy criteria; Test case; Software testing
Investigating Participation Mechanisms in EU Code Week,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85191003037&doi=10.1145%2f3632531&partnerID=40&md5=6931a5228a56e24c7b06039df8d3eef4,"Digital competence (DC) is a broad set of skills, attitudes, and knowledge for confident, critical, and responsible use of digital technologies in every aspect of life. DC proves essential in the contemporary digital landscape, yet its diffusion is hindered by biases, misunderstandings, and limited awareness. Teaching Informatics in the educational curriculum is increasingly supported by the institutions but faces serious challenges, such as teacher upskilling and support. In response, grassroots movements promoting computing literacy in an informal setting have grown, including EU Code Week, whose vision is to develop computing skills while promoting diversity and raising awareness of the importance of digital skills. This study extensively analyses EU Code Week editions spanning 2014 to 2021 across European Union member states, pursuing three primary objectives: firstly, to evaluate teacher engagement in the campaign in terms of penetration, retention, and spatial distribution; secondly, to characterise the multifaceted audience and themes embraced by these initiatives; and, lastly, to investigate the influence of socio-economic factors on engagement. The investigation uncovers the underlying mechanisms fostering Code Week’s engagement, providing insights to campaign organisers for strategic planning and resource allocation in future editions. Moreover, the analysis reveals that the most engaged areas are characterised by lower income as well as lower digital literacy, restricted access to technology, and a less established computer education, suggesting that Code Week thrives precisely where its impact is most needed. © 2024 Copyright held by the owner/author(s).",civic engagement; Code Week; Digital skills; income; participation,Economic and social effects; Economics; Civic engagement; Code week; Computing skills; Digital skills; Digital technologies; European union; Income; Informatics; Participation; Teachers'; Curricula
You’re Hired! A Phenomenographic Study of Undergraduate Students’ Pathways to Job Attainment in Computing,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190976371&doi=10.1145%2f3636514&partnerID=40&md5=944af108d89ed41e58d80feacb6aca1a,"Although there is a great demand for graduates in computing fields, companies frequently struggle to find enough workers. They may also grapple with obtaining racial, ethnic, and gender diversity in representation. It has been suggested that the hiring process further contributes to these inequities. This study examined undergraduate computing students’ experiences with technical interviews and their pathways to job attainment, focusing on men and women who identify as Black or African American, Hispanic or Latinx, Asian, and mixed-race. We applied the community cultural wealth framework and employed the methodology of phenomenography to investigate the different assets that students leveraged to succeed in obtaining a position. Our investigation centered around the conceptions of sixteen computing students, all of whom completed at least one technical interview and received at least one job offer. We conducted semi-structured interviews to explore their interpretations of the hiring process, the resources they utilized, and their perceptions of inclusivity in the field. The findings illustrated that students’ support mechanisms included the following categories of description: intrinsic characteristics, capitalizing on experience, community, preparation, and organizational. They relied heavily on distinct forms of capital, particularly social and navigational, to attain a job in computing. Peers and clubs or groups were essential for students to learn about what to expect during the hiring process, to help them prepare, and to make connections with employers. They also helped the students cope with the discrimination they faced throughout their professional trajectories. By investigating the various experiences students have, we contribute to the understanding of how hiring practices may be viewed as well as possible ways to provide support. While students must study for technical interviews and refine their skills and pertinacity in the face of obstacles, industry and academia should consider their role in hiring and its impact. Transparency in what to expect and enhanced preparation opportunities could serve to make the process more equitable for all job candidates. © 2024 Copyright held by the owner/author(s).",Computing education; computing profession; equity; ethnicity; gender; hiring process in computing; inclusivity; race; technical interview preparation,Education computing; Employment; Computing education; Computing profession; Equity; Ethnicity; Gender; Hiring process; Hiring process in computing; Inclusivity; Race; Technical interview preparation; Students
Assessing the Effect of Programming Language and Task Type on Eye Movements of Computer Science Students,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190970952&doi=10.1145%2f3632530&partnerID=40&md5=63dbd4210e477a746668ce3abb5e1dcc,"Background and Context: Understanding how a student programmer solves different task types in different programming languages is essential to understanding how we can further improve teaching tools to support students to be industry-ready when they graduate. It also provides insight into students’ thought processes in different task types and languages. Few (if any) studies investigate whether any differences exist between the reading and navigation behavior while completing different types of tasks in different programming languages. Objectives: We investigate whether the use of a certain programming language (C++ versus Python) and type of task (new feature versus bug fixing) has an impact on performance and eye movement behavior in students exposed to both languages and task types. Participants: Fourteen students were recruited from a Python course that taught Python as an introductory programming language. Study Method: An eye tracker was used to track how student programmers navigate and view source code in different programming languages for different types of tasks. The students worked in the Geany Integrated Development Environment (IDE, used also in their course) while eye-tracking data was collected behind the scenes making their working environment realistic compared to prior studies. Each task type had a Python and C++ version, albeit on different problems to avoid learning effects. Standard eye-tracking metrics of fixation count and fixation durations were calculated on various areas of the screen and on source code lines. Normalized versions of these metrics were used to compare across languages and tasks. Findings: We found that the participants had significantly longer average fixation duration and total fixation duration adjusted for source code length during bug fixing tasks than the feature addition tasks, indicating bug fixing is harder. Furthermore, participants looked at lines adjacent to the line containing the bug more often before looking at the buggy line itself. Participants who added a new feature correctly made their first edit earlier compared to those who failed to add the feature. Tasks in Python and C++ have similar overall fixation duration and counts when adjusted for character count. The participants spent more time fixating on the console output while doing Python tasks. Overall, task type has a bigger effect on the overall fixation duration and count compared to the programming language. Conclusions: CS educators can better support students in debugging their code if they know what they typically look at while bug fixing. For new feature tasks, training students not to fear edits to learn about the code could also be actively taught and encouraged in the classroom. CS education researchers can benefit by building better IDE plugins and tools based on eye movements that guide novices in recognizing bugs and aid in adding features. These results will lead to updating prior theories on mental models in program comprehension of how developers read and understand source code. They will eventually help in designing better programming languages and better methods of teaching programming based on evidence on how developers use them. © 2024 Copyright held by the owner/author(s).",bug fixing; C++; eye-tracking study; learning behavior; new feature tasks; Program comprehension; programming education; Python; source code,C++ (programming language); Codes (symbols); Curricula; Engineering education; Eye movements; Eye tracking; Students; Bug-fixing; C++; Eye-tracking studies; Fixation duration; Learning behavior; New feature task; Program comprehension; Programming education; Source codes; Task type; Python
Teaching Ethics in Computing: A Systematic Literature Review of ACM Computer Science Education Publications,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85190962136&doi=10.1145%2f3634685&partnerID=40&md5=228ec15c3bf23de7d4ea2847e5c5257c,"The computing education research community now has at least 40 years of published research on teaching ethics in higher education. To examine the state of our field, we present a systematic literature review of papers in the Association for Computing Machinery computing education venues that describe teaching ethics in higher-education computing courses. Our review spans all papers published to SIGCSE, ICER, ITiCSE, CompEd, Koli Calling, and TOCE venues through 2022, with 100 papers fulfilling our inclusion criteria. Overall, we found a wide variety in content, teaching strategies, challenges, and recommendations. The majority of the papers did not articulate a conception of “ethics,” and those that did used many different conceptions, from broadly applicable ethical theories to social impact to specific computing application areas (e.g., data privacy and hacking). Instructors used many different pedagogical strategies (e.g., discussions, lectures, assignments) and formats (e.g., stand-alone courses, incorporated within a technical course). Many papers identified measuring student knowledge as a particular challenge, and 59% of papers included mention of assessments or grading. Of the 69% of papers that evaluated their ethics instruction, most used student self-report surveys, course evaluations, and instructor reflections. While many papers included calls for more ethics content in computing, specific recommendations were rarely broadly applicable, preventing a synthesis of guidelines. To continue building on the last 40 years of research and move toward a set of best practices for teaching ethics in computing, our community should delineate our varied conceptions of ethics, examine which teaching strategies are best suited for each, and explore how to measure student learning. © 2024 Copyright held by the owner/author(s).",computer science education; computing education; Ethics; literature review,Computation theory; Data privacy; Education computing; Engineering education; Grading; Paper; Personal computing; Philosophical aspects; Computer Science Education; Computing education; Computing machinery; Education research; High educations; Literature reviews; Research communities; Systematic literature review; Teaching ethics; Teaching strategy; Students
Bob or Bot: Exploring ChatGPT’s Answers to University Computer Science Assessment,2024,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85191014514&doi=10.1145%2f3633287&partnerID=40&md5=405b2a97eadf5f9aaf0c85690871f5b7,"Cheating has been a long-standing issue in university assessments. However, the release of ChatGPT and other free-to-use generative AI tools has provided a new and distinct method for cheating. Students can run many assessment questions through the tool and generate a superficially compelling answer, which may or may not be accurate. We ran a dual-anonymous “quality assurance” marking exercise across four end-of-module assessments across a distance university computer science (CS) curriculum. Each marker received five ChatGPT-generated scripts alongside 10 student scripts. A total of 90 scripts were marked; every ChatGPT-generated script for the undergraduate modules received at least a passing grade (>40%), with all of the introductory module CS1 scripts receiving a distinction (>85%). None of the ChatGPT-taught postgraduate scripts received a passing grade (>50%). We also present the results of interviewing the markers and of running our sample scripts through a GPT-2 detector and the TurnItIn AI detector, which both identified every ChatGPT-generated script but differed in the number of false positives. As such, we contribute a baseline understanding of how the public release of generative AI is likely to significantly impact quality assurance processes. Our analysis demonstrates that in most cases, across a range of question formats, topics, and study levels, ChatGPT is at least capable of producing adequate answers for undergraduate assessment. © 2024 Copyright held by the owner/author(s).",ChatGPT; cheating; generative AI; quality assurance; university assessment’,Education computing; Engineering education; Students; ChatGPT; Cheating; Computer science curricula; False positive; Generative AI; Quality assurance process; Science assessments; University assessments; University assessment’; Quality assurance
Effectiveness of Video-based Training for Face-to-face Communication Skills of Software Engineers: Evidence from a Three-year Study,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85181014096&doi=10.1145%2f3631532&partnerID=40&md5=3851f38d9e6162ba83fcb196841339c3,"Objectives. Communication skills are crucial for effective software development teams, but those skills are difficult to teach. The goal of our project is to evaluate the effectiveness of teaching face-to-face communication skills using AVW-Space, a platform for video-based learning that provides personalized nudges to support student’s engagement during video watching. Participants. The participants in our study are second-year software engineering students. The study was conducted over three years, with students enrolled in a semester-long project course. Study Method. We performed a quasi-experimental study over three years to teach face-to-face communication using AVW-Space, a video-based learning platform. We present the instance of AVW-Space we developed to teach face-to-face communication. Participants watched and commented on 10 videos and later commented on the recording of their own team meeting. In 2020, the participants (n = 50) did not receive nudges, and we use the data collected that year as control. In 2021 (n = 49) and 2022 (n = 48), nudges were provided adaptively to encourage students to write more and higher-quality comments. Findings. The findings from the study show the effectiveness of nudges. We found significant differences in engagement when nudges were provided. Furthermore, there is a causal effect of nudges on the interaction time, the total number of comments written, and the number of high-quality comments, as well as on learning. Finally, participants exposed to nudges reported higher perceived learning. Conclusions. Our research shows the effect of nudges on student engagement and learning while using the instance of AVW-Space for teaching face-to-face communication skills. Future work will explore other soft skills, as well as providing explanations for the decisions made by AVW-Space. © 2023 Copyright held by the owner/author(s).",AVW-Space; causal effects; nudges; student perceptions; Teaching soft skills; video-based learning,Software design; Teaching; AVW-space; Causal effect; Communication skills; Face-to-face communications; High quality; Nudge; Soft skills; Student perceptions; Teaching soft skill; Video-based learning; Students
Can Students without Prior Knowledge Use ChatGPT to Answer Test Questions? An Empirical Study,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85180957035&doi=10.1145%2f3628162&partnerID=40&md5=68e74134dbb2bd4f245fbb21da4777fa,"With the immense interest in ChatGPT worldwide, education has seen a mix of both excitement and skepticism. To properly evaluate its impact on education, it is crucial to understand how far it can help students without prior knowledge answer assessment questions. This study aims to address this question as well as the impact of the question type. We conducted multiple experiments with computer engineering students (experiment group: n = 41 to 56), who were asked to use ChatGPT to answer previous test questions before learning about the related topics. Their scores were then compared with the scores of previous-term students who answered the same questions in a quiz or exam setting (control group: n = 24 to 61). The results showed a wide range of effect sizes, from −2.55 to 1.23, depending on the question type and content. The experiment group performed best answering code analysis and conceptual questions but struggled with code completion and questions that involved images. However, the performance in code generation tasks was inconsistent. Overall, the ChatGPT group’s answers lagged slightly behind the control group’s answers with an effect size of −0.16. We conclude that ChatGPT, at least in the field of this study, is not yet ready to rely on by students who do not have sufficient background to evaluate generated answers. We suggest that educators try using ChatGPT and educate students on effective questioning techniques and how to assess the generated responses. This study provides insights into the capabilities and limitations of ChatGPT in education and informs future research and development. © 2023 Copyright held by the owner/author(s).",ChatGPT; large language models,Education computing; ChatGPT; Control groups; Effect size; Empirical studies; Knowledge use; Language model; Large language model; Prior-knowledge; Question type; Worldwide education; Students
Computational Thinking and Notional Machines: The Missing Link,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85180995305&doi=10.1145%2f3627829&partnerID=40&md5=36758a10fbdf2caf0ad66bb9b32f0c1b,"In learning to program and understanding how a programming language controls a computer, learners develop both insights and misconceptions whilst their mental models are gradually refined. It is important that the learner is able to distinguish the different elements and roles of a computer (compiler, interpreter, memory, etc.), which novice programmers may find difficult to comprehend. Forming accurate mental models is one of the potential sources of difficulty inextricably linked to mastering computing concepts and processes, and for learning computer programming. It is common to use some form of representation (e.g., an abstract machine or a Computational Agent (CA)) to support technical or pedagogic explanations. The Notional Machine (NM) is a pedagogical device that entails one or more computational concepts, originally described as an idealised computer operating with the constructs of a particular programming language. It can be used to support specific or general learning goals and will typically have some concrete representation that can be referred to. Computational Thinking (CT), which is defined as a way of thinking that is used for [computational] problem solving, is often presented as using a CA to carry out information processing presented by a solution. In CT, where the typical goal is to produce an algorithm or a computer program, the CA seemingly serves a purpose very similar to an NM. Although it changes through the different stages of development (of the learner and of the curriculum), the roles of CAs and NMs can be seen as versatile tools that connect a learner’s mental model with the conceptual model of a program. In this article, we look at this relationship between CAs and NMs, and indicate how they would look at different stages of learning. We traverse the range of definitions and usages of these concepts, and articulate models that clarify how these are viewed in the literature. This includes exploring the nature of machines and agents, and how historical views of these relate to modern pedagogy for computation. We argue that the CA can be seen as an abstract, simplified variant of an NM that provides a useful perspective to the learner to support them to form robust mental models of NMs more efficiently and effectively. We propose that teaching programming should make use of the idea of a CA at different stages of learning, as a link that connects a learner’s mental model to a full NM. © 2023 Copyright held by the owner/author(s).",computational agent; Computational thinking; CS Unplugged; K-12 education; notional machine,Abstracting; Cognitive systems; Education computing; Object oriented programming; Problem oriented languages; Program compilers; Computational agents; Computational thinkings; CS unplugged; Different stages; Forms of representation; K-12 education; Mental model; Notional machine; Novice programmer; Potential sources; Learning systems
Cross-Country Variation in (Binary) Gender Differences in Secondary School Students’ CS Attitudes: Re-Validating and Generalizing a CS Attitudes Scale,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85181008632&doi=10.1145%2f3630014&partnerID=40&md5=44d5379636d222d1b4746336dd9e8ee6,"The current study compared American, Korean, and Indonesian middle and high school students’ CS attitudes. Concurrently, this study also examined whether the items in the CS attitudes scale exhibit country and gender measurement biases. We gathered data on CS attitudes from middle and high school students in the US, Korea, and Indonesia. The participating students took the same (translated) previously validated CS attitudes scale. We ran a unidimensional IRT, differential item functioning (DIF), a two-way ANOVA, and the Kruskal-Wallis H test. Despite the valid instrument, we found it inappropriate as is for international comparison studies because students from different countries interpreted some items differently. We then compared gender-based differences in CS attitudes across countries. The results revealed no significant differences between males and females in the Indonesian middle school data, whereas male students had significantly higher CS attitudes than female students in both American and Korean student data. Furthermore, we found the same pattern in gender differences in Korean and Indonesian high school students’ CS attitudes scores as in the middle school study. These findings underscore the importance of a country’s sociocultural context in influencing gap and diversity in secondary school students’ CS attitudes. © 2023 Copyright held by the owner/author(s).",Attitudes; computer science; country; gender,Education computing; 'current; Attitude; Country; Gender; Gender-differences; High school students; Middle school; Middle school students; School students; Secondary schools; Students
Teacher Education to Integrate Computational Thinking into Elementary Science: A Design-Based Research Study,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85181985809&doi=10.1145%2f3618115&partnerID=40&md5=8a1d8d31004c8642f6e7beec9141f456,"Computational thinking (CT) is playing an increasingly relevant role within disciplinary teaching in elementary school, particularly in science. However, many teachers are unfamiliar with CT, either because their education occurred before the popularization of CT or because CT instruction was not included in their preservice coursework. For these teachers, CT professional development (PD) becomes a primary mechanism to close their CT knowledge gap. While CT PD has demonstrated success at increasing teacher’s CT understanding, researchers have reported varied outcomes in supporting teachers to write CT-integrated lesson plans. To explore how we might support teachers to integrate CT into elementary science, we employed design-based research (DBR) in a dual-track design of in-class CT instruction for pre-service undergraduates within an elementary science methods class paired with a collaborative, multi-month PD opportunity for pre- and in-service teachers. In this article, we reflect on our 5-year period of DBR and present our design insights and implications for CT instruction and curriculum design from each iteration. Our findings on best practices will inform both teacher educators and PD providers within CT education. Our work will also be of interest to researchers considering DBR for technology-based educational projects. © 2023 Copyright held by the owner/author(s).",computational thinking; culturally responsive teaching; design-based research; professional development; Teacher education,Curricula; Education computing; Teaching; Computational thinkings; Courseworks; Culturally-responsive teaching; Design-based research; Elementary schools; Elementary science; Professional development; Research studies; Teacher education; Teachers'; Iterative methods
Bolstering the Persistence of Black Students in Undergraduate Computer Science Programs: A Systematic Mapping Study,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85181846534&doi=10.1145%2f3617896&partnerID=40&md5=1a67a519327ea45a06612612bb99fadb,"Background: People who are racialized, gendered, or otherwise minoritized are underrepresented in computing professions in North America. This is reflected in undergraduate computer science (CS) programs, in which students from marginalized backgrounds continue to experience inequities that do not typically affect White cis-men. This is especially true for Black students in general, and Black women in particular, whose experience of systemic, anti-Black racism compromises their ability to persist and thrive in CS education contexts. Objectives: This systematic mapping study endeavours to (1) determine the quantity of existing non-deficit-based studies concerned with the persistence of Black students in undergraduate CS; (2) summarize the findings and recommendations in those studies; and (3) identify areas in which additional studies may be required. We aim to accomplish these objectives by way of two research questions: (RQ1) What factors are associated with Black students’ persistence in undergraduate CS programs?; and (RQ2) What recommendations have been made to further bolster Black students’ persistence in undergraduate CS education programs? Methods: This systematic mapping study was conducted in accordance with PRISMA 2020 and SEGRESS guidelines. Studies were identified by conducting keyword searches in seven databases. Inclusion and exclusion criteria were designed to capture studies illuminating persistence factors for Black students in undergraduate CS programs. To ensure the completeness of our search results, we engaged in snowballing and an expert-based search to identify additional studies of interest. Finally, data were collected from each study to address the research questions outlined above. Results: Using the methods outlined above, we identified 16 empirical studies, including qualitative, quantitative, and mixed-methods studies informed by a range of theoretical frameworks. Based on data collected from the primary studies in our sample, we identified 13 persistence factors across four categories: (I) social capital, networking, & support; (II) career & professional development; (III) pedagogical & programmatic interventions; and (IV) exposure & access. This data-collection process also yielded 26 recommendations across six stakeholder groups: (i) researchers; (ii) colleges and universities; (iii) the computing industry; (iv) K-12 systems and schools; (v) governments; and (vi) parents. Conclusion: This systematic mapping study resulted in the identification of numerous persistence factors for Black students in CS. Crucially, however, these persistence factors allow Black students to persist, but not thrive, in CS. Accordingly, we contend that more needs to be done to address the systemic inequities faced by Black people in general, and Black women in particular, in computing programs and professions. As evidenced by the relatively small number of primary studies captured by this systematic mapping study, there exists an urgent need for additional, asset-based empirical studies involving Black students in CS. In addition to foregrounding the intersectional experiences of Black women in CS, future studies should attend to the currently understudied experiences of Black men. © 2023 Copyright held by the owner/author(s).",anti-Black racism in computer science; Black students in computer science; Equity Diversity Inclusion; equity in computer science education,Economic and social effects; Education computing; Employment; Engineering education; Mapping; Anti-black racism in computer science; Black student in computer science; Computer Science Education; Computer science programs; Empirical studies; Equity diversity inclusion; Equity in computer science education; Research questions; Student persistences; Systematic mapping studies; Students
We Need to Fix Secondary School Computer Science,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85180972198&doi=10.1145%2f3617599&partnerID=40&md5=09dff9a25eaec9c643b30c3cbbd124c8,"In recent years, the push for secondary school students to “learn to code” has increased significantly. Currently, about half of secondary schools in the United States have computer science education available to students in some form. Unfortunately, many of these schools choose a curriculum bogged down in the nuances of programming language syntax, leaving students bored, confused, unable to apply their learning to useful problems outside the classroom, and therefore disheartened about further pursuing a more conceptual computer science education in college. As a current undergraduate who has helped teach secondary school computer science, I witnessed firsthand the problems with current approaches. I, therefore, propose a shift in the focus of computing education research away from teaching “coding” effectively to elucidating a more abstract but nevertheless more pragmatic characterization of computer science as an academic field, rather than programming as a trade. © 2023 Copyright held by the owner/author(s).",computational thinking; Computer science curricula; secondary school education,Computer programming; Curricula; Education computing; Engineering education; 'current; Computational thinkings; Computer science curricula; Computer Science Education; Language syntax; Learn+; School education; School students; Secondary school education; Secondary schools; Students
Student-Centered Computing: Teacher Experiences in a New Introductory Computer Science Curriculum,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85181852392&doi=10.1145%2f3614101&partnerID=40&md5=eebd400e9b03748640049dee0cd69a06,"Objectives. The goal of this paper is to introduce and describe a new introductory computer science course. Research results from the implementation of this curriculum will be presented to demonstrate the nature of teachers’ experiences with the curriculum. Participants. Participants are teachers implementing the new curriculum at two schools in the metro Atlanta area. Study Method. This paper is partly descriptive, presenting the theory underlying the newly developed curriculum as well as its various features. An organizing framework, the Teacher Accessibility, Equity, and Content (TEC) rubric from Weintrop et al. (2019) [1], is used to structure the curriculum description. Teacher perceptions were gathered via both structured interviews and short online enactment surveys. These perceptions are summarized and presented thematically, corresponding to the features of the curriculum. Findings. A newly developed introductory computer science (CS) curriculum, Student-Centered Computing (SCC), utilizes project-based learning (PBL) and culturally authentic practices (CAPs) to help promote a sense of belonging and intent to persist within computer science among all students. Teachers successfully implemented the curriculum and generally found it to be beneficial for their students, though they struggled with some of the pedagogical demands of project-based learning as well as some of the most advanced technical content associated with the music coding and app development platforms. Conclusions. This paper provides a detailed overview of a year-long introductory computer science curriculum focused on the creation of culturally relevant digital artifacts. The curriculum represents a strong effort to make CS content relevant and appealing to the full range of students by relating it to their lives and experiences. Teacher surveys and interviews revealed that both teachers and students had positive views of the course. However, teaching using inclusive PBL pedagogy and culturally authentic practices takes skill and practice by teachers, supporting the need for CS teachers to have good pedagogical training as well as a strong knowledge of computer science to create a classroom environment that promotes success for all students. © 2023 Copyright held by the owner/author(s).",computer science curriculum; culturally responsive pedagogy; curriculum design; K-12 computer science education,Computation theory; Education computing; Engineering education; Personnel training; Students; Teaching; Computer Science course; Computer science curricula; Computer Science Education; Culturally responsive pedagogy; Curricula design; Introductory computer science; K-12 computer science education; Project based learning; Student-centred; Teachers'; Curricula
Potential Factors for Retention and Intent to Drop-out in Brazilian Computing Programs,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85173237442&doi=10.1145%2f3607537&partnerID=40&md5=a67b6c1f64f1a0b47c73c3d60ee45b98,"Motivation: Enrollments in Brazilian computing degrees are at an all-time high, but graduation numbers have not increased at the same rate. Moreover, enrollment growth has mainly attracted male students, steadily expanding the gender gap in Brazilian computing programs. Such high attrition rates have a great economic impact and may disproportionately affect women and students of color. Previous works investigated reasons for student drop-out and retention in specific courses or barriers to entrance in computing programs in narrower contexts or in a single institution. Objectives: We investigate potential actionable factors for intent to drop out in computing programs and what factors might lead students to remain in a computing program in several Brazilian institutions. We investigated how such factors may be affected by students' race/ethnicity, gender, and socioeconomic status. Method: We analyzed Likert-style answers from an online survey with 3,193 students currently enrolled in Brazilian computing programs. Results: The results show that students value salary/job-related factors as the most important factors to potentially remain in a computing program. The excess of theoretical courses and the difficulty of programming and mathematics courses are the top-ranked factors by students to potentially abandon a computing degree. However, while there is little effect of gender, race/ethnicity, or socioeconomic status in retention factors, potential drop out factors such as a the fact that it is a male-dominated field, harassment, and the difficulty of courses were rated as more important by women. Also, costs and the difficulty of courses are relevant factors for the intent to drop out when analyzing students' race/ethnicity and socioeconomic status. Discussion: We explore the implications of our findings for Computing programs, particularly (but not restricted to) the Brazilian context. We conjecture reasons for such students' perspectives regarding intent to drop out and retention factors and provide recommendations of actions for instructional designers, curriculum developers, and other key stakeholders to address issues related to gender, students' wellness, perceived authenticity of courses, and other relevant factors. Since we only observed small interactions between race/ethnicity and retention and intent to drop out factors, which may indicate a lack of sensitivity from the instrument, we present suggestions to address such limitations in future work.  © 2023 Copyright held by the owner/author(s). Publication rights licensed to ACM.",CS degrees; drop-out; gender gap; Retention,Compensation (personnel); Curricula; Drops; Attrition rate; Computing programmes; CS degree; Drop-out; Economic impacts; Gender gap; Online surveys; Retention; Retention factors; Socio-economic status; Students
CISing Up Service Learning: A Systematic Review of Service Learning Experiences in Computer and Information Science,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85173215248&doi=10.1145%2f3610776&partnerID=40&md5=6f024ca34296460eda064b5a6ac4ee17,"The benefits of service learning in computer and information science (CIS) are believed to be significant, ranging from providing students with real-world experiences to retaining students to positively impacting community partners. Although there are many benefits of service learning, the CIS domain does impose unique costs for integrating service learning into the curriculum. Yet there is little systematic research to help the CIS community understand best practices for maximizing benefits while minimizing costs. Experience reports about service learning courses in CIS have appeared in the literature annually since 2000, and thus we address this gap in knowledge by conducting a systematic review and content analysis of 84 experience reports from the The ACM Guide to Computing Literature. We synthesize the current state of service learning in CIS as well as derive recommendations for best practices and future research directions.  © 2023 Copyright held by the owner/author(s).",authentic learning; experiential learning; Service learning,Education computing; Students; Authentic learning; Best practices; Experience report; Experiential learning; Learning experiences; Real-world experience; Science community; Service learning; Systematic research; Systematic Review; Curricula
Identity in Higher Computer Education Research: A Systematic Literature Review,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85173284330&doi=10.1145%2f3606707&partnerID=40&md5=776aef9a445984b73cd279a447368840,"The disciplinary identity as a computer science student has recently received increasing attention as a well-developed subject identity can help with increasing retention, interest, and motivation. Besides, identity theory can serve as an analytical lens for issues around diversity. However, identity is also often perceived as a vague, overused concept with a variety of theories to build upon. In addition, connections to other topics, such as computer science conceptions, remain unclear and there seems to be little intra-disciplinary exchange about the concept. This article, therefore, attempts to provide a starting point by presenting a so far missing systematic literature review of identity in Computing Education Research (CER). We analyzed a corpus of 41 articles published since 2005 with a focus on the variety of identity theories that are used, the reasons for using them, and the overall theoretical framing of the concept in the CER literature up to this point. We use content analysis with both inductive and deductive coding to derive categories from the corpus to answer our research questions. The results show that there is less variety in the theories than originally expected, most publications refer to the theory of ""Communities of Practice"". The reasons for employing identity theory are also rather canonical, in particular, there is only little theoretical development of the theories within CER and also only little empirical work. Finally, we also present an extended version of a computing identity that can be theoretically derived from the work in our corpus. © 2023 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Computer science education; identity; systematic literature review; theory,Computation theory; Engineering education; Computer education; Computer Science Education; Computer science students; Computing education; Content analysis; Education research; Identity; Research questions; Systematic literature review; Theory; Education computing
"Combining GitHub, Chat, and Peer Evaluation Data to Assess Individual Contributions to Team Software Development Projects",2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85173213664&doi=10.1145%2f3593592&partnerID=40&md5=09e1eb6c8029fe624fe425c3cdb125db,"Assessing team software development projects is notoriously difficult and typically based on subjective metrics. To help make assessments more rigorous, we conducted an empirical study to explore relationships between subjective metrics based on peer and instructor assessments, and objective metrics based on GitHub and chat data. We studied 23 undergraduate software teams (n = 117 students) from two undergraduate computing courses at two North American research universities. We collected data on teams' (a) commits and issues from their GitHub code repositories, (b) chat messages from their Slack and Microsoft Teams channels, (c) peer evaluation ratings from the CATME peer evaluation system, and (d) individual assignment grades from the courses. We derived metrics from (a) and (b) to measure both individual team members' contributions to the team, and the equality of team members' contributions. We then performed Pearson analyses to identify correlations among the metrics, peer evaluation ratings, and individual grades. We found significant positive correlations between team members' GitHub contributions, chat contributions, and peer evaluation ratings. In addition, the equality of teams' GitHub contributions was positively correlated with teams' average peer evaluation ratings and negatively correlated with the variance in those ratings. However, no such positive correlations were detected between the equality of teams' chat contributions and their peer evaluation ratings. Our study extends previous research results by providing evidence that (a) team members' chat contributions, like their GitHub contributions, are positively correlated with their peer evaluation ratings; (b) team members' chat contributions are positively correlated with their GitHub contributions; and (c) the equality of team' GitHub contributions is positively correlated with their peer evaluation ratings. These results lend further support to the idea that combining objective and subjective metrics can make the assessment of team software projects more comprehensive and rigorous.  © 2023 Copyright held by the owner/author(s).",assessment; CATME; collaborative software development; Covid-19; GitHub; Microsoft Teams; online chat communication; peer evaluation; Slack; Software engineering education,C (programming language); Curricula; Groupware; Software design; Assessment; CATME; Collaborative software development; Covid-19; Github; MicroSoft; Microsoft team; Online chat communication; Peer evaluations; Slack; Software engineering education; Students
"Regular"" CS × Inclusive Design = Smarter Students and Greater Diversity",2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85173221128&doi=10.1145%2f3603535&partnerID=40&md5=c055ff3453b777f23063d36f9576a4a8,"What if ""regular""Computer Science (CS) faculty each taught elements of inclusive design in ""regular""CS courses across an undergraduate curriculum? Would it affect the CS program's climate and inclusiveness to diverse students? Would it improve retention? Would students learn less CS? Would they actually learn any inclusive design? To answer these questions, we conducted a year-long Action Research investigation, in which 13 CS faculty integrated elements of inclusive design into 44 CS/IT offerings across a 4-year curriculum. The 613 affected students' educational work products, grades, and/or climate questionnaire responses revealed significant improvements in students' course outcomes (higher course grades and fewer course fails/incompletes/withdrawals), especially for marginalized groups; revealed that most students did learn and apply inclusive design concepts to their CS activities; and revealed that inclusion and teamwork in the courses significantly improved. These results suggest a new pathway for significantly improving students' retention, their knowledge and usage of inclusive design, and their experiences across CS education - for marginalized groups and for all students.  © 2023 Copyright held by the owner/author(s). Publication rights licensed to ACM.",broadening participation; CS education; diversity; GenderMag; HCI education; inclusion; Inclusive Design,Curricula; Education computing; Engineering education; Human computer interaction; Inclusions; Product design; Broadening participation; Computer Science course; Computer Science Education; Computer science programs; Diversity; Gendermag; HCI education; Inclusive design; Learn+; Undergraduate curricula; Students
Evaluation of Submission Limits and Regression Penalties to Improve Student Behavior with Automatic Assessment Systems,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85173244256&doi=10.1145%2f3591210&partnerID=40&md5=965de5de3dc10d52165467c1bfa6438c,"Objectives. Automatic assessment systems are widely used to provide rapid feedback for students and reduce grading time. Despite the benefits of increased efficiency and improved pedagogical outcomes, an ongoing challenge is mitigating poor student behaviors when interacting with automatic assessment systems including numerous submissions, trial-and-error, and relying on marking feedback for problem solving. These behaviors negatively affect student learning as well as have significant impact on system resources. This research quantitatively examines how utilizing submission policies such as limiting the number of submissions and applying regression penalties can reduce negative student behaviors. The hypothesis is that both submission policies will have a significant impact on student behavior and reduce both the number of submissions and regressions in student performance. The research questions evaluate the impact on student behavior, determine which submission policy is the most effective, and what submission policy is preferred by students.Participants. The study involved two course sections in two different semesters consisting of a total of 224 students at the University of British Columbia, a research-intensive university. The students were evaluated using an automated assessment system in a large third year database course.Study Methods. The two course sections used an automated assessment system for constructing database design diagrams for assignments and exams. The first section had no limits on the number of submissions for both assignments and exams. The second section had limits for the exams but no limits on assignments. On the midterm, participants were randomly assigned to have either a restriction on the total number of submissions or unlimited submissions but with regression penalties if a graded answer was lower than a previous submission. On the final exam, students were given the option of selecting their submission policy. Student academic performance and submission profiles were compared between the course sections and the different submission policies.Findings. Unrestricted use of automatic grading systems results in high occurrence of undesirable student behavior including trial-and-error guessing and reduced time between submissions without sufficient independent thought. Both submission policies of limiting maximum submissions and utilizing regression penalties significantly reduce these behaviors by up to 85%. Overall, students prefer maximum submission limits, and demonstrate improved behavior and educational outcomes.Conclusions. Automated assessment systems when used for larger problems related to design and programming have benefits when deployed with submission restrictions (maximum attempts or regression penalty) for both improved student learning behaviors and to reduce the computational costs for the system. This is especially important for summative assessment but reasonable limits for formative assessments are also valuable. © 2023 Copyright held by the owner/author(s). Publication rights licensed to ACM.",assessment; auto-grading; Automatic marking; database; programming and design questions; regression penalties; submission limits; UML,Automation; Curricula; Database systems; Education computing; Regression analysis; Students; Assessment; Assessment system; Auto-grading; Automatic marking; Design questions; Programming and design question; Regression penalty; Students' behaviors; Submission limit; UML; Grading
Relationship Between Implicit Intelligence Beliefs and Maladaptive Self-Regulation of Learning,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85173262435&doi=10.1145%2f3595187&partnerID=40&md5=34b0dc1ad202510cb09f81ea8b04178a,"Objectives. Although prior research has uncovered shifts in computer science (CS) students' implicit beliefs about the nature of their intelligence across time, little research has investigated the factors contributing to these changes. To address this gap, two studies were conducted in which the relationship between ineffective self-regulation of learning experiences and CS students' implicit intelligence beliefs at different times during the semester was assessed.Participants. Participants for Studies 1 (n = 536) and 2 (n = 222) were undergraduate students enrolled in introductory- and upper-level CS courses at a large, public, Midwestern university. Race-ethnicity information was not collected due to IRB concerns about possible secondary identification of participants from underrepresented groups.Study Method. Participants completed a condensed version of the Implicit Theories of Intelligence Scale [16, 54] and the Lack of Regulation Scale from the Student Perceptions of Classroom Knowledge Building scale [51, 53] at the beginning (Studies 1 and 2), middle (Study 2), and end (Studies 1 and 2) of semester-long undergraduate CS courses. Survey responses were analyzed using path analyses to investigate how students' lack of regulation experiences throughout the semester predicted their implicit intelligence beliefs at the beginning (Study 2) and end (Studies 1 and 2) of the semester.Findings. Results from Study 1 indicate that undergraduate CS students come to more strongly believe that their intelligence is a fixed, unchanging entity from the beginning until the end of the semester. Moreover, participants' responses to the lack of regulation scale were predictive of their implicit intelligence beliefs at the end of the semester. Results from Study 2 indicate that ineffective self-regulation experiences early in the semester enhance CS students' belief in the unchanging nature of intelligence (i.e., during the first half of the semester). Taken altogether, these findings provide evidence that self-regulation experiences influence students' beliefs about the malleability of intelligence.Conclusions. Findings align with Bandura's [4] contention that students' behaviors and experiences influence their values and beliefs. Students who experienced poor self-regulated learning came to view intelligence as more of a fixed, unalterable entity than their more successfully self-regulated peers. Findings suggest that CS instructors can positively affect student motivation and engagement by embedding self-regulated learning strategy instruction into their courses and helping CS students adopt an incremental-oriented (e.g., growth-oriented) belief system about their intellectual abilities.  © 2023 Copyright held by the owner/author(s). Publication rights licensed to ACM.",Academic motivation; implicit intelligence beliefs; undergraduates,Computer aided instruction; Deregulation; Learning systems; Motivation; Regression analysis; Academic motivations; Across time; Computer Science course; Computer science students; Implicit intelligence belief; Learning experiences; Self regulation; Under-represented groups; Undergraduate; Undergraduate students; Students
Competency Models for Information Security and Cybersecurity Professionals: Analysis of Existing Work and a New Model,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85179886143&doi=10.1145%2f3573205&partnerID=40&md5=41487aa11d7af267300c49bc2a554b2c,"Competency models are widely adopted frameworks that are used to improve human resource functions and education. However, the characteristics of competency models related to the information security and cybersecurity domains are not well understood. To bridge this gap, this study investigates the current state of competency models related to the security domain through qualitative content analysis. Additionally, based on the competency model analysis, an evidence-based competency model is proposed. Examining the content of 27 models, we found that the models can benefit target groups in many different ways, ranging from policymaking to performance management. Owing to their many uses, competency models can arguably help to narrow the skills gap from which the profession is suffering. Nonetheless, the models have their shortcomings. First, the models do not cover all of the topics specified by the Cybersecurity Body of Knowledge (i.e., no model is complete). Second, by omitting social, personal, and methodological competencies, many models reduce the competency profile of a security expert to professional competencies. Addressing the limitations of previous work, the proposed competency model provides a holistic view of the competencies required by security professionals for job achievement and can potentially benefit both the education system and the labor market. To conclude, the implications of the competency model analysis and use cases of the proposed model are discussed. © 2023 Association for Computing Machinery.",competency; competency model; Cybersecurity education; skills gap; workforce development,Personnel; 'current; Competency; Competency model; Cyber security; Cyber-security educations; Human resource functions; Modeling analyzes; Professional analysis; Skills gaps; Workforce development; Cybersecurity
The TACS Model: Understanding Primary School Teachers’ Adoption of Computer Science Pedagogical Content,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85173086895&doi=10.1145%2f3569587&partnerID=40&md5=91ca87e09ad01d2f57beb98aa1d490f5,"Context. With the introduction of Computer Science (CS) into curricula worldwide, teachers’ adoption of CS pedagogical content is essential to ensure the long-term success of reform initiatives. Continuing Professional Development (CPD) programs play a key role in this process. Unfortunately, adoption is seldom evaluated in CS-CPDs or CPDs in general. The result is a dearth of studies (i) modelling teachers’ adoption of CS pedagogical content or (ii) investigating factors influencing the uptake of this new discipline. Both aspects are crucial to design and characterize successful CPD programs. Objectives. We thus propose the Teachers’ Adoption of CS (TACS) model to investigate factors influencing the adoption of CS pedagogical content by teachers who are following a mandatory CS-CPD program. More specifically, the model proposes that contextual factors (e.g., age, gender, and general teaching experience), prior factors (e.g., experience, and CS perception), and acceptance factors (e.g., interest, and self-efficacy) may impact teachers’ adoption of CS pedagogical content. Methods. The study included 180 grades 5 and 6 teachers (students aged 9–11) that were following a mandatory CS-CPD program. The CS-CPD program involved participation in three-day-long sessions distributed over the 2019–2020 academic year. In between sessions, with the support of instructional coaches in the schools, teachers were encouraged, but not required, to adopt the CS pedagogical content. Therefore, during the CPD, and employing surveys based on the TACS model, we evaluated teachers’ adoption of the proposed content and investigated how the different factors influenced it. Results. At the PD-level, the results indicate that self-efficacy and interest queried during the CS-CPD are indicative of CS pedagogical content adoption. To shed more light on the relationshipbetween these metrics, a more in-depth analysis was conducted with n = 92 teachers whose responses could be matched between sessions. While interest relates to how teachers adopt CS pedagogical content overall, both interest and self-efficacy are necessary to ensure the likelihood of a specific activity being adopted. Finally, individual teacher characteristics appear to impact adoption, with teachers with low experience with Information and Communication Technologies (ICT) requiring onboarding, while middle-aged teachers require convincing to adopt CS pedagogical content. Conclusion. Three takeaways emerge from the study. First, the analyses confirm the foundation of the TACS model. Second, the findings establish the key role that interest plays in said model. Finally, the results support the relationship between the contextual, prior and acceptance factors on the adoption of primary school CS pedagogical content. © 2023 Copyright held by the owner/author(s).",Adoption; computer science education; formal learning environments; pedagogical content; primary school; teacher professional development,Computer aided instruction; Curricula; Engineering education; Adoption; Computer Science Education; Continuing professional development; Formal learning environments; Pedagogical content; Primary schools; Professional development programme; Self efficacy; Teacher professional development; Teachers'; Education computing
A Dialog About the Special Issues on Theory,2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147996786&doi=10.1145%2f3554982&partnerID=40&md5=691724e069f4f5f90cced1f98f46e55d,"Several authors of articles in the special issue came together for an asynchronous discussion of the articles, surfacing several tensions and opportunities for future work. This summary of the discussion offers a glimpse into these insights. © 2023 Association for Computing Machinery.",Research methods; theoretical frameworks,Asynchronous discussions; Research method; Theoretical framework; Computer programming
"Investigating K-12 Computing Education in Four African Countries (Botswana, Kenya, Nigeria, and Uganda)",2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147986497&doi=10.1145%2f3554924&partnerID=40&md5=ee01f5100833bf509ba0c758f33744bf,"Motivation. As K-12 computing education becomes more established throughout the world, there is an increasing focus on accessibility for all, whether in a particular country or setting or in areas of the world that may not yet have computing established. This is primarily articulated as an equity issue. The recently developed capacity for, access to, participation in, and experience of computer science education (CAPE) Framework is one way of demonstrating stages and dependencies and understanding relative equity, taking into consideration the disparities between sub-populations. While there is existing research that covers the state of computing education and equity issues, it is mostly in high-income countries; there is minimal research in the context of low-middle-income countries like the sub-Saharan African countries.Objectives. The objective of the article is therefore to report on a pilot study investigating the capacity (one of the equity issues), for delivering computing education in four sub-Saharan African countries: Botswana, Kenya, Nigeria and Uganda, countries that are in different geographic regions as well as in different income brackets (low-middle income).Method. In addition to reviewing the capacity issues of curriculum and policy around computing education in each country, we surveyed 58 teachers about the infrastructure, resources, professional development, and curriculum for computing in their country. We used a localized version of the MEasuring TeacheR Enacted Computing Curriculum (METRECC) instrument for this purpose.Results. We analyzed the results through the lens of the CAPE framework at the capacity level. We identified similarities and differences in the data from teachers who completed the original METRECC survey, all of whom were from high-income countries and African teachers. The data revealed statistically significant differences between the two datasets in relation to access to resources and professional development opportunities in computer studies/computer science, with the African teachers experiencing more barriers. Results further showed that African teachers focus less on teaching algorithms and programming than teachers from high-income countries. In addition, we found differences between African countries in the study, reflecting their relative access to IT infrastructure and resources.Discussion. The findings suggest that African countries are still struggling with the lowest level of the CAPE pyramid, Capacity for as compared to high-income countries. This level is concerned with the availability of resources that support the enactment of a computing curriculum of high quality. The CAPE framework helps map the progression from Capacity for to Experience of computer science education as a route to equity, but to support development in low and middle-income countries, it may be helpful to have the capacity level finely grained. Such an adaptation draws out dependencies between policy and vision, infrastructure, curriculum implementation, and teacher professional development. More research is recommended to investigate these dependencies further and thus support and facilitate the development of global computing education. © 2023 Copyright held by the owner/author(s).",Africa; Curriculum; K-12 computing education; professional development; teacher education,Education computing; Professional aspects; Teaching; Africa; Botswana; Computer Science Education; Computing curricula; Computing education; K-12 computing education; Nigeria; Professional development; Teacher education; Teachers'; Curricula
"Editorial for the Second Special Issue on ""Conceptualizing and Using Theory in Computing Education Research""",2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85148044998&doi=10.1145%2f3570729&partnerID=40&md5=24529a70d5af5649924d12e6d2f010c7,"In this editorial, we introduce the second set of papers for the special issue ""Conceptualizing and Using Theory in CER"". These papers focus on meta level discussion on theories in CER, addressing the definition of theories, what theoretical contributions have been developed for CER, how theories have been used, and what other type of contributions there are in the field. The issue also includes guest editors' own reflections on theory. © 2023 Association for Computing Machinery.",computing education research; Theory; theory definition; theory use,Computing education; Computing education research; Education research; Meta levels; Theory; Theory definition; Theory use; Computer programming
"The Different Types of Contributions to Knowledge (in CER): All Needed, But Not All Recognised",2023,ACM Transactions on Computing Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85147982858&doi=10.1145%2f3487053&partnerID=40&md5=de7e2fc32d667447334e5fd280500b1d,"The overall aim of this article is to stimulate discussion about the activities within CER, and to develop a more thoughtful and explicit perspective on the different types of research activity within CER, and their relationships with each other. While theories may be the most valuable outputs of research to those wishing to apply them, for researchers themselves there are other kinds of contributions important to progress in the field. This is what relates it to the immediate subject of this special journal issue on theory in CER. We adopt as our criterion for value ""contribution to knowledge"".This article's main contributions are-A set of 12 categories of contributions which together indicate the extent of this terrain of contributions to research.-Leading into that is a collection of ideas and misconceptions which are drawn on in defining and motivating ""ground rules"", which are hints and guidance on the need for various often neglected categories. These are also helpful in justifying some additional categories which make the set as a whole more useful in combination.These are followed by some suggested uses for the categories, and a discussion assessing how the success of the article might be judged. © 2023 Association for Computing Machinery.",computing education research; contributions to knowledge; taxonomy; Theory,Computing education; Computing education research; Contribution to knowledge; Education research; Research activities; Theory; Computer programming

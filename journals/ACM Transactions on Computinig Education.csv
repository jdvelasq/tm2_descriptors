Title,Year,Source title,Link,Abstract,Author Keywords,Index Keywords
"Media, mood, and meetings: Related to project success?",2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84954096336&doi=10.1145%2f2771440&partnerID=40&md5=e784bb2401c1f1b1eee37ab2ea945a65,"This article investigates relationships between media, mood, and communication in teams, and studies how they are related to project success. Team projects are an essential part of the software engineering curriculum. Student teams carry out full software projects, including requirements elicitation, project management, implementation, and testing. This requires various technical skills, but non-technical and psychological aspects are of utmost importance as well, just as in professional software teams. Modern software is often developed by distributed teams. In many cases, team members feel isolated and distant from each other. Indirect communication and inappropriatemedia create a similar feeling of distance as geographical location. This perceived distance could have an impact on their individual and group moods, and eventually on project success. Therefore, these factors should be considered in educational software engineering team projects. In a longitudinal study at Leibniz Universität Hannover, 20 student teams were observed over a period of 4 months. They were free to schedule team meetings when and where they wanted; and they could use any communication media they chose. Statistical correlations and non-parametric test are used for quantitative empirical analysis. Furthermore, we used analyses of variance for repeated measures to investigate conflicts over time. Results led to a number of recommendations for course organizers. They are interesting for software engineering in general. © 2015 ACM.",Collaboration networks; Communication; Conflicts; Meeting culture; Mood; Team performance,Communication; Curricula; Professional aspects; Project management; Software engineering; Software testing; Collaboration network; Conflicts; Indirect communication; Mood; Requirements elicitation; Software engineering curricula; Statistical correlation; Team performance; Human resource management
"From scratch to ""Real"" programming",2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924085936&doi=10.1145%2f2677087&partnerID=40&md5=58ede34ad7006d244d768caa9c0b0e80,"Computer science (CS) activities for young students are widely used, particularly visual programming environments. We investigated the use of the Scratch environment for teaching CS concepts to middle school students. In a previous article [Meerbaum-Salant et al. 2013], we reported on the extent to which the CS concepts were successfully learned. In this article, we look at the transition from studying CS with the visual Scratch environment in middle school to studying CS with a professional textual programming language (C# or Java) in secondary school. We found that the programming knowledge and experience of students who had learned Scratch greatly facilitated learning the more advanced material in secondary school: less time was needed to learn new topics, there were fewer learning difficulties, and they achieved higher cognitive levels of understanding of most concepts (although at the end of the teaching process, there were no significant differences in achievements compared to students who had not studied Scratch). Furthermore, there was increased enrollment in CS classes, and students were observed to display higher levels of motivation and self-efficacy. This research justifies teaching CS in general and visual programming in particular in middle schools. © 2015 ACM.",Computer programming; Middle schools; Scratch; Spiral curriculum,Curricula; Education; Java programming language; Students; Teaching; Visual languages; Advanced materials; Learning difficulties; Middle school; Middle school students; Programming knowledge; Scratch; Spiral curriculum; Visual programming environments; Computer programming
Team projects in computing education,2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84954211589&doi=10.1145%2f2808079&partnerID=40&md5=bac087b65ec54fc68ee435d3d8e9bd4b,"Team projects are a way to expose students to conflicting project objectives, and ""[t]here should be a strong real-world element ⋯ to ensure that the experience is realistic"" [ACM/IEEE-CS 2015b]. Team projects provide students an opportunity to put their education into practice and prepare them for their professional careers. The aim of this special issue is to collect and share evidence about the state-of-practice of team projects in computing education and to help educators in designing and running team projects. From a record number of 69 submitted abstracts, 19 were invited to submit a full paper. Finally, nine papers were accepted for publication in this and a subsequent issue. The articles presented in the present issue cover the following topics: real projects for real clients, open source projects, multidisciplinary team projects, student and team assessment, and cognitive and psychological aspects of team projects. © 2015 ACM.",Team projects,Education; Employment; Computing education; Multi-disciplinary teams; Open source projects; Professional careers; Project objectives; Psychological Aspects; State of practice; Team projects; Students
Software engineering project courses with industrial clients,2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84954327014&doi=10.1145%2f2732155&partnerID=40&md5=e07b2b904f5eb7dda3da6a5eadc4e851,"There is an acknowledged need for teaching realistic software development in project courses. The design space for such courses is wide, ranging from single-semester to two-semester courses, from single-client to multicustomer courses, from local to globally distributed courses, and from toy projects to projects with real clients. The challenge for a nontrivial project course is how to make the project complex enough to enrich students' software engineering experience, yet realistic enough to have a teaching environment that does not unduly burden students or the instructor. We describe a methodology for project courses that is realizable for instructors, improves students' skills, and leads to viable results for industry partners. In particular, recent advances in release management and collaboration workflows reduce the effort of students and instructors during delivery and increase the quality of the deliverables. To enable release and feedback management, we introduce Rugby, an agile process model based on Scrum that allows reacting to changing requirements. To improve early communication, we use Tornado, a scenario-based design approach that emphasizes the use of informalmodels for the interaction between clients and students. The combination of Rugby and Tornado allows students to deal with changing requirements, produce multiple releases, and obtain client feedback through the duration of the course. We describe our experience with more than 300 students working on 40 projects with external clients over a 4-year period. In the latest instance of our course, the students have produced more than 7000 builds with 600 releases for eleven clients. In an evaluation of the courses, we found that the introduction of Rugby and Tornado significantly increased students' technical skills, especially with respect to software engineering, usability engineering, and configuration management, as well as their nontechnical skills such as communication with the client, teamwork, presentation, and demo management. Finally, we discuss how other instructors can adapt the course concept. Copyright © 2015 ACM.",Agile methods; Communication models; Continuous delivery; Continuous integration; Executable prototypes; Feedback; Informal modeling; Prototyping; Release management; Scenario-based design; Scrum; Unified Process; User involvement; Version control system,Curricula; Education; Feedback; Human resource management; Software design; Software engineering; Software prototyping; Students; Tornadoes; Usability engineering; Agile methods; Communication models; Continuous delivery; Continuous integrations; Executable prototypes; Release management; Scenario-based design; Scrum; Unified process; User involvement; Version control system; Teaching
"Assessing large-project courses: Model, activities, and lessons learned",2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84954185308&doi=10.1145%2f2732156&partnerID=40&md5=c056198d1d5e084ae1d5e38222bd970a,"In a modern computing curriculum, large-project courses are essential to give students hands-on experience of working in a realistic software engineering project. Assessing such projects is, however, extremely challenging. There are various aspects and trade-offs of assessments that can affect course quality. Individual assessments may fairly grade individuals, but may lose focus of the project as a group activity. Extensive teacher involvement is necessary for objective assessment, but may affect the way that students work. Continuous feedback to students can enhance learning, but may be hard to combine with fair assessment. Most previous work focuses on some specific assessment aspect; in this article, we present an assessment model that consists of a collection of assessment activities, each covering different aspects. We have applied, developed, and improved these activities during a 7yr period. To evaluate the usefulness of the model, we perform questionnaire-based surveys over a 2yr period. Furthermore, we design and execute an experiment that studies to what extent students can perform fair peer assessment and to what degree the assessments of students and teachers agree. We analyze the results, discuss findings, and summarize lessons learned. © 2015 ACM.",Assessment; Project courses; Software engineering,Curricula; Economic and social effects; Education; Software engineering; Students; Surveys; Assessment; Assessment activities; Assessment models; Computing curricula; Feedback to students; Objective assessment; Project course; Software engineering projects; Teaching
Looking backward to look forward: TOCE in transition,2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84943651295&doi=10.1145%2f2817209&partnerID=40&md5=5e13b1cc6434face55249ed619b7c55e,"This editorial marks the end of our tenure as founding co-editors-in-chief of the ACM Transactions on Computing Education (TOCE). We have three goals in this editorial. First, we provide a retrospective on how we positioned TOCE, both in terms of how it embodies our conception of Computing Education Research (CER) as a field, as well as the journal's role in the larger computing education community and the ACM. We focus on the process by which we determined what constitutes publishability for a manuscript submitted to TOCE, describing what is best understood as a living process negotiated among the authors, reviewers, associate editors, and editors-in-chief in interaction with manuscripts and one another. Second, having reviewed a bit of history, we look at some possible changes in TOCE's future, particularly in light of conversations that the ACM is engaged in at all levels regarding recent open publishing initiatives as well as the relationship between journal and conference publications. Finally, we thank the many people who have contributed to the success of TOCE for their significant effort in establishing TOCE as a publication venue for papers in computing education. © 2015 ACM.",Computing education research; Publication criteria,Computing education; Conference publications; Living process; Look-forward; Open publishing; Publication criteria; Education
Computing education in Korea-current issues and endeavors,2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929177334&doi=10.1145%2f2716311&partnerID=40&md5=c780d34a16b7b81e7b8ec22bdb89f6a5,"Computer education has been provided for a long period of time in Korea. Starting as a vocational program, the content of computer education for students evolved to include content on computer literacy, Information Communication Technology (ICT) literacy, and brand-new computer science.While a new curriculum related to computer science was established in 2007, the range of computer education being provided in Korean schools has been repeatedly reduced. To identify the cause of this recent phenomenon,we review the computer education environment using the Darmstadt model, including educational systems, curricula, and teaching environments. Then we examine what factors affected the decline of computer education. The major causes of failure are found to be the absence of policy and a comprehensive evaluation method. These causes have led to a reduction in the selection ratio of computer-related subjects and in the number of students taking computer classes. Based on this understanding, we bring some fundamental message for establishing robust computer science education. © 2015 ACM.",,Curricula; Education; Engineering education; Students; Teaching; Comprehensive evaluation; Computer education; Computer literacy; Computer Science Education; Computing education; Educational systems; Information communication technology; Vocational program; Education computing
"Computer science education in North-Rhine Westphalia, Germany-A case study",2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929160532&doi=10.1145%2f2716313&partnerID=40&md5=41e82b86bae3b97aa848fd8653bf42da,"In North-RhineWestphalia, the most populated state in Germany, Computer Science (CS) has been taught in secondary schools since the early 1970s. This article provides an overview of the past and current situation of CS education in North-Rhine Westphalia, including lessons learned through efforts to introduce and to maintain CS in secondary education. In particular, we focus on the differential school system and the educational landscape of CS education, the different facets of CS teacher education, and CS education research programs and directions that are directly connected with these aspects. In addition, this report offers a rationale for including CS education in general education, which includes the educational value of CS for students in today's information and knowledge society. Through this article, we ultimately provide an overview of the significant elements that are crucial for the successful integration of CS as a compulsory subject within secondary schools. © 2015 ACM.",,Education computing; Teaching; Computer Science Education; CS education research; Current situation; General education; Knowledge society; School systems; Secondary schools; Teacher education; Education
Computer science (CS) education in Indian schools: Situation analysis using darmstadt model,2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929178972&doi=10.1145%2f2716325&partnerID=40&md5=23f8ae3dcf80992ad8d5c2260ebb425a,"Computer science (CS) and its enabling technologies are at the heart of this information age, yet its adoption as a core subject by senior secondary students in Indian schools is low and has not reached critical mass. Though there have been efforts to create core curriculum standards for subjects like Physics, Chemistry, Biology, and Math, CS seems to have been kept outside the purview of such efforts leading to its marginalization. As a first step, using the Darmstadt model from the ITiCSE working group that provides a systematic categorization approach to CS education in schools, we coded and analyzed the CS situation for the Indian schools. Next, we focused on the motivation category of the Darmstadt model and investigated behavioral intentions of secondary school students and teachers from 332 schools in India. Considering the CS subject as an educational innovation, using Rogers' Theory of Diffusion of Innovations, we propose a pedagogical framework for innovation attributes that can significantly predict-adoption of the CS subject among potential-adopter students and teachers. Data was analyzed to answer research questions about student and teacher intentions, influence of gender, school management, and school location in adopting CS. Interestingly, girls, urban students, teachers, and private schools were seen favoring the adoption of CS. An important issue that needed to be addressed, however, was the interchangeable use of terms like CS, Informatics, ICT, and digital literacy. Through our article, we offer a promising picture of the educational policy directives and the academic environment in India that is rapidly growing and embracing CS as a core subject of study in schools. We also analyze the factors that influence the adoption of CS by school students and teachers and conclude that there is a very positive response for CS among educators and students in India. © 2015 ACM.",Darmstadt model; ICT education; Theory of diffusion of innovation,Curricula; Education; Information science; Societies and institutions; Students; Teaching; Academic environment; Behavioral intention; Diffusion of innovations; Digital literacies; Educational innovations; Enabling technologies; ICT education; Innovation attributes; Education computing
Scalable game design: A strategy to bring systemic computer science education to schools through game design and simulation creation,2015,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84929208752&doi=10.1145%2f2700517&partnerID=40&md5=75e27e119da2b8a17a46af9b3c0e2250,"An educated citizenry that participates in and contributes to science technology engineering and mathematics innovation in the 21st century will require broad literacy and skills in computer science (CS). School systems will need to give increased attention to opportunities for students to engage in computational thinking and ways to promote a deeper understanding of how technologies and software are used as design tools. However, K-12 students in the United States are facing a broken pipeline for CS education. In response to this problem, we have developed the Scalable Game Design curriculum based on a strategy to integrate CS education into the regular school curriculum. This strategy includes opportunities for students to design and program games and science technology engineering and mathematics simulations. An approach called Computational Thinking Pattern Analysis has been developed to measure and correlate computational thinking skills relevant to game design and simulations. Results from a study with more than 10,000 students demonstrate rapid adoption of this curriculum by teachers from multiple disciplines, high student motivation, high levels of participation by women, and interest regardless of demographic background. © 2015 ACM.",Elementary schools; Game design; Latent semantic analysis; Middle schools; Programming; STEM,Computer games; Curricula; Design; Education; Education computing; Engineering education; Mathematical programming; Semantics; Societies and institutions; Teaching; Elementary schools; Game design; Latent Semantic Analysis; Middle school; STEM; Students
Keeping TOCE on a positive trajectory,2016,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964462316&doi=10.1145%2f2872275&partnerID=40&md5=3e1f2b8ae8a2352317f6eb944bdfb8a5,"In my inaugural editorial as the new editor-in-chief of the ACM Transactions on Computing Education, I take stock of the journal's progress in its first 6 years of existence, and I describe my plans to help the journal maintain its positive trajectory as a viable and vibrant computing education research journal. © 2016 ACM.",Computing education research,
Why computing students learn on their own: Motivation for self-directed learning of computing,2016,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84955469730&doi=10.1145%2f2747008&partnerID=40&md5=d99d1acb36e69eb6a6f353d8381edcbc,"In this article, we address the question of why computing students choose to learn computing topics on their own. A better understanding of why some students choose to learn on their own may help us to motivate other students to develop this important skill. In addition, it may help in curriculum design; if we need to leave some topics out of our expanding curriculum, a good choice might be those topics that students readily learn on their own. Based on a thematic analysis of 17 semistructured interviews, we found that computing students' motivations for self-directed learning fall into four general themes: projects, social and peer interactions, joy of learning, and fear. Under these, we describe several more specific subthemes, illustrated in the words of the students. The project-related and social motivations are quite prominent. Although these motivations appear in the literature, they received greater emphasis from our interviewees. Perhaps most characteristic of computing is the motivation to learn to complete some project, both projects done for fun and projects required for school or work. © 2016 ACM 1936-7228/2016/01-ART5 $15.00.",Informal learning; Motivation; Self-directed learning,Curricula; Education; Motivation; Curriculum designs; Informal learning; Peer interactions; Self-directed learning; Semi structured interviews; Social motivations; Thematic analysis; Students
The impact of different teaching approaches and languages on student learning of introductory programming concepts,2016,ACM Transactions on Computinig Education,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84955458089&doi=10.1145%2f2785807&partnerID=40&md5=f7dc790edd013613c1824b2d6c8867eb,"Learning to program, especially in the object-oriented paradigm, is a difficult undertaking for many students. As a result, computing educators have tried a variety of instructional methods to assist beginning programmers. These include developing approaches geared specifically toward novices and experimenting with different introductory programming languages. However, determining the effectiveness of these interventions poses a problem. The research presented here developed an instrument to assess student learning of fundamental and object-oriented programming concepts, then used that instrument to investigate the impact of different teaching approaches and languages on university students' ability to learn those concepts. Extensive data analysis showed that the instrument performed well overall. Reliability of the assessment tool was statistically satisfactory and content validity was supported by intrinsic characteristics, question response analysis, and expert review. Preliminary support for construct validity was provided through exploratory factor analysis. Three components that at least partly represented the construct ""understanding of fundamental programming concepts"" were identified: methods and functions, mathematical and logical expressions, and control structures. Analysis revealed significant differences in student performance based on instructional language and approach. The analyses showed differences on the overall score and questions involving assignment, mathematical and logical expressions, and code completion. Instructional language and approach did not appear to affect student performance on questions addressing object-oriented concepts. © 2016 ACM 1936-7228/2016/01-ART5 $15.00.",Education,Computational linguistics; Education; Factor analysis; Functions; Reliability analysis; Students; Exploratory factor analysis; Instructional methods; Intrinsic characteristics; Introductory programming; Object oriented paradigm; Object-oriented concepts; Programming concepts; University students; Object oriented programming
